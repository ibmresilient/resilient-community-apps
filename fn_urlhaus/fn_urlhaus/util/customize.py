# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_urlhaus"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_urlhaus package"""
    reload_params = {"package": u"fn_urlhaus",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"urlhaus_artifact_type", u"urlhaus_artifact_value"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_urlhaus"], 
                    "functions": [u"fn_urlhaus", u"fn_urlhaus_submission"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_urlhaus_lookup", u"example_urlhaus_url_submission"], 
                    "actions": [u"Example: URLhaus Lookup", u"Example: URLhaus URL Submission"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     urlhaus_artifact_type
    #     urlhaus_artifact_value
    #   Message Destinations:
    #     fn_urlhaus
    #   Functions:
    #     fn_urlhaus
    #     fn_urlhaus_submission
    #   Workflows:
    #     example_urlhaus_lookup
    #     example_urlhaus_url_submission
    #   Rules:
    #     Example: URLhaus Lookup
    #     Example: URLhaus URL Submission


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMCwgImJ1aWxkX251bWJl
ciI6IDQyNTQsICJ2ZXJzaW9uIjogIjMxLjAuNDI1NCJ9LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9u
IjogMiwgImlkIjogMTMsICJleHBvcnRfZGF0ZSI6IDE1NTMxMzIyMjk4NTgsICJmaWVsZHMiOiBb
eyJpZCI6IDUxLCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAidGV4dCI6ICJTaW11bGF0aW9uIiwg
InByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMCwgInRvb2x0aXAiOiAiV2hldGhlciB0aGUgaW5j
aWRlbnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVndWxhciBpbmNpZGVudC4gIFRoaXMgZmllbGQg
aXMgcmVhZC1vbmx5LiIsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjog
ImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJvcGVyYXRpb25zIjogW10s
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVhZF9vbmx5IjogdHJ1ZSwg
ImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogImlu
Y2lkZW50L2luY190cmFpbmluZyIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxz
ZX0sIHsiaWQiOiAyNTIsICJuYW1lIjogInVybGhhdXNfYXJ0aWZhY3RfdHlwZSIsICJ0ZXh0Ijog
InVybGhhdXNfYXJ0aWZhY3RfdHlwZSIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDExLCAi
dG9vbHRpcCI6ICIiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4dCIsICJy
ZXF1aXJlZCI6ICJhbHdheXMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6
IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24i
OiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogImZmYTgyOGM4LTZkYWEtNDc1NC04
ZmJmLWFhODAyZGY1NDlkMiIsICJvcGVyYXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7
fSwgInZhbHVlcyI6IFtdLCAicmVhZF9vbmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwg
InJpY2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL3VybGhhdXNfYXJ0
aWZhY3RfdHlwZSIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxzZX0sIHsiaWQi
OiAyNTMsICJuYW1lIjogInVybGhhdXNfYXJ0aWZhY3RfdmFsdWUiLCAidGV4dCI6ICJ1cmxoYXVz
X2FydGlmYWN0X3ZhbHVlIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlw
IjogIiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInJlcXVpcmVk
IjogImFsd2F5cyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2Us
ICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNl
LCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiOTE5YzZlYTAtNGUwOS00Y2UyLTk5YjYtZmQ5
MWQwYWM5NzcxIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFs
dWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90
ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vdXJsaGF1c19hcnRpZmFjdF92
YWx1ZSIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxzZX1dLCAiaW5jaWRlbnRf
dHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1NTMxMzIyODM3MzQsICJjcmVhdGVfZGF0ZSI6IDE1
NTMxMzIyODM3MzQsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFh
MCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAi
ZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAibmFtZSI6
ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZW5hYmxlZCI6IGZhbHNlLCAi
c3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVuIjogZmFsc2UsICJpZCI6
IDB9XSwgInBoYXNlcyI6IFtdLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJvdmVycmlkZXMiOiBb
XSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sibmFtZSI6ICJmbl91cmxoYXVzIiwgInByb2dy
YW1tYXRpY19uYW1lIjogImZuX3VybGhhdXMiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJleHBl
Y3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJhQGV4YW1wbGUuY29tIl0sICJ1dWlkIjogIjYyZDhi
MDMwLTJkZjgtNDUyZC1hOWQyLWJmMzJmNjcxOTBjNCIsICJleHBvcnRfa2V5IjogImZuX3VybGhh
dXMifV0sICJhY3Rpb25zIjogW3siaWQiOiA1NiwgIm5hbWUiOiAiRXhhbXBsZTogVVJMaGF1cyBM
b29rdXAiLCAidHlwZSI6IDEsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJjb25kaXRpb25z
IjogW3sibWV0aG9kIjogImluIiwgImZpZWxkX25hbWUiOiAiYXJ0aWZhY3QudHlwZSIsICJ2YWx1
ZSI6IFsiSVAgQWRkcmVzcyIsICJETlMgTmFtZSIsICJVUkwiLCAiTWFsd2FyZSBNRDUgSGFzaCIs
ICJTeXN0ZW0gTmFtZSIsICJTdHJpbmciLCAiTWFsd2FyZSBTSEEtMjU2IEhhc2giXSwgInR5cGUi
OiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGx9XSwgImF1dG9tYXRpb25zIjogW10sICJtZXNz
YWdlX2Rlc3RpbmF0aW9ucyI6IFtdLCAid29ya2Zsb3dzIjogWyJleGFtcGxlX3VybGhhdXNfbG9v
a3VwIl0sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQi
OiAiMjhiMjcwZTktZTJkZS00ZjcyLTlkMmYtNDFhZTAyMTA1YWY3IiwgImV4cG9ydF9rZXkiOiAi
RXhhbXBsZTogVVJMaGF1cyBMb29rdXAiLCAibG9naWNfdHlwZSI6ICJhbGwifSwgeyJpZCI6IDU3
LCAibmFtZSI6ICJFeGFtcGxlOiBVUkxoYXVzIFVSTCBTdWJtaXNzaW9uIiwgInR5cGUiOiAxLCAi
b2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiY29uZGl0aW9ucyI6IFt7Im1ldGhvZCI6ICJlcXVh
bHMiLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC50eXBlIiwgInZhbHVlIjogIlVSTCIsICJ0eXBl
IjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsfV0sICJhdXRvbWF0aW9ucyI6IFtdLCAibWVz
c2FnZV9kZXN0aW5hdGlvbnMiOiBbXSwgIndvcmtmbG93cyI6IFsiZXhhbXBsZV91cmxoYXVzX3Vy
bF9zdWJtaXNzaW9uIl0sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQw
MCwgInV1aWQiOiAiZTEyY2YwNTktYTQ4Mi00NDhmLWFhYWQtMDlkMDkyMDJkNjhjIiwgImV4cG9y
dF9rZXkiOiAiRXhhbXBsZTogVVJMaGF1cyBVUkwgU3VibWlzc2lvbiIsICJsb2dpY190eXBlIjog
ImFsbCJ9XSwgImxheW91dHMiOiBbXSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAidGltZWZyYW1l
cyI6IG51bGwsICJsb2NhbGUiOiBudWxsLCAiaW5kdXN0cmllcyI6IG51bGwsICJyZWd1bGF0b3Jz
IjogbnVsbCwgImdlb3MiOiBudWxsLCAidGFza19vcmRlciI6IFtdLCAiYWN0aW9uX29yZGVyIjog
W10sICJ0eXBlcyI6IFtdLCAic2NyaXB0cyI6IFtdLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMi
OiBbXSwgIndvcmtmbG93cyI6IFt7IndvcmtmbG93X2lkIjogMzYsICJuYW1lIjogIkV4YW1wbGU6
IFVSTGhhdXMgVVJMIFN1Ym1pc3Npb24iLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV91
cmxoYXVzX3VybF9zdWJtaXNzaW9uIiwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2Ny
aXB0aW9uIjogIlN1Ym1pdCBhIFVSTCB0byBVUkxoYXVzIGhhcyBkaXN0cmlidXRpbmcgbWFsd2Fy
ZS4gTm8gb3RoZXIgdHlwZSBvZiB1cmwgd2lsbCBiZSBhY2NlcHRlZCIsICJjcmVhdG9yX2lkIjog
ImFAZXhhbXBsZS5jb20iLCAibGFzdF9tb2RpZmllZF9ieSI6ICJhQGV4YW1wbGUuY29tIiwgImxh
c3RfbW9kaWZpZWRfdGltZSI6IDE1NTMxMzA1NDc4MTMsICJleHBvcnRfa2V5IjogImV4YW1wbGVf
dXJsaGF1c191cmxfc3VibWlzc2lvbiIsICJ1dWlkIjogImVjYjQ3ZmI1LTIzMDgtNDFmMC1hYzEw
LTI1YWJiYWNlMjNkNSIsICJjb250ZW50IjogeyJ3b3JrZmxvd19pZCI6ICJleGFtcGxlX3VybGhh
dXNfdXJsX3N1Ym1pc3Npb24iLCAieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGlu
Zz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVj
L0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcv
c3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcv
c3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3Nw
ZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50Lmli
bS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1h
XCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2Vc
IiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2Vz
cyBpZD1cImV4YW1wbGVfdXJsaGF1c191cmxfc3VibWlzc2lvblwiIGlzRXhlY3V0YWJsZT1cInRy
dWVcIiBuYW1lPVwiRXhhbXBsZTogVVJMaGF1cyBVUkwgU3VibWlzc2lvblwiPjxkb2N1bWVudGF0
aW9uPlN1Ym1pdCBhIFVSTCB0byBVUkxoYXVzIGhhcyBkaXN0cmlidXRpbmcgbWFsd2FyZS4gTm8g
b3RoZXIgdHlwZSBvZiB1cmwgd2lsbCBiZSBhY2NlcHRlZDwvZG9jdW1lbnRhdGlvbj48c3RhcnRF
dmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMTQx
anoyeTwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNr
XzFmMnk5YXFcIiBuYW1lPVwiVVJMaGF1cyBTdWJtaXNzaW9uXCIgcmVzaWxpZW50OnR5cGU9XCJm
dW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCJh
NjU5MDI4ZS1lMzllLTRkYTktODUwNS03NWUwZjdhMTRiZmVcIj57XCJpbnB1dHNcIjp7fSxcInBv
c3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImluY2lkZW50LmFkZE5vdGUodVxcXCJBcnRpZmFjdCB7
fSBzdWJtaXR0ZWQgdG8gVVJMaGF1c1xcXFxue31cXFwiLmZvcm1hdChhcnRpZmFjdC52YWx1ZSwg
cmVzdWx0cy5jb250ZW50KSlcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5wdXRzLnVy
bGhhdXNfYXJ0aWZhY3RfdmFsdWUgPSBhcnRpZmFjdC52YWx1ZVwifTwvcmVzaWxpZW50OmZ1bmN0
aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xNDFqejJ5PC9p
bmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzBmb2RhNTg8L291dGdvaW5nPjwvc2Vydmlj
ZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xNDFqejJ5XCIgc291cmNlUmVm
PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMWYyeTlhcVwi
Lz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8xb2x5cDRjXCI+PGluY29taW5nPlNlcXVlbmNlRmxv
d18wZm9kYTU4PC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5j
ZUZsb3dfMGZvZGE1OFwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzFmMnk5YXFcIiB0YXJnZXRS
ZWY9XCJFbmRFdmVudF8xb2x5cDRjXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0
aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0
QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgc291cmNl
UmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWt4
eGl5dFwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFc
Ij48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBs
YW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4
bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIz
NlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE1N1wiIHk9XCIyMjNc
Ii8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFw
ZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0
aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBc
IiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdl
IGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNl
dWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBi
cG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzFmMnk5YXFcIiBpZD1cIlNlcnZpY2VUYXNrXzFmMnk5
YXFfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiMjQw
XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxl
bWVudD1cIlNlcXVlbmNlRmxvd18xNDFqejJ5XCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMTQxanoyeV9k
aVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyNDBcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50
XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEz
XCIgd2lkdGg9XCIwXCIgeD1cIjIxOVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwv
YnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRf
MW9seXA0Y1wiIGlkPVwiRW5kRXZlbnRfMW9seXA0Y19kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0
PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjQxNVwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFi
ZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI0MzNcIiB5PVwi
MjI3XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1O
RWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wZm9kYTU4XCIgaWQ9XCJTZXF1ZW5jZUZs
b3dfMGZvZGE1OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMzQwXCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0MTVcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjM3Ny41XCIgeT1cIjE4NFwiLz48L2JwbW5k
aTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRp
OkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgInZlcnNpb24iOiAxfSwgImFjdGlvbnMiOiBb
XX0sIHsid29ya2Zsb3dfaWQiOiAzNSwgIm5hbWUiOiAiRXhhbXBsZTogVVJMaGF1cyBMb29rdXAi
LCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV91cmxoYXVzX2xvb2t1cCIsICJvYmplY3Rf
dHlwZSI6ICJhcnRpZmFjdCIsICJkZXNjcmlwdGlvbiI6ICJQZXJmb3JtIGFuIGFuYWx5c2lzIG9u
IGFydGlmYWN0IHR5cGVzOiBJUCBBZGRyZXNzLCBETlMgTmFtZSwgVVJMIGFuZCBNYWx3YXJlIEhh
c2hlcyIsICJjcmVhdG9yX2lkIjogImFAZXhhbXBsZS5jb20iLCAibGFzdF9tb2RpZmllZF9ieSI6
ICJhQGV4YW1wbGUuY29tIiwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTMxMzIyMDkyNjUsICJl
eHBvcnRfa2V5IjogImV4YW1wbGVfdXJsaGF1c19sb29rdXAiLCAidXVpZCI6ICI1MWU2MTkzYi1k
NDc1LTQ4ZjYtYTQ0YS0zOTUxOTU5MDgwNjYiLCAiY29udGVudCI6IHsid29ya2Zsb3dfaWQiOiAi
ZXhhbXBsZV91cmxoYXVzX2xvb2t1cCIsICJ4bWwiOiAiPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVu
Y29kaW5nPVwiVVRGLThcIj8+PGRlZmluaXRpb25zIHhtbG5zPVwiaHR0cDovL3d3dy5vbWcub3Jn
L3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTFwiIHhtbG5zOmJwbW5kaT1cImh0dHA6Ly93d3cub21n
Lm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvRElcIiB4bWxuczpvbWdkYz1cImh0dHA6Ly93d3cub21n
Lm9yZy9zcGVjL0RELzIwMTAwNTI0L0RDXCIgeG1sbnM6b21nZGk9XCJodHRwOi8vd3d3Lm9tZy5v
cmcvc3BlYy9ERC8yMDEwMDUyNC9ESVwiIHhtbG5zOnJlc2lsaWVudD1cImh0dHA6Ly9yZXNpbGll
bnQuaWJtLmNvbS9icG1uXCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWFcIiB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0
YW5jZVwiIHRhcmdldE5hbWVzcGFjZT1cImh0dHA6Ly93d3cuY2FtdW5kYS5vcmcvdGVzdFwiPjxw
cm9jZXNzIGlkPVwiZXhhbXBsZV91cmxoYXVzX2xvb2t1cFwiIGlzRXhlY3V0YWJsZT1cInRydWVc
IiBuYW1lPVwiRXhhbXBsZTogVVJMaGF1cyBMb29rdXBcIj48ZG9jdW1lbnRhdGlvbj5QZXJmb3Jt
IGFuIGFuYWx5c2lzIG9uIGFydGlmYWN0IHR5cGVzOiBJUCBBZGRyZXNzLCBETlMgTmFtZSwgVVJM
IGFuZCBNYWx3YXJlIEhhc2hlczwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMXRvYTVxazwvb3V0Z29pbmc+
PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzFsbjllbW1cIiBuYW1l
PVwiVVJMaGF1cyBMb29rdXBcIiByZXNpbGllbnQ6dHlwZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lv
bkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVpZD1cIjE5OTBiNjFiLTEwOWEtNGI5Ny1h
YWJiLTAxMDNmZDJlOWIxNlwiPntcImlucHV0c1wiOnt9LFwicG9zdF9wcm9jZXNzaW5nX3Njcmlw
dFwiOlwiaW5jaWRlbnQuYWRkTm90ZSh1XFxcIkFydGlmYWN0OiB7fVxcXFxue31cXFwiLmZvcm1h
dChhcnRpZmFjdC52YWx1ZSwgcmVzdWx0cy5jb250ZW50KSlcIixcInByZV9wcm9jZXNzaW5nX3Nj
cmlwdFwiOlwiaW5wdXRzLnVybGhhdXNfYXJ0aWZhY3RfdHlwZSA9IGFydGlmYWN0LnR5cGVcXG5p
bnB1dHMudXJsaGF1c19hcnRpZmFjdF92YWx1ZSA9IGFydGlmYWN0LnZhbHVlXCJ9PC9yZXNpbGll
bnQ6ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzF0
b2E1cWs8L2luY29taW5nPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMGM0MjN6czwvb3V0Z29pbmc+
PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzF0b2E1cWtcIiBz
b3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18x
bG45ZW1tXCIvPjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50XzFqdjFzbGdcIj48aW5jb21pbmc+U2Vx
dWVuY2VGbG93XzBjNDIzenM8L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1c
IlNlcXVlbmNlRmxvd18wYzQyM3pzXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMWxuOWVtbVwi
IHRhcmdldFJlZj1cIkVuZEV2ZW50XzFqdjFzbGdcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4
dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4
dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhc
IiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3Rh
dGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRp
YWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9
XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVu
dF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBN
TkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIg
eT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4
dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0
aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lh
dGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBN
TlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMWxuOWVtbVwiIGlkPVwiU2VydmljZVRh
c2tfMWxuOWVtbV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwi
IHg9XCIyNjRcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdl
IGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzF0b2E1cWtcIiBpZD1cIlNlcXVlbmNlRmxvd18x
dG9hNXFrX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBv
aW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjI2NFwiIHhzaTp0eXBlPVwib21n
ZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVp
Z2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiMjMxXCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1O
TGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJF
bmRFdmVudF8xanYxc2xnXCIgaWQ9XCJFbmRFdmVudF8xanYxc2xnX2RpXCI+PG9tZ2RjOkJvdW5k
cyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiNDM0Ljk1NTI4NDU1Mjg0NTVcIiB5PVwi
MTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0
aD1cIjBcIiB4PVwiNDUyLjk1NTI4NDU1Mjg0NTVcIiB5PVwiMjI3XCIvPjwvYnBtbmRpOkJQTU5M
YWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNl
cXVlbmNlRmxvd18wYzQyM3pzXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMGM0MjN6c19kaVwiPjxvbWdk
aTp3YXlwb2ludCB4PVwiMzY0XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+
PG9tZ2RpOndheXBvaW50IHg9XCI0MzVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIw
NlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9
XCIwXCIgeD1cIjM5OS41XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6
QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5p
dGlvbnM+IiwgInZlcnNpb24iOiA2fSwgImFjdGlvbnMiOiBbXX1dLCAicm9sZXMiOiBbXSwgIndv
cmtzcGFjZXMiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImlkIjogMjYsICJuYW1lIjogImZuX3VybGhh
dXMiLCAiZGlzcGxheV9uYW1lIjogIlVSTGhhdXMgTG9va3VwIiwgImRlc2NyaXB0aW9uIjogeyJm
b3JtYXQiOiAidGV4dCIsICJjb250ZW50IjogIlBlcmZvcm0gYSBsb29rdXAgb24gc2V2ZXJhbCBh
cnRpZmFjdHMgb2YgdHlwZXMifSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJmbl91cmxoYXVzIiwg
ImV4cG9ydF9rZXkiOiAiZm5fdXJsaGF1cyIsICJ1dWlkIjogIjE5OTBiNjFiLTEwOWEtNGI5Ny1h
YWJiLTAxMDNmZDJlOWIxNiIsICJ2ZXJzaW9uIjogMywgImNyZWF0b3IiOiB7ImlkIjogMywgInR5
cGUiOiAidXNlciIsICJuYW1lIjogImFAZXhhbXBsZS5jb20iLCAiZGlzcGxheV9uYW1lIjogImFi
bGUgYmFja2VyIn0sICJsYXN0X21vZGlmaWVkX2J5IjogeyJpZCI6IDMsICJ0eXBlIjogInVzZXIi
LCAibmFtZSI6ICJhQGV4YW1wbGUuY29tIiwgImRpc3BsYXlfbmFtZSI6ICJhYmxlIGJhY2tlciJ9
LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU1MzEyNjYwODc2NCwgInZpZXdfaXRlbXMiOiBbeyJz
dGVwX2xhYmVsIjogbnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlk
IiwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogImZmYTgyOGM4LTZkYWEt
NDc1NC04ZmJmLWFhODAyZGY1NDlkMiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9LCB7InN0
ZXBfbGFiZWwiOiBudWxsLCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQi
LCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgImNvbnRlbnQiOiAiOTE5YzZlYTAtNGUwOS00
Y2UyLTk5YjYtZmQ5MWQwYWM5NzcxIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX1dLCAid29y
a2Zsb3dzIjogW3sid29ya2Zsb3dfaWQiOiAzNSwgIm5hbWUiOiAiRXhhbXBsZTogVVJMaGF1cyBM
b29rdXAiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV91cmxoYXVzX2xvb2t1cCIsICJv
YmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJkZXNjcmlwdGlvbiI6IG51bGwsICJ1dWlkIjogbnVs
bCwgImFjdGlvbnMiOiBbXX1dfSwgeyJpZCI6IDI3LCAibmFtZSI6ICJmbl91cmxoYXVzX3N1Ym1p
c3Npb24iLCAiZGlzcGxheV9uYW1lIjogIlVSTGhhdXMgU3VibWlzc2lvbiIsICJkZXNjcmlwdGlv
biI6IHsiZm9ybWF0IjogInRleHQiLCAiY29udGVudCI6ICJTdWJtaXQgYSB1cmwgdG8gVVJMaGF1
cyBhcyBkaXN0cmlidXRpbmcgbWFsd2FyZSJ9LCAiZGVzdGluYXRpb25faGFuZGxlIjogImZuX3Vy
bGhhdXMiLCAiZXhwb3J0X2tleSI6ICJmbl91cmxoYXVzX3N1Ym1pc3Npb24iLCAidXVpZCI6ICJh
NjU5MDI4ZS1lMzllLTRkYTktODUwNS03NWUwZjdhMTRiZmUiLCAidmVyc2lvbiI6IDIsICJjcmVh
dG9yIjogeyJpZCI6IDMsICJ0eXBlIjogInVzZXIiLCAibmFtZSI6ICJhQGV4YW1wbGUuY29tIiwg
ImRpc3BsYXlfbmFtZSI6ICJhYmxlIGJhY2tlciJ9LCAibGFzdF9tb2RpZmllZF9ieSI6IHsiaWQi
OiAzLCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAiYUBleGFtcGxlLmNvbSIsICJkaXNwbGF5X25h
bWUiOiAiYWJsZSBiYWNrZXIifSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTMxMzAzNjE4MDUs
ICJ2aWV3X2l0ZW1zIjogW3sic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2lmIjogbnVsbCwgImVs
ZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAiY29udGVu
dCI6ICI5MTljNmVhMC00ZTA5LTRjZTItOTliNi1mZDkxZDBhYzk3NzEiLCAic2hvd19saW5rX2hl
YWRlciI6IGZhbHNlfV0sICJ3b3JrZmxvd3MiOiBbeyJ3b3JrZmxvd19pZCI6IDM2LCAibmFtZSI6
ICJFeGFtcGxlOiBVUkxoYXVzIFVSTCBTdWJtaXNzaW9uIiwgInByb2dyYW1tYXRpY19uYW1lIjog
ImV4YW1wbGVfdXJsaGF1c191cmxfc3VibWlzc2lvbiIsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFj
dCIsICJkZXNjcmlwdGlvbiI6IG51bGwsICJ1dWlkIjogbnVsbCwgImFjdGlvbnMiOiBbXX1dfV19
"""
    )