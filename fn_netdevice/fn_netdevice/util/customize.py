# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_netdevice"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_netdevice package"""
    reload_params = {"package": u"fn_netdevice",
                    "incident_fields": [], 
                    "action_fields": [u"config_commands", u"device_ids", u"send_command", u"use_textfsm_template"], 
                    "function_params": [u"netdevice_config_cmd", u"netdevice_ids", u"netdevice_send_cmd", u"netdevice_use_textfsm"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_netdevice"], 
                    "functions": [u"fn_netdevice"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_execute_netdevice_command"], 
                    "actions": [u"Example: Execution Netdevice Commands"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     config_commands
    #     device_ids
    #     send_command
    #     use_textfsm_template
    #   Function inputs:
    #     netdevice_config_cmd
    #     netdevice_ids
    #     netdevice_send_cmd
    #     netdevice_use_textfsm
    #   Message Destinations:
    #     fn_netdevice
    #   Functions:
    #     fn_netdevice
    #   Workflows:
    #     example_execute_netdevice_command
    #   Rules:
    #     Example: Execution Netdevice Commands


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMCwgImJ1aWxkX251bWJl
ciI6IDQyNTQsICJ2ZXJzaW9uIjogIjMxLjAuNDI1NCJ9LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9u
IjogMiwgImlkIjogMTAsICJleHBvcnRfZGF0ZSI6IDE1NjA0NTg3NzMyOTUsICJmaWVsZHMiOiBb
eyJpZCI6IDUxLCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAidGV4dCI6ICJTaW11bGF0aW9uIiwg
InByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMCwgInRvb2x0aXAiOiAiV2hldGhlciB0aGUgaW5j
aWRlbnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVndWxhciBpbmNpZGVudC4gIFRoaXMgZmllbGQg
aXMgcmVhZC1vbmx5LiIsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjog
ImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJvcGVyYXRpb25zIjogW10s
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVhZF9vbmx5IjogdHJ1ZSwg
ImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogImlu
Y2lkZW50L2luY190cmFpbmluZyIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxz
ZX0sIHsiaWQiOiAxMzMsICJuYW1lIjogImNvbmZpZ19jb21tYW5kcyIsICJ0ZXh0IjogIkNvbmZp
ZyBDb21tYW5kcyIsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJ0eXBlX2lkIjogNiwgInRvb2x0
aXAiOiAiIiwgInBsYWNlaG9sZGVyIjogIlNwZWNpZnkgbXVsdGlwbGUgY29tbWFuZHMgb25lIHBl
ciBsaW5lIHRvIGV4ZWN1dGUiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0YXJlYSIsICJoaWRlX25vdGlm
aWNhdGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2
ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1
aWQiOiAiZWM4YjE0ZDMtYzY5OS00OWIwLWI1MmUtMzZiYzAyZmYzNWNjIiwgIm9wZXJhdGlvbnMi
OiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBm
YWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5
IjogImFjdGlvbmludm9jYXRpb24vY29uZmlnX2NvbW1hbmRzIiwgInRlbXBsYXRlcyI6IFtdLCAi
ZGVwcmVjYXRlZCI6IGZhbHNlfSwgeyJpZCI6IDEzMiwgIm5hbWUiOiAic2VuZF9jb21tYW5kIiwg
InRleHQiOiAiUXVlcnkgQ29tbWFuZCIsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJ0eXBlX2lk
IjogNiwgInRvb2x0aXAiOiAiIiwgInBsYWNlaG9sZGVyIjogIkNvbW1hbmQgZm9yIHJlbW90ZSBk
ZXZpY2UocykgZXhlY3V0aW9uIiwgImlucHV0X3R5cGUiOiAidGV4dCIsICJoaWRlX25vdGlmaWNh
dGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIi
OiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQi
OiAiY2UxMjE1NDEtMzI1NC00ZmRkLWI2MTAtMTcwMzY5NzE0NDkwIiwgIm9wZXJhdGlvbnMiOiBb
XSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxz
ZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5Ijog
ImFjdGlvbmludm9jYXRpb24vc2VuZF9jb21tYW5kIiwgInRlbXBsYXRlcyI6IFtdLCAiZGVwcmVj
YXRlZCI6IGZhbHNlfSwgeyJpZCI6IDEzNCwgIm5hbWUiOiAiZGV2aWNlX2lkcyIsICJ0ZXh0Ijog
IkRldmljZSBJRHMiLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAidHlwZV9pZCI6IDYsICJ0b29s
dGlwIjogIiIsICJwbGFjZWhvbGRlciI6ICJEZXZpY2VzIHNlcGFyYXRlZCBieSBjb21tYXMiLCAi
aW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInJlcXVpcmVkIjogImFsd2F5cyIsICJoaWRlX25vdGlmaWNh
dGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIi
OiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQi
OiAiYzk1MmE2NTQtYjIzOC00MGJhLTkzZDMtMTZjM2ExMjQ5MThlIiwgIm9wZXJhdGlvbnMiOiBb
XSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxz
ZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5Ijog
ImFjdGlvbmludm9jYXRpb24vZGV2aWNlX2lkcyIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0
ZWQiOiBmYWxzZX0sIHsiaWQiOiAxMzYsICJuYW1lIjogInVzZV90ZXh0ZnNtX3RlbXBsYXRlIiwg
InRleHQiOiAiVXNlIFRleHRGU00gVGVtcGxhdGUiLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAi
dHlwZV9pZCI6IDYsICJ0b29sdGlwIjogIlJldHVybiBDU1YgcmVzdWx0cyBiYXNlZCBvbiBhIHRl
eHRGU00gdGVtcGxhdGUiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAiYm9vbGVh
biIsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNo
b3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19v
cHRpb24iOiB0cnVlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiNWUyOGU1MTYtN2ZmZC00
OWMyLThmYzUtMjUwOWU1MDJhZjhjIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJt
cyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0
cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogImFjdGlvbmludm9jYXRpb24v
dXNlX3RleHRmc21fdGVtcGxhdGUiLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFs
c2V9LCB7ImlkIjogMTMxLCAibmFtZSI6ICJuZXRkZXZpY2VfaWRzIiwgInRleHQiOiAibmV0ZGV2
aWNlX2lkcyIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRpcCI6ICJTcGVj
aWZ5IGRldmljZSBuYW1lcyB3aXRoIGNvbW1hcyIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRf
dHlwZSI6ICJ0ZXh0IiwgInJlcXVpcmVkIjogImFsd2F5cyIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxz
ZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiZWU0
YzIxNzctZjExYS00NDEyLWJmYzktYWNmZjVjY2VmNjMzIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNo
YW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVu
Y3Rpb24vbmV0ZGV2aWNlX2lkcyIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxz
ZX0sIHsiaWQiOiAxMzAsICJuYW1lIjogIm5ldGRldmljZV9jb25maWdfY21kIiwgInRleHQiOiAi
bmV0ZGV2aWNlX2NvbmZpZ19jbWQiLCAicHJlZml4IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRv
b2x0aXAiOiAic2VwYXJhdGUgbXVsdGktbGluZSBpbnB1dCB3aXRoIGNvbW1hcyIsICJwbGFjZWhv
bGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFs
c2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAi
Ymxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICIyYmU3YTQ0
Mi1jMGVkLTQwODAtYTg0YS1mMTZmZWJiMzY1ZDMiLCAib3BlcmF0aW9ucyI6IFtdLCAib3BlcmF0
aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZhbHNlLCAiY2hhbmdl
YWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlv
bi9uZXRkZXZpY2VfY29uZmlnX2NtZCIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBm
YWxzZX0sIHsiaWQiOiAxMzUsICJuYW1lIjogIm5ldGRldmljZV91c2VfdGV4dGZzbSIsICJ0ZXh0
IjogIm5ldGRldmljZV91c2VfdGV4dGZzbSIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDEx
LCAidG9vbHRpcCI6ICJSZXR1cm4gcmVzdWx0cyBiYXNlZCBvbiBhIHRleHRGU00gdGVtcGxhdGUg
IiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAicmVxdWlyZWQi
OiAiYWx3YXlzIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwg
ImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogdHJ1ZSwg
ImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogIjc0N2Y4MzlmLTczNTMtNDk0NC1hMDRjLWIzMjNi
YzEzYzcxNyIsICJvcGVyYXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVl
cyI6IFtdLCAicmVhZF9vbmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL25ldGRldmljZV91c2VfdGV4dGZz
bSIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxzZX0sIHsiaWQiOiAxMjksICJu
YW1lIjogIm5ldGRldmljZV9zZW5kX2NtZCIsICJ0ZXh0IjogIm5ldGRldmljZV9zZW5kX2NtZCIs
ICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRpcCI6ICJTcGVjaWZ5IGEgY29t
bWFuZCB0byBleGVjdXRlIG9uIHJlbW90ZSBkZXZpY2UiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlu
cHV0X3R5cGUiOiAidGV4dCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiY2hvc2VuIjog
ZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6
IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiYzMzNTZiYzEtMzUyMy00MTliLTll
ZDYtMDMyZGU2MzUwMTIxIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9
LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAi
cmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vbmV0ZGV2aWNlX3Nl
bmRfY21kIiwgInRlbXBsYXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZhbHNlfV0sICJpbmNpZGVu
dF90eXBlcyI6IFt7InVwZGF0ZV9kYXRlIjogMTU2MDQ1ODc3Mzg4MiwgImNyZWF0ZV9kYXRlIjog
MTU2MDQ1ODc3Mzg4MiwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0
YWEwIiwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIs
ICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJuYW1l
IjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJlbmFibGVkIjogZmFsc2Us
ICJzeXN0ZW0iOiBmYWxzZSwgInBhcmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZSwgImlk
IjogMH1dLCAicGhhc2VzIjogW10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgIm92ZXJyaWRlcyI6
IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJuYW1lIjogImZuX25ldGRldmljZSIsICJw
cm9ncmFtbWF0aWNfbmFtZSI6ICJmbl9uZXRkZXZpY2UiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAs
ICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJhQGV4YW1wbGUuY29tIl0sICJ1dWlkIjog
ImQ3ZWZmMmNlLTQwYTEtNGQxNy04YTMxLTIyYWMyMjJkOWY0ZSIsICJleHBvcnRfa2V5IjogImZu
X25ldGRldmljZSJ9XSwgImFjdGlvbnMiOiBbeyJpZCI6IDIwLCAibmFtZSI6ICJFeGFtcGxlOiBF
eGVjdXRpb24gTmV0ZGV2aWNlIENvbW1hbmRzIiwgInR5cGUiOiAxLCAib2JqZWN0X3R5cGUiOiAi
aW5jaWRlbnQiLCAiY29uZGl0aW9ucyI6IFtdLCAiYXV0b21hdGlvbnMiOiBbXSwgIm1lc3NhZ2Vf
ZGVzdGluYXRpb25zIjogW10sICJ3b3JrZmxvd3MiOiBbImV4YW1wbGVfZXhlY3V0ZV9uZXRkZXZp
Y2VfY29tbWFuZCJdLCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19p
ZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJhY3Rpb25p
bnZvY2F0aW9uIiwgImNvbnRlbnQiOiAiYzk1MmE2NTQtYjIzOC00MGJhLTkzZDMtMTZjM2ExMjQ5
MThlIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJz
aG93X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogImFj
dGlvbmludm9jYXRpb24iLCAiY29udGVudCI6ICJjZTEyMTU0MS0zMjU0LTRmZGQtYjYxMC0xNzAz
Njk3MTQ0OTAiLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xhYmVsIjogbnVs
bCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUi
OiAiYWN0aW9uaW52b2NhdGlvbiIsICJjb250ZW50IjogImVjOGIxNGQzLWM2OTktNDliMC1iNTJl
LTM2YmMwMmZmMzVjYyIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9LCB7InN0ZXBfbGFiZWwi
OiBudWxsLCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRf
dHlwZSI6ICJhY3Rpb25pbnZvY2F0aW9uIiwgImNvbnRlbnQiOiAiNWUyOGU1MTYtN2ZmZC00OWMy
LThmYzUtMjUwOWU1MDJhZjhjIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX1dLCAidGltZW91
dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImM0NzVlN2ZkLTVmOGQtNGE4OS1iZTA0LTk5NDg5
NGEzYjhkMCIsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IEV4ZWN1dGlvbiBOZXRkZXZpY2UgQ29t
bWFuZHMiLCAibG9naWNfdHlwZSI6ICJhbGwifV0sICJsYXlvdXRzIjogW10sICJub3RpZmljYXRp
b25zIjogbnVsbCwgInRpbWVmcmFtZXMiOiBudWxsLCAibG9jYWxlIjogbnVsbCwgImluZHVzdHJp
ZXMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJnZW9zIjogbnVsbCwgInRhc2tfb3JkZXIi
OiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAidHlwZXMiOiBbXSwgInNjcmlwdHMiOiBbXSwgImlu
Y2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ3b3JrZmxvd19pZCI6
IDEsICJuYW1lIjogIkV4YW1wbGU6IEV4ZWN1dGUgTmV0ZGV2aWNlIENvbW1hbmRzIiwgInByb2dy
YW1tYXRpY19uYW1lIjogImV4YW1wbGVfZXhlY3V0ZV9uZXRkZXZpY2VfY29tbWFuZCIsICJvYmpl
Y3RfdHlwZSI6ICJpbmNpZGVudCIsICJkZXNjcmlwdGlvbiI6ICJQZXJmb3JtIGFuIG9wZXJhdGlv
biBvciBhIHNlcmllcyBvZiBvcGVyYXRpb25zIGFnYWluc3QgYSBmaXJld2FsbCBkZXZpY2UiLCAi
Y3JlYXRvcl9pZCI6ICJhQGV4YW1wbGUuY29tIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAiYUBleGFt
cGxlLmNvbSIsICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTYwNDM1NTU1NzQ2LCAiZXhwb3J0X2tl
eSI6ICJleGFtcGxlX2V4ZWN1dGVfbmV0ZGV2aWNlX2NvbW1hbmQiLCAidXVpZCI6ICJiNTRjNWM5
Yi1kNzA4LTQ4ODMtYTJkZS0wYWM3ZDM1NWMwMGMiLCAiY29udGVudCI6IHsid29ya2Zsb3dfaWQi
OiAiZXhhbXBsZV9leGVjdXRlX25ldGRldmljZV9jb21tYW5kIiwgInhtbCI6ICI8P3htbCB2ZXJz
aW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwi
aHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwi
aHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0
dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwi
aHR0cDovL3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEv
WE1MU2NoZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRh
Lm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9XCJleGFtcGxlX2V4ZWN1dGVfbmV0ZGV2aWNlX2NvbW1h
bmRcIiBpc0V4ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IEV4ZWN1dGUgTmV0ZGV2
aWNlIENvbW1hbmRzXCI+PGRvY3VtZW50YXRpb24+UGVyZm9ybSBhbiBvcGVyYXRpb24gb3IgYSBz
ZXJpZXMgb2Ygb3BlcmF0aW9ucyBhZ2FpbnN0IGEgZmlyZXdhbGwgZGV2aWNlPC9kb2N1bWVudGF0
aW9uPjxzdGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVl
bmNlRmxvd18waGZsbDVsPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwi
U2VydmljZVRhc2tfMHVsMmc3OFwiIG5hbWU9XCJmbl9uZXRkZXZpY2VcIiByZXNpbGllbnQ6dHlw
ZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVp
ZD1cImUxY2M1MDQ5LThjMjItNDhlOC1hMmNmLTMwODZmYWU2MGZiNFwiPntcImlucHV0c1wiOntc
Ijc0N2Y4MzlmLTczNTMtNDk0NC1hMDRjLWIzMjNiYzEzYzcxN1wiOntcImlucHV0X3R5cGVcIjpc
InN0YXRpY1wiLFwic3RhdGljX2lucHV0XCI6e1wiYm9vbGVhbl92YWx1ZVwiOnRydWUsXCJtdWx0
aXNlbGVjdF92YWx1ZVwiOltdfX19LFwicG9zdF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwibm90ZSA9
IHVcXFwiXFxcIlxcbmZvciBob3N0IGluIHJlc3VsdHNbJ2NvbnRlbnQnXTpcXG4gIG5vdGUgPSBu
b3RlICsgdVxcXCJIb3N0OiB7fVxcXFxuXFxcIi5mb3JtYXQoaG9zdClcXG4gIG5vdGUgPSBub3Rl
ICsgdVxcXCJDbWQ6IHt9XFxcXG5SZXN1bHQ6IHt9XFxcXG5cXFwiLmZvcm1hdChyZXN1bHRzWydj
b250ZW50J11baG9zdF1bJ3NlbmRfY29tbWFuZCddLCByZXN1bHRzWydjb250ZW50J11baG9zdF1b
J3NlbmRfcmVzdWx0J10pXFxuICBub3RlID0gbm90ZSArIHVcXFwiQ29uZmlnIENtZDoge31cXFxc
blJlc3VsdDoge31cXFxcblxcXCIuZm9ybWF0KHJlc3VsdHNbJ2NvbnRlbnQnXVtob3N0XVsnY29u
ZmlnX2NvbW1hbmQnXSwgcmVzdWx0c1snY29udGVudCddW2hvc3RdWydjb25maWdfcmVzdWx0J10p
XFxuICBcXG4gIGlmIHJlc3VsdHNbJ2NvbnRlbnQnXVtob3N0XVsnc3RhdHVzJ10gPT0gJ2ZhaWx1
cmUnOlxcbiAgICBub3RlID0gbm90ZSArIHVcXFwiRmFpbHVyZToge31cXFxcblxcXCIuZm9ybWF0
KHJlc3VsdHNbJ2NvbnRlbnQnXVtob3N0XVsncmVhc29uJ10pXFxuICAgIFxcbm5vdGVfdGV4dCA9
IGhlbHBlci5jcmVhdGVQbGFpblRleHQobm90ZSlcXG5pbmNpZGVudC5hZGROb3RlKG5vdGVfdGV4
dClcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5wdXRzLm5ldGRldmljZV9jb25maWdf
Y21kID0gcnVsZS5wcm9wZXJ0aWVzLmNvbmZpZ19jb21tYW5kcy5jb250ZW50XFxuaW5wdXRzLm5l
dGRldmljZV9pZHMgPSBydWxlLnByb3BlcnRpZXMuZGV2aWNlX2lkc1xcbmlucHV0cy5uZXRkZXZp
Y2Vfc2VuZF9jbWQgPSBydWxlLnByb3BlcnRpZXMuc2VuZF9jb21tYW5kXFxuaW5wdXRzLm5ldGRl
dmljZV91c2VfdGV4dGZzbSA9IHJ1bGUucHJvcGVydGllcy51c2VfdGV4dGZzbV90ZW1wbGF0ZVwi
fTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVl
bmNlRmxvd18waGZsbDVsPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzBtbWpvNXI8
L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18w
aGZsbDVsXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2Vy
dmljZVRhc2tfMHVsMmc3OFwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8wdHU1dXZqXCI+PGlu
Y29taW5nPlNlcXVlbmNlRmxvd18wbW1qbzVyPC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5j
ZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMG1tam81clwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNr
XzB1bDJnNzhcIiB0YXJnZXRSZWY9XCJFbmRFdmVudF8wdHU1dXZqXCIvPjx0ZXh0QW5ub3RhdGlv
biBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93
IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlv
bl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwi
VGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3Rh
dGlvbl8wbmg5Nm55XCI+PHRleHQ+R2VuZXJhdGUgYSBub3RlIHdpdGggdGhlIHJlc3VsdHMgZnJv
bSB0aGUgcmVtb3ZlIGRldmljZSBvcGVyYXRpb25zPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFz
c29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMDRwZWFqOVwiIHNvdXJjZVJlZj1cIlNlcnZpY2VU
YXNrXzB1bDJnNzhcIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8wbmg5Nm55XCIvPjx0ZXh0
QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFtYTZrYjVcIj48dGV4dD5Vc2UgYWN0aXZp
dHkgZmllbGRzIGZyb20gdGhlIHJ1bGUgYXMgaW5wdXQ8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48
YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xNGFmZWZpXCIgc291cmNlUmVmPVwiU2Vydmlj
ZVRhc2tfMHVsMmc3OFwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFtYTZrYjVcIi8+PC9w
cm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpC
UE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJw
bW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0
YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1c
IjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5k
cyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRp
OkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1l
bnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0
X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIg
eT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVu
dD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48
b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIw
XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9
XCJTZXJ2aWNlVGFza18wdWwyZzc4XCIgaWQ9XCJTZXJ2aWNlVGFza18wdWwyZzc4X2RpXCI+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjI1OVwiIHk9XCIxNjZc
Ii8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1
ZW5jZUZsb3dfMGhmbGw1bFwiIGlkPVwiU2VxdWVuY2VGbG93XzBoZmxsNWxfZGlcIj48b21nZGk6
d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxv
bWdkaTp3YXlwb2ludCB4PVwiMjU5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZc
Ii8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwi
MFwiIHg9XCIyMjguNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQ
TU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMHR1NXV2alwi
IGlkPVwiRW5kRXZlbnRfMHR1NXV2al9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3
aWR0aD1cIjM2XCIgeD1cIjQyMlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI0NDBcIiB5PVwiMjI3XCIvPjwv
YnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1u
RWxlbWVudD1cIlNlcXVlbmNlRmxvd18wbW1qbzVyXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMG1tam81
cl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMzU5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0MjJcIiB4c2k6dHlwZT1cIm9tZ2RjOlBv
aW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjEzXCIgd2lkdGg9XCIwXCIgeD1cIjM5MC41XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFi
ZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0
QW5ub3RhdGlvbl8wbmg5Nm55XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8wbmg5Nm55X2RpXCI+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCI2OVwiIHdpZHRoPVwiMjE3XCIgeD1cIjM1M1wiIHk9XCI2N1wi
Lz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29j
aWF0aW9uXzA0cGVhajlcIiBpZD1cIkFzc29jaWF0aW9uXzA0cGVhajlfZGlcIj48b21nZGk6d2F5
cG9pbnQgeD1cIjM1N1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTc0XCIvPjxvbWdk
aTp3YXlwb2ludCB4PVwiNDEyXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxMzZcIi8+
PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5u
b3RhdGlvbl8xbWE2a2I1XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xbWE2a2I1X2RpXCI+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCI1N1wiIHdpZHRoPVwiMTU2XCIgeD1cIjEzMFwiIHk9XCI3M1wiLz48
L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0
aW9uXzE0YWZlZmlcIiBpZD1cIkFzc29jaWF0aW9uXzE0YWZlZmlfZGlcIj48b21nZGk6d2F5cG9p
bnQgeD1cIjI3MFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTY2XCIvPjxvbWdkaTp3
YXlwb2ludCB4PVwiMjM1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxMzBcIi8+PC9i
cG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwv
ZGVmaW5pdGlvbnM+IiwgInZlcnNpb24iOiAyMX0sICJhY3Rpb25zIjogW119XSwgInJvbGVzIjog
W10sICJ3b3Jrc3BhY2VzIjogW10sICJmdW5jdGlvbnMiOiBbeyJpZCI6IDEsICJuYW1lIjogImZu
X25ldGRldmljZSIsICJkaXNwbGF5X25hbWUiOiAiZm5fbmV0ZGV2aWNlIiwgImRlc2NyaXB0aW9u
IjogeyJmb3JtYXQiOiAidGV4dCIsICJjb250ZW50IjogIlVzZSBOZXRtaWtvIHRvIGF0dGFjaCB0
byBkZXZpY2VzIChzdWNoIGFzIGZpcmV3YWxscykgZm9yIGNvbW1hbmQgbGluZSBjb25maWd1cmF0
aW9uIn0sICJkZXN0aW5hdGlvbl9oYW5kbGUiOiAiZm5fbmV0ZGV2aWNlIiwgImV4cG9ydF9rZXki
OiAiZm5fbmV0ZGV2aWNlIiwgInV1aWQiOiAiZTFjYzUwNDktOGMyMi00OGU4LWEyY2YtMzA4NmZh
ZTYwZmI0IiwgInZlcnNpb24iOiAzLCAiY3JlYXRvciI6IHsiaWQiOiAzLCAidHlwZSI6ICJ1c2Vy
IiwgIm5hbWUiOiAiYUBleGFtcGxlLmNvbSIsICJkaXNwbGF5X25hbWUiOiAiYWJsZSBiYWtlciJ9
LCAibGFzdF9tb2RpZmllZF9ieSI6IHsiaWQiOiAzLCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAi
YUBleGFtcGxlLmNvbSIsICJkaXNwbGF5X25hbWUiOiAiYWJsZSBiYWtlciJ9LCAibGFzdF9tb2Rp
ZmllZF90aW1lIjogMTU2MDQzNTQzOTYyOCwgInZpZXdfaXRlbXMiOiBbeyJzdGVwX2xhYmVsIjog
bnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5
cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogImMzMzU2YmMxLTM1MjMtNDE5Yi05ZWQ2LTAz
MmRlNjM1MDEyMSIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9LCB7InN0ZXBfbGFiZWwiOiBu
dWxsLCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlw
ZSI6ICJfX2Z1bmN0aW9uIiwgImNvbnRlbnQiOiAiMmJlN2E0NDItYzBlZC00MDgwLWE4NGEtZjE2
ZmViYjM2NWQzIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51
bGwsICJzaG93X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBl
IjogIl9fZnVuY3Rpb24iLCAiY29udGVudCI6ICJlZTRjMjE3Ny1mMTFhLTQ0MTItYmZjOS1hY2Zm
NWNjZWY2MzMiLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xhYmVsIjogbnVs
bCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUi
OiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogIjc0N2Y4MzlmLTczNTMtNDk0NC1hMDRjLWIzMjNi
YzEzYzcxNyIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XSwgIndvcmtmbG93cyI6IFt7Indv
cmtmbG93X2lkIjogMSwgIm5hbWUiOiAiRXhhbXBsZTogRXhlY3V0ZSBOZXRkZXZpY2UgQ29tbWFu
ZHMiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9leGVjdXRlX25ldGRldmljZV9jb21t
YW5kIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImRlc2NyaXB0aW9uIjogbnVsbCwgInV1
aWQiOiBudWxsLCAiYWN0aW9ucyI6IFtdfV19XX0=
"""
    )