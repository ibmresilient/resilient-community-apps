# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_useragentanalysis"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_useragentanalysis package"""
    reload_params = {"package": u"fn_useragentanalysis",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"user_agent_string"], 
                    "datatables": [], 
                    "message_destinations": [u"useragentanalysis_fn"], 
                    "functions": [u"fn_useragentanalysis"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"user_agent_workflow"], 
                    "actions": [u"Example: User Agent Analysis"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     user_agent_string
    #   Message Destinations:
    #     useragentanalysis_fn
    #   Functions:
    #     fn_useragentanalysis
    #   Workflows:
    #     user_agent_workflow
    #   Rules:
    #     Example: User Agent Analysis


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogImYxYmVjYmZkLWJhMjUt
NGIzZC1iYTY5LWFlNDk4NTQ5NTkzYiIsICJkZXNjcmlwdGlvbiI6ICIiLCAib2JqZWN0X3R5cGUi
OiAiYXJ0aWZhY3QiLCAiZXhwb3J0X2tleSI6ICJ1c2VyX2FnZW50X3dvcmtmbG93IiwgIndvcmtm
bG93X2lkIjogMjQsICJsYXN0X21vZGlmaWVkX2J5IjogImFAZXhhbXBsZS5jb20iLCAiY29udGVu
dCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/Pjxk
ZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQv
TU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAw
NTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUy
NC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQv
RElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHht
bG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwi
aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3Bh
Y2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cInVzZXJfYWdl
bnRfd29ya2Zsb3dcIiBpc0V4ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IFVzZXIg
QWdlbnQgV29ya2Zsb3dcIj48ZG9jdW1lbnRhdGlvbi8+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2
ZW50XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB6c21xY3M8L291dGdvaW5nPjwv
c3RhcnRFdmVudD48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8wdGliOHR4XCI+PGluY29taW5nPlNl
cXVlbmNlRmxvd18wNnVtaThhPC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1c
IlNlcnZpY2VUYXNrXzFqZzBsbHVcIiBuYW1lPVwiVXNlciBBZ2VudCBBbmFseXNpc1wiIHJlc2ls
aWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5j
dGlvbiB1dWlkPVwiZTM2M2ZiNTktOTRjMC00MGUzLThlODctMWVkNjNhNGM4MTJlXCI+e1wiaW5w
dXRzXCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJ1c2VyX2FnZW50X2FuYWx5c2lz
ID0gc3RyKHJlc3VsdHMudXNlcl9hZ2VudF9hbmFseXNpcylcXG5pbmNpZGVudC5hZGROb3RlKHVz
ZXJfYWdlbnRfYW5hbHlzaXMpXFxuXFxuIyBUT0RPIGFkZCBleGFtcGxlIHBheWxvYWRcXG4jeyd1
c2VyX2FnZW50X3N0cmluZyc6ICdcXFwiTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFj
IE9TIFggMTBfOV81KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJv
bWUvNjQuMC4zMjgyLjE0MCBTYWZhcmkvNTM3LjM2XFxcIicsICdzb3VyY2VfYXBpX3VybCc6ICdo
dHRwczovL2FwaS53aGF0aXNteWJyb3dzZXIuY29tL2FwaS92Mi91c2VyX2FnZW50X3BhcnNlJywg
J3VzZXJfYWdlbnRfYW5hbHlzaXMnOiAne1xcXCJwYXJzZVxcXCI6IHtcXFwidXNlcl9hZ2VudFxc
XCI6IFxcXCJcXFxcXFxcXFxcXCJNb3ppbGxhLzUuMCAoTWFjaW50b3NoOyBJbnRlbCBNYWMgT1Mg
WCAxMF85XzUpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82
NC4wLjMyODIuMTQwIFNhZmFyaS81MzcuMzZcXFxcXFxcXFxcXCJcXFwiLCBcXFwic29mdHdhcmVf
bmFtZVxcXCI6IFxcXCJDaHJvbWVcXFwiLCBcXFwib3BlcmF0aW5nX3N5c3RlbVxcXCI6IFxcXCJN
YWMgT1MgWCAoTWF2ZXJpY2tzKVxcXCIsIFxcXCJzb2Z0d2FyZV92ZXJzaW9uXFxcIjogXFxcIjY0
XFxcIiwgXFxcIm9wZXJhdGluZ19zeXN0ZW1fbmFtZVxcXCI6IFxcXCJNYWMgT1MgWFxcXCIsIFxc
XCJvcGVyYXRpbmdfc3lzdGVtX3ZlcnNpb25fZnVsbFxcXCI6IFtcXFwiMTBcXFwiLCBcXFwiOVxc
XCIsIFxcXCI1XFxcIl0sIFxcXCJzb2Z0d2FyZV9uYW1lX2NvZGVcXFwiOiBcXFwiY2hyb21lXFxc
IiwgXFxcInNpbXBsZV9vcGVyYXRpbmdfcGxhdGZvcm1fc3RyaW5nXFxcIjogbnVsbCwgXFxcIm9w
ZXJhdGluZ19zeXN0ZW1fdmVyc2lvblxcXCI6IFxcXCJNYXZlcmlja3NcXFwiLCBcXFwic2ltcGxl
X3N1Yl9kZXNjcmlwdGlvbl9zdHJpbmdcXFwiOiBudWxsLCBcXFwiaXNfYWJ1c2l2ZVxcXCI6IGZh
bHNlLCBcXFwib3BlcmF0aW5nX3N5c3RlbV9mbGF2b3VyX2NvZGVcXFwiOiBudWxsLCBcXFwic29m
dHdhcmVfdmVyc2lvbl9mdWxsXFxcIjogW1xcXCI2NFxcXCIsIFxcXCIwXFxcIiwgXFxcIjMyODJc
XFwiLCBcXFwiMTQwXFxcIl0sIFxcXCJzaW1wbGVfc29mdHdhcmVfc3RyaW5nXFxcIjogXFxcIkNo
cm9tZSA2NCBvbiBNYWMgT1MgWCAoTWF2ZXJpY2tzKVxcXCIsIFxcXCJvcGVyYXRpbmdfc3lzdGVt
X2ZsYXZvdXJcXFwiOiBudWxsLCBcXFwib3BlcmF0aW5nX3N5c3RlbV9uYW1lX2NvZGVcXFwiOiBc
XFwibWFjLW9zLXhcXFwiLCBcXFwic29mdHdhcmVcXFwiOiBcXFwiQ2hyb21lIDY0XFxcIn0sIFxc
XCJyZXN1bHRcXFwiOiB7XFxcIm1lc3NhZ2VcXFwiOiBcXFwiVGhlIHVzZXIgYWdlbnQgd2FzIHBh
cnNlZCBzdWNjZXNzZnVsbHkuXFxcIiwgXFxcImNvZGVcXFwiOiBcXFwic3VjY2Vzc1xcXCIsIFxc
XCJtZXNzYWdlX2NvZGVcXFwiOiBcXFwidXNlcl9hZ2VudF9wYXJzZWRcXFwifX0nfVxcblxcblwi
LFwicHJlX3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpbnB1dHMudXNlcl9hZ2VudF9zdHJpbmcgPSBh
cnRpZmFjdC52YWx1ZVwiLFwicmVzdWx0X25hbWVcIjpcIlwifTwvcmVzaWxpZW50OmZ1bmN0aW9u
PjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18wenNtcWNzPC9pbmNv
bWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzA2dW1pOGE8L291dGdvaW5nPjwvc2VydmljZVRh
c2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18wenNtcWNzXCIgc291cmNlUmVmPVwi
U3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMWpnMGxsdVwiLz48
c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzA2dW1pOGFcIiBzb3VyY2VSZWY9XCJTZXJ2
aWNlVGFza18xamcwbGx1XCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRfMHRpYjh0eFwiLz48dGV4dEFu
bm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3
b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNz
b2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdl
dFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4
dEFubm90YXRpb25fMGZmaTYweFwiPjx0ZXh0Pk91dHB1dCBjcmVhdGVzIGEgTm90ZTwvdGV4dD48
L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzB3OW5kamZcIiBz
b3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xamcwbGx1XCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRp
b25fMGZmaTYweFwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFn
cmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwi
QlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRf
MTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWln
aHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTY5XCIgeT1cIjE3NVwiLz48YnBtbmRpOkJQTU5M
YWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE2NFwiIHk9
XCIyMTBcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQ
TU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRB
bm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9
XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQ
TU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRp
b25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTc2XCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIyMDdcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5T
aGFwZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50XzB0aWI4dHhcIiBpZD1cIkVuZEV2ZW50XzB0aWI4
dHhfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI2MjBc
IiB5PVwiMTc1XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNc
IiB3aWR0aD1cIjBcIiB4PVwiNjM4XCIgeT1cIjIxNFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9i
cG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRh
c2tfMWpnMGxsdVwiIGlkPVwiU2VydmljZVRhc2tfMWpnMGxsdV9kaVwiPjxvbWdkYzpCb3VuZHMg
aGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIzMzdcIiB5PVwiMTUzXCIvPjwvYnBtbmRp
OkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzB6
c21xY3NcIiBpZD1cIlNlcXVlbmNlRmxvd18wenNtcWNzX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9
XCIyMDVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE5M1wiLz48b21nZGk6d2F5cG9p
bnQgeD1cIjI2OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTkzXCIvPjxvbWdkaTp3
YXlwb2ludCB4PVwiMjY4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxOTNcIi8+PG9t
Z2RpOndheXBvaW50IHg9XCIzMzdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE5M1wi
Lz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCI5
MFwiIHg9XCIyMzhcIiB5PVwiMTg2LjVcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQ
TU5FZGdlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMDZ1bWk4
YVwiIGlkPVwiU2VxdWVuY2VGbG93XzA2dW1pOGFfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQz
N1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTkzXCIvPjxvbWdkaTp3YXlwb2ludCB4
PVwiNjIwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxOTNcIi8+PGJwbW5kaTpCUE1O
TGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI1MjguNVwi
IHk9XCIxNzFcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6
QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMGZmaTYweFwiIGlkPVwiVGV4
dEFubm90YXRpb25fMGZmaTYweF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNDJcIiB3aWR0
aD1cIjEzMlwiIHg9XCIzOTVcIiB5PVwiNTJcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8wdzluZGpmXCIgaWQ9XCJBc3NvY2lh
dGlvbl8wdzluZGpmX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0MTJcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjE1M1wiLz48b21nZGk6d2F5cG9pbnQgeD1cIjQ0OFwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiOTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBN
TlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93X2lk
IjogInVzZXJfYWdlbnRfd29ya2Zsb3ciLCAidmVyc2lvbiI6IDR9LCAibGFzdF9tb2RpZmllZF90
aW1lIjogMTU1MjA2NDMwNDI4OCwgImNyZWF0b3JfaWQiOiAiYUBleGFtcGxlLmNvbSIsICJhY3Rp
b25zIjogW10sICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJ1c2VyX2FnZW50X3dvcmtmbG93IiwgIm5h
bWUiOiAiRXhhbXBsZTogVXNlciBBZ2VudCBXb3JrZmxvdyJ9XSwgImFjdGlvbnMiOiBbeyJsb2dp
Y190eXBlIjogImFsbCIsICJuYW1lIjogIkV4YW1wbGU6IFVzZXIgQWdlbnQgQW5hbHlzaXMiLCAi
dmlld19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3b3JrZmxvd3MiOiBbInVzZXJfYWdlbnRfd29y
a2Zsb3ciXSwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgInRpbWVvdXRfc2Vjb25kcyI6IDg2
NDAwLCAidXVpZCI6ICJiYTc4NjRiMC1kMGM5LTQ1NmEtOGQ1OS1mN2MxNjZjODg5OTEiLCAiYXV0
b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogVXNlciBBZ2VudCBBbmFseXNp
cyIsICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwg
ImZpZWxkX25hbWUiOiAiYXJ0aWZhY3QudHlwZSIsICJtZXRob2QiOiAiaW4iLCAidmFsdWUiOiBb
IlN0cmluZyIsICJIVFRQIFJlcXVlc3QgSGVhZGVyIiwgIlVzZXIgQWdlbnQiXX1dLCAiaWQiOiAz
NiwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW119XSwgImxheW91dHMiOiBbXSwgImV4cG9ydF9m
b3JtYXRfdmVyc2lvbiI6IDIsICJpZCI6IDQsICJpbmR1c3RyaWVzIjogbnVsbCwgInBoYXNlcyI6
IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJnZW9zIjogbnVsbCwgImxvY2FsZSI6IG51bGwsICJz
ZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgInZlcnNpb24iOiAiMzEuMC40MjU0IiwgImJ1
aWxkX251bWJlciI6IDQyNTQsICJtaW5vciI6IDB9LCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jr
c3BhY2VzIjogW10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImRpc3Bs
YXlfbmFtZSI6ICJVc2VyIEFnZW50IEFuYWx5c2lzIiwgImRlc2NyaXB0aW9uIjogeyJjb250ZW50
IjogImZ1bmN0aW9uIHRvIHBhcnNlIGFuZCB0byBwcm92aWRlIGFuYWx5c2lzIG9uIHVzZXIgYWdl
bnQgc3RyaW5ncyIsICJmb3JtYXQiOiAidGV4dCJ9LCAiY3JlYXRvciI6IHsiZGlzcGxheV9uYW1l
IjogImFibGUgYmFja2VyIiwgInR5cGUiOiAidXNlciIsICJpZCI6IDMsICJuYW1lIjogImFAZXhh
bXBsZS5jb20ifSwgInZpZXdfaXRlbXMiOiBbeyJzaG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUi
OiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZp
ZWxkX3V1aWQiLCAiY29udGVudCI6ICJjYjQyYTZiYS1iNmQ0LTRlZWQtODM4Zi01YzhiNjBiYjZi
MzMiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAiZm5fdXNlcmFnZW50YW5h
bHlzaXMiLCAidXVpZCI6ICJlMzYzZmI1OS05NGMwLTQwZTMtOGU4Ny0xZWQ2M2E0YzgxMmUiLCAi
bGFzdF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogImFibGUgYmFja2VyIiwgInR5cGUi
OiAidXNlciIsICJpZCI6IDMsICJuYW1lIjogImFAZXhhbXBsZS5jb20ifSwgInZlcnNpb24iOiAy
LCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiBudWxsLCAib2JqZWN0X3R5cGUiOiAiYXJ0
aWZhY3QiLCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlOiBVc2VyIEFnZW50IFdvcmtm
bG93IiwgIndvcmtmbG93X2lkIjogMjQsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJ1c2VyX2FnZW50
X3dvcmtmbG93IiwgInV1aWQiOiBudWxsfV0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTUyMDcw
MjE1MjA3LCAiZGVzdGluYXRpb25faGFuZGxlIjogInVzZXJhZ2VudGFuYWx5c2lzX2ZuIiwgImlk
IjogMTYsICJuYW1lIjogImZuX3VzZXJhZ2VudGFuYWx5c2lzIn1dLCAibm90aWZpY2F0aW9ucyI6
IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2Rh
dGUiOiAxNTUyMDcwMjkxMTYxLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdl
cyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50
ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJu
YWwpIiwgInVwZGF0ZV9kYXRlIjogMTU1MjA3MDI5MTE2MSwgInV1aWQiOiAiYmZlZWMyZDQtMzc3
MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZh
bHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10s
ICJ0eXBlcyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjogImFjYzI5MzU1
LTIxYzgtNDA2Yy04NTgyLWRkNGU1YWMxY2E5OSIsICJleHBvcnRfa2V5IjogInVzZXJhZ2VudGFu
YWx5c2lzX2ZuIiwgIm5hbWUiOiAidXNlcmFnZW50YW5hbHlzaXNfZm4iLCAiZGVzdGluYXRpb25f
dHlwZSI6IDAsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJ1c2VyYWdlbnRhbmFseXNpc19mbiIsICJl
eHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJhQGV4YW1wbGUuY29tIl19XSwgImluY2lkZW50
X2FydGlmYWN0X3R5cGVzIjogW10sICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9u
cyI6IFtdLCAidHlwZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiU2lt
dWxhdGlvbiIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2Vh
YmxlIjogdHJ1ZSwgImlkIjogNTEsICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2YwZTNl
ZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90
eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNp
bXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHku
IiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtd
LCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwg
ImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJh
dGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6
ICJ1c2VyX2FnZW50X3N0cmluZyIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51
bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjMxLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1
dWlkIjogImNiNDJhNmJhLWI2ZDQtNGVlZC04MzhmLTVjOGI2MGJiNmIzMyIsICJjaG9zZW4iOiBm
YWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjogIlNvZnR3YXJlIChhIHNvZnR3
YXJlIGFnZW50KSB0aGF0IGlzIGFjdGluZyBvbiBiZWhhbGYgb2YgYSB1c2VyLiIsICJpbnRlcm5h
bCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9r
ZXkiOiAiX19mdW5jdGlvbi91c2VyX2FnZW50X3N0cmluZyIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiaGVsbG8iLCAibmFtZSI6ICJ1c2VyX2FnZW50X3N0cmlu
ZyIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxz
ZSwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjogMTU1MjA3
MDI4MzM5NX0=
"""
    )