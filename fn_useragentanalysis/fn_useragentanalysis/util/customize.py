# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_useragentanalysis"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_useragentanalysis package"""
    reload_params = {"package": u"fn_useragentanalysis",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"user_agent_string"], 
                    "datatables": [], 
                    "message_destinations": [u"useragentanalysis_fn"], 
                    "functions": [u"fn_useragentanalysis"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"user_agent_workflow"], 
                    "actions": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     user_agent_string
    #   Message Destinations:
    #     useragentanalysis_fn
    #   Functions:
    #     fn_useragentanalysis
    #   Workflows:
    #     user_agent_workflow


    yield ImportDefinition(u"""
eyJpZCI6IDUsICJmaWVsZHMiOiBbeyJjaG9zZW4iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2Us
ICJ1dWlkIjogImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJvcGVyYXRp
b25zIjogW10sICJ2YWx1ZXMiOiBbXSwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAzOCwgIm5h
bWUiOiAiaW5jX3RyYWluaW5nIiwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJwcmVmaXgiOiBudWxs
LCAidHlwZV9pZCI6IDAsICJ0b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lkZW50IGlzIGEgc2lt
dWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuICBUaGlzIGZpZWxkIGlzIHJlYWQtb25seS4i
LCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJk
ZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAi
b3BlcmF0aW9uX3Blcm1zIjoge30sICJyZWFkX29ubHkiOiB0cnVlLCAicmljaF90ZXh0IjogZmFs
c2UsICJleHBvcnRfa2V5IjogImluY2lkZW50L2luY190cmFpbmluZyIsICJ0ZW1wbGF0ZXMiOiBb
XX0sIHsiY2hvc2VuIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICJjYjQyYTZi
YS1iNmQ0LTRlZWQtODM4Zi01YzhiNjBiYjZiMzMiLCAib3BlcmF0aW9ucyI6IFtdLCAidmFsdWVz
IjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogNzksICJuYW1lIjogInVzZXJfYWdlbnRf
c3RyaW5nIiwgInRleHQiOiAidXNlcl9hZ2VudF9zdHJpbmciLCAicHJlZml4IjogbnVsbCwgInR5
cGVfaWQiOiAxMSwgInRvb2x0aXAiOiAiU29mdHdhcmUgKGEgc29mdHdhcmUgYWdlbnQpIHRoYXQg
aXMgYWN0aW5nIG9uIGJlaGFsZiBvZiBhIHVzZXIuIiwgInBsYWNlaG9sZGVyIjogImhlbGxvIiwg
ImlucHV0X3R5cGUiOiAidGV4dCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiZGVmYXVs
dF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgIm9wZXJh
dGlvbl9wZXJtcyI6IHt9LCAicmVhZF9vbmx5IjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwg
ImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi91c2VyX2FnZW50X3N0cmluZyIsICJ0ZW1wbGF0ZXMi
OiBbXX1dLCAicGhhc2VzIjogW10sICJvdmVycmlkZXMiOiBbXSwgImFjdGlvbnMiOiBbXSwgImxh
eW91dHMiOiBbXSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAidGltZWZyYW1lcyI6IG51bGwsICJp
bmR1c3RyaWVzIjogbnVsbCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiZ2VvcyI6IG51bGwsICJmdW5j
dGlvbnMiOiBbeyJpZCI6IDQsICJuYW1lIjogImZuX3VzZXJhZ2VudGFuYWx5c2lzIiwgImRlc2Ny
aXB0aW9uIjogeyJmb3JtYXQiOiAidGV4dCIsICJjb250ZW50IjogIiJ9LCAidXVpZCI6ICJlMzYz
ZmI1OS05NGMwLTQwZTMtOGU4Ny0xZWQ2M2E0YzgxMmUiLCAidmVyc2lvbiI6IDQsICJjcmVhdG9y
IjogeyJpZCI6IDMsICJ0eXBlIjogInVzZXIiLCAibmFtZSI6ICJ0ZXN0QGVzc2V4dGVjLmNvbSIs
ICJkaXNwbGF5X25hbWUiOiAiVGVycmVsbCBNYWNrIn0sICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlw
dGlvbiI6IG51bGwsICJ1dWlkIjogbnVsbCwgIndvcmtmbG93X2lkIjogOCwgIm5hbWUiOiAiVXNl
ciBBZ2VudCBXb3JrZmxvdyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJ1c2VyX2FnZW50X3dvcmtm
bG93IiwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImFjdGlvbnMiOiBbXX1dLCAiZGlzcGxh
eV9uYW1lIjogIlVzZXIgQWdlbnQgQW5hbHlzaXMiLCAiZGVzdGluYXRpb25faGFuZGxlIjogInVz
ZXJhZ2VudGFuYWx5c2lzX2ZuIiwgImV4cG9ydF9rZXkiOiAiZm5fdXNlcmFnZW50YW5hbHlzaXMi
LCAibGFzdF9tb2RpZmllZF9ieSI6IHsiaWQiOiAzLCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAi
dGVzdEBlc3NleHRlYy5jb20iLCAiZGlzcGxheV9uYW1lIjogIlRlcnJlbGwgTWFjayJ9LCAibGFz
dF9tb2RpZmllZF90aW1lIjogMTU0NzM0MjExOTc4OSwgInZpZXdfaXRlbXMiOiBbeyJzdGVwX2xh
YmVsIjogbnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZp
ZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogImNiNDJhNmJhLWI2ZDQtNGVlZC04
MzhmLTVjOGI2MGJiNmIzMyIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XX1dLCAic2VydmVy
X3ZlcnNpb24iOiB7Im1ham9yIjogMzAsICJtaW5vciI6IDAsICJidWlsZF9udW1iZXIiOiAzNDc2
LCAidmVyc2lvbiI6ICIzMC4wLjM0NzYifSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJl
eHBvcnRfZGF0ZSI6IDE1NDk1NTQzNTE4MzUsICJpbmNpZGVudF90eXBlcyI6IFt7InVwZGF0ZV9k
YXRlIjogMTU0OTU1NDczOTc5MCwgImNyZWF0ZV9kYXRlIjogMTU0OTU1NDczOTc5MCwgInV1aWQi
OiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImRlc2NyaXB0aW9uIjog
IkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3Rv
bWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFj
a2FnZXMgKGludGVybmFsKSIsICJlbmFibGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxzZSwgInBh
cmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZSwgImlkIjogMH1dLCAiYXV0b21hdGljX3Rh
c2tzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7Im5hbWUiOiAidXNlcmFnZW50YW5h
bHlzaXNfZm4iLCAicHJvZ3JhbW1hdGljX25hbWUiOiAidXNlcmFnZW50YW5hbHlzaXNfZm4iLCAi
ZGVzdGluYXRpb25fdHlwZSI6IDAsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJ0ZXN0
QGVzc2V4dGVjLmNvbSJdLCAidXVpZCI6ICJhY2MyOTM1NS0yMWM4LTQwNmMtODU4Mi1kZDRlNWFj
MWNhOTkiLCAiZXhwb3J0X2tleSI6ICJ1c2VyYWdlbnRhbmFseXNpc19mbiJ9XSwgInRhc2tfb3Jk
ZXIiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAidHlwZXMiOiBbXSwgInNjcmlwdHMiOiBbXSwg
ImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlwdGlv
biI6ICIiLCAidXVpZCI6ICJmMWJlY2JmZC1iYTI1LTRiM2QtYmE2OS1hZTQ5ODU0OTU5M2IiLCAi
d29ya2Zsb3dfaWQiOiA4LCAibmFtZSI6ICJVc2VyIEFnZW50IFdvcmtmbG93IiwgInByb2dyYW1t
YXRpY19uYW1lIjogInVzZXJfYWdlbnRfd29ya2Zsb3ciLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZh
Y3QiLCAiY3JlYXRvcl9pZCI6ICJ0ZXN0QGVzc2V4dGVjLmNvbSIsICJsYXN0X21vZGlmaWVkX2J5
IjogInRlc3RAZXNzZXh0ZWMuY29tIiwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDg5NTI5NDUx
NjIsICJleHBvcnRfa2V5IjogInVzZXJfYWdlbnRfd29ya2Zsb3ciLCAiY29udGVudCI6IHsieG1s
IjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9u
cyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4
bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIg
eG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHht
bG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxu
czpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1c
Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRw
Oi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cInVzZXJfYWdlbnRfd29ya2Zs
b3dcIiBpc0V4ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIlVzZXIgQWdlbnQgV29ya2Zsb3dcIj48
ZG9jdW1lbnRhdGlvbi8+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIj48b3V0
Z29pbmc+U2VxdWVuY2VGbG93XzB6c21xY3M8L291dGdvaW5nPjwvc3RhcnRFdmVudD48ZW5kRXZl
bnQgaWQ9XCJFbmRFdmVudF8wdGliOHR4XCI+PGluY29taW5nPlNlcXVlbmNlRmxvd18wNnVtaThh
PC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzFqZzBs
bHVcIiBuYW1lPVwiVXNlciBBZ2VudCBBbmFseXNpc1wiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rp
b25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiZTM2M2Zi
NTktOTRjMC00MGUzLThlODctMWVkNjNhNGM4MTJlXCI+e1wiaW5wdXRzXCI6e30sXCJwcmVfcHJv
Y2Vzc2luZ19zY3JpcHRcIjpcImlucHV0cy51c2VyX2FnZW50X3N0cmluZyA9IGFydGlmYWN0LnZh
bHVlXCIsXCJyZXN1bHRfbmFtZVwiOlwiXCIsXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJ1
c2VyX2FnZW50X2FuYWx5c2lzID0gc3RyKHJlc3VsdHMudXNlcl9hZ2VudF9hbmFseXNpcylcXG5p
bmNpZGVudC5hZGROb3RlKHVzZXJfYWdlbnRfYW5hbHlzaXMpXFxuXFxuIyBUT0RPIGFkZCBleGFt
cGxlIHBheWxvYWRcXG4jeyd1c2VyX2FnZW50X3N0cmluZyc6ICdcXFwiTW96aWxsYS81LjAgKE1h
Y2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfOV81KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1M
LCBsaWtlIEdlY2tvKSBDaHJvbWUvNjQuMC4zMjgyLjE0MCBTYWZhcmkvNTM3LjM2XFxcIicsICdz
b3VyY2VfYXBpX3VybCc6ICdodHRwczovL2FwaS53aGF0aXNteWJyb3dzZXIuY29tL2FwaS92Mi91
c2VyX2FnZW50X3BhcnNlJywgJ3VzZXJfYWdlbnRfYW5hbHlzaXMnOiAne1xcXCJwYXJzZVxcXCI6
IHtcXFwidXNlcl9hZ2VudFxcXCI6IFxcXCJcXFxcXFxcXFxcXCJNb3ppbGxhLzUuMCAoTWFjaW50
b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF85XzUpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxp
a2UgR2Vja28pIENocm9tZS82NC4wLjMyODIuMTQwIFNhZmFyaS81MzcuMzZcXFxcXFxcXFxcXCJc
XFwiLCBcXFwic29mdHdhcmVfbmFtZVxcXCI6IFxcXCJDaHJvbWVcXFwiLCBcXFwib3BlcmF0aW5n
X3N5c3RlbVxcXCI6IFxcXCJNYWMgT1MgWCAoTWF2ZXJpY2tzKVxcXCIsIFxcXCJzb2Z0d2FyZV92
ZXJzaW9uXFxcIjogXFxcIjY0XFxcIiwgXFxcIm9wZXJhdGluZ19zeXN0ZW1fbmFtZVxcXCI6IFxc
XCJNYWMgT1MgWFxcXCIsIFxcXCJvcGVyYXRpbmdfc3lzdGVtX3ZlcnNpb25fZnVsbFxcXCI6IFtc
XFwiMTBcXFwiLCBcXFwiOVxcXCIsIFxcXCI1XFxcIl0sIFxcXCJzb2Z0d2FyZV9uYW1lX2NvZGVc
XFwiOiBcXFwiY2hyb21lXFxcIiwgXFxcInNpbXBsZV9vcGVyYXRpbmdfcGxhdGZvcm1fc3RyaW5n
XFxcIjogbnVsbCwgXFxcIm9wZXJhdGluZ19zeXN0ZW1fdmVyc2lvblxcXCI6IFxcXCJNYXZlcmlj
a3NcXFwiLCBcXFwic2ltcGxlX3N1Yl9kZXNjcmlwdGlvbl9zdHJpbmdcXFwiOiBudWxsLCBcXFwi
aXNfYWJ1c2l2ZVxcXCI6IGZhbHNlLCBcXFwib3BlcmF0aW5nX3N5c3RlbV9mbGF2b3VyX2NvZGVc
XFwiOiBudWxsLCBcXFwic29mdHdhcmVfdmVyc2lvbl9mdWxsXFxcIjogW1xcXCI2NFxcXCIsIFxc
XCIwXFxcIiwgXFxcIjMyODJcXFwiLCBcXFwiMTQwXFxcIl0sIFxcXCJzaW1wbGVfc29mdHdhcmVf
c3RyaW5nXFxcIjogXFxcIkNocm9tZSA2NCBvbiBNYWMgT1MgWCAoTWF2ZXJpY2tzKVxcXCIsIFxc
XCJvcGVyYXRpbmdfc3lzdGVtX2ZsYXZvdXJcXFwiOiBudWxsLCBcXFwib3BlcmF0aW5nX3N5c3Rl
bV9uYW1lX2NvZGVcXFwiOiBcXFwibWFjLW9zLXhcXFwiLCBcXFwic29mdHdhcmVcXFwiOiBcXFwi
Q2hyb21lIDY0XFxcIn0sIFxcXCJyZXN1bHRcXFwiOiB7XFxcIm1lc3NhZ2VcXFwiOiBcXFwiVGhl
IHVzZXIgYWdlbnQgd2FzIHBhcnNlZCBzdWNjZXNzZnVsbHkuXFxcIiwgXFxcImNvZGVcXFwiOiBc
XFwic3VjY2Vzc1xcXCIsIFxcXCJtZXNzYWdlX2NvZGVcXFwiOiBcXFwidXNlcl9hZ2VudF9wYXJz
ZWRcXFwifX0nfVxcblxcblwifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVu
dHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18wenNtcWNzPC9pbmNvbWluZz48b3V0Z29pbmc+U2Vx
dWVuY2VGbG93XzA2dW1pOGE8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBp
ZD1cIlNlcXVlbmNlRmxvd18wenNtcWNzXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3ht
XCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMWpnMGxsdVwiLz48c2VxdWVuY2VGbG93IGlkPVwi
U2VxdWVuY2VGbG93XzA2dW1pOGFcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xamcwbGx1XCIg
dGFyZ2V0UmVmPVwiRW5kRXZlbnRfMHRpYjh0eFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0
QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0
PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwi
IHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0
aW9uXzFreHhpeXRcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMGZmaTYw
eFwiPjx0ZXh0Pk91dHB1dCBjcmVhdGVzIGEgTm90ZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxh
c3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzB3OW5kamZcIiBzb3VyY2VSZWY9XCJTZXJ2aWNl
VGFza18xamcwbGx1XCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMGZmaTYweFwiLz48L3By
b2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQ
TU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBt
bmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3Rh
cnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwi
MzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6
QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVu
dD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRf
ZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5
PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50
PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxv
bWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBc
Ii8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1c
IkVuZEV2ZW50XzB0aWI4dHhcIiBpZD1cIkVuZEV2ZW50XzB0aWI4dHhfZGlcIj48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI2MjBcIiB5PVwiMTc1XCIvPjxicG1u
ZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwi
NjM4XCIgeT1cIjIxNFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMWpnMGxsdVwiIGlkPVwi
U2VydmljZVRhc2tfMWpnMGxsdV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0
aD1cIjEwMFwiIHg9XCIzMzdcIiB5PVwiMTUzXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRp
OkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzB6c21xY3NcIiBpZD1cIlNlcXVl
bmNlRmxvd18wenNtcWNzX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjI2OFwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMjY4XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxOTNcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIz
MzdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE5M1wiLz48YnBtbmRpOkJQTU5MYWJl
bD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjI4M1wiIHk9XCIx
OTIuNVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1O
RWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wNnVtaThhXCIgaWQ9XCJTZXF1ZW5jZUZs
b3dfMDZ1bWk4YV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNDM3XCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIxOTNcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI2MjBcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjE5M1wiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjUyOC41XCIgeT1cIjE3MVwiLz48L2JwbW5k
aTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1l
bnQ9XCJUZXh0QW5ub3RhdGlvbl8wZmZpNjB4XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8wZmZpNjB4
X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI0MlwiIHdpZHRoPVwiMTMyXCIgeD1cIjM5NVwi
IHk9XCI1MlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVu
dD1cIkFzc29jaWF0aW9uXzB3OW5kamZcIiBpZD1cIkFzc29jaWF0aW9uXzB3OW5kamZfZGlcIj48
b21nZGk6d2F5cG9pbnQgeD1cIjQxMlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTUz
XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDQ4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCI5NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBN
TkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAidmVyc2lvbiI6IDIyLCAid29ya2Zsb3dfaWQiOiAi
dXNlcl9hZ2VudF93b3JrZmxvdyJ9LCAiYWN0aW9ucyI6IFtdfV0sICJyb2xlcyI6IFtdLCAid29y
a3NwYWNlcyI6IFtdfQ==
"""
    )