language: python
python: 3.9
os: linux
env:
  global:
    - PATH_ALLOW_IMAGE_NAMES="$TRAVIS_BUILD_DIR/.scripts/ALLOW_IMAGE_NAMES.txt"
    - PATH_PIP_REQ_MAIN="$TRAVIS_BUILD_DIR/.scripts/requirements_main.txt"
    - PATH_PIP_REQ_TESTS="$TRAVIS_BUILD_DIR/.scripts/requirements_tests.txt"
    - FILE_NAME_EXTRA_SETUP=".travis_extra_setup.sh"
    - SCRIPTS_DIR="$TRAVIS_BUILD_DIR/.scripts"

    - ARTIFACTORY_BASE_URL="https://na.$ARTIFACTORY_URL/artifactory"
    - ARTIFACTORY_GENERIC_STORAGE="$ARTIFACTORY_BASE_URL/$ARTIFACTORY_GENERIC_STORAGE"
    - ARTIFACTORY_DOCKER_REPO="$ARTIFACTORY_DOCKER_REPO_NAME.$ARTIFACTORY_URL"
    - ARTIFACTORY_PYPI_INDEX="https://$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD@na.artifactory.swg-devops.com/artifactory/api/pypi/sec-resilient-team-integrations-pypi-virtual/simple"

    - PYPI_INDEX="https://pypi.org/simple"

    - PACKAGE_NAME=`python .scripts/get_package_name_from_cmt_msg.py "$TRAVIS_COMMIT_MESSAGE"`

    - KEYWORD_BUILD_DEV_APP="[build-dev-app]"
    - BUILD_DEV_APP=$([[ "$TRAVIS_COMMIT_MESSAGE" != *"$KEYWORD_BUILD_DEV_APP"* ]]; echo $?)
    - BUILD_TYPE=`if [ $BUILD_DEV_APP == 1 ]; then echo "DEV"; else echo "MAIN"; fi`

    - KEYWORD_DEV_DEPS='[dev-deps]'
    - USE_ARTIFACTORY_DEPS=`[[ "$TRAVIS_COMMIT_MESSAGE" != *"$KEYWORD_DEV_DEPS"* ]]; echo $?`
    - PYPI_INDEX_TO_USE=`if [ $USE_ARTIFACTORY_DEPS == 1 ]; then echo "$ARTIFACTORY_PYPI_INDEX"; else echo "$PYPI_INDEX"; fi`
    - DEV_DEPS=`[[ ( -z $TRAVIS_TAG && "$LATEST_COMMIT_MSG" =~ "$DEV_DEPS_KEYWORD" ) || "$TAG_MSG" =~ "$DEV_DEPS_KEYWORD" ]]; echo $?`

# Exclude these branches from having jobs ran.
branches:
  except:
    - public
    - /^_.*$/

notifications:
  slack:
    rooms:
      - secure: "OnC0Emkl5zxS0lWkoly700RI3oaMyn/QVNjFgYy3GHtX44cynlGYmrKiWU1oN12QBVdt6GcVsN+9IW/dovORfZQWtgaLdbVwNClL5MZkVUS3/PrFiA56Sx38zsrlKWVNNPg1ktPtlKSvZ36NwRwTKq5C7eyVWJ9uc3Kx0E5lI7MWP3n+pfAMXpiJ3r9tAuuXKT07YUTtxN+bev8yhSjj9hLWZvfobXVuWLhJHCPp6vWH2ME55GD9cqtxCJtPE0I7jElqUQZQ+ubHdHWpnFGySM+af+45kkE7NwavbdpkB57FQrCjXOeRCZ4Znei7r+iAet/ADQOXyOk6dXUAI9wccevORQnRTvPiyBan62apV/xvEIr4mqXPilD6EGMUAhi7rAWVyWwQeCFGNYHbX7EbHm7Tv30PF1CSjGxV3YYiZWLzjLSwNrCzwSZ0AnqN857WWygNfoe3h5PV6tGz9a12oFjaS3VvX61Ow93C5FeRWZMKkZHZuouZ68a4yGM99Gr3mJ9vffyhbV1b/SfGmfWdZs50ThBbyw1gEn/Hvq5L9uBOEktq9iVhzhWmWG0zpGL0HDCTvANvAoVK5EWUBfEymjpxL46ieK5lOV7e/QA1XSiM7YSgkPnz9wJx3/25WHOHLYLslKlXdwukwZwYhwT1JYGpZmWbT2nLsm7NBcC5fMQ="
  on_success: never
  on_failure: always

stages:
  - name: run all tests
    if: tag IS blank AND branch = master AND type = cron
  - name: run package tests
    if: type != cron
  # Every commit not on master performs static analysis
  - name: static analysis
    if: tag IS blank AND type != cron
  - name: build image and app zip
    if: tag IS blank AND type = push
  # Rebuild all images
  - name: rebuild all images
    if: tag =~ ^rebuild/.+

matrix:

  # Specification of jobs which may fail but should not fail the build
  # TODO: Review
  allow_failures:
    # The safety checker job is likely to fail often in its initial usage
    # Rather than explicity setting it to always pass
    # Allow failures of the job to still gather the useful info
    - name: Safety Checker

  fast_finish: true

  include:

    - stage: run all tests
      name: Python 2.7 Unit Tests - Main - PyPi
      python: 2.7
      env:
        - RUN_TYPE=unit_test_main_pp TOXENV=py27
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 2.7 Unit Tests - Main - PyPi"
        - .scripts/run_tests.sh "ALL" "$PYPI_INDEX"

    - stage: run all tests
      name: Python 3.6 Unit Tests - Main - PyPi
      python: 3.6
      env:
        - RUN_TYPE=unit_test_main_pp TOXENV=py36
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.6 Unit Tests - Main - PyPi"
        - .scripts/run_tests.sh "ALL" "$PYPI_INDEX"

    - stage: run all tests
      name: Python 3.9 Unit Tests - Main - PyPi
      python: 3.9
      env:
        - RUN_TYPE=unit_test_main_pp TOXENV=py39
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.9 Unit Tests - Main - PyPi"
        - .scripts/run_tests.sh "ALL" "$PYPI_INDEX"

    - stage: run all tests
      name: Python 2.7 Unit Tests - Main - Artifactory
      python: 2.7
      env:
        - RUN_TYPE=unit_test_main_af TOXENV=py27
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 2.7 Unit Tests - Main - Artifactory"
        - .scripts/run_tests.sh "ALL" "$ARTIFACTORY_PYPI_INDEX"

    - stage: run all tests
      name: Python 3.6 Unit Tests - Main - Artifactory
      python: 3.6
      env:
        - RUN_TYPE=unit_test_main_af TOXENV=py36
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.6 Unit Tests - Main - Artifactory"
        - .scripts/run_tests.sh "ALL" "$ARTIFACTORY_PYPI_INDEX"

    - stage: run all tests
      name: Python 3.9 Unit Tests - Main - Artifactory
      python: 3.9
      env:
        - RUN_TYPE=unit_test_main_af TOXENV=py39
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.9 Unit Tests - Main - Artifactory"
        - .scripts/run_tests.sh "ALL" "$ARTIFACTORY_PYPI_INDEX"

    - stage: run package tests
      name: Python 2.7 Unit Tests - Package
      python: 2.7
      env:
        - RUN_TYPE=unit_test_package TOXENV=py27
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "$TRAVIS_COMMIT_MESSAGE"
        - echo "Starting Python 2.7 Unit Tests - Package"
        - .scripts/run_tests.sh "$PACKAGE_NAME" "$PYPI_INDEX_TO_USE"

    - stage: run package tests
      name: Python 3.6 Unit Tests - Package
      python: 3.6
      env:
        - RUN_TYPE=unit_test_package TOXENV=py36
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.6 Unit Tests - Package"
        - .scripts/run_tests.sh "$PACKAGE_NAME" "$PYPI_INDEX_TO_USE"

    - stage: run package tests
      name: Python 3.9 Unit Tests - Package
      python: 3.9
      env:
        - RUN_TYPE=unit_test_package TOXENV=py39
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.9 Unit Tests - Package"
        - .scripts/run_tests.sh "$PACKAGE_NAME" "$PYPI_INDEX_TO_USE"

    # Jobs that perform static analysis; code quality, security scans etc
    - stage: static analysis
      name: Py2.7 Bandit Security Scan
      python: 2.7
      env:
        - ANALYSIS_NAME="Py2.7 Bandit Security Scan"
      install:
        - pip install bandit==1.6.2
      script:
        - .scripts/run_bandit_scan.sh "$PACKAGE_NAME"

    - stage: static analysis
      name: Py3.9 Bandit Security Scan
      python: 3.9
      env:
        - ANALYSIS_NAME="Py3.9 Bandit Security Scan"
      install:
        - pip install bandit
      script:
        - .scripts/run_bandit_scan.sh "$PACKAGE_NAME"

    - stage: static analysis
      name: Pylint
      python: 3.9
      env:
        - ANALYSIS_NAME="Pylint"
      install:
        - pip install pylint
      script:
        - .scripts/pylint.sh "$PACKAGE_NAME"

    - stage: static analysis
      name: Safety Checker
      python: 3.9
      env:
        - ANALYSIS_NAME="CVE Search against dependancies"
      install:
        - pip install safety
      script:
        - .scripts/run_safety_scan_for_cve.sh "$PACKAGE_NAME"

    - stage: build image and app zip
      name: Build Image and App zip
      python: 3.9
      services:
        - docker
      install: skip
      script: skip
      before_deploy:
        - pip install resilient-sdk -i $PYPI_INDEX_TO_USE
      deploy:
        - provider: script
          script: .scripts/build_image_and_app_zip.sh "$PACKAGE_NAME" "DEV" "$PYPI_INDEX_TO_USE";
          on:
            all_branches: true
            condition: "$BUILD_DEV_APP = 1"
        - provider: script
          script: .scripts/build_image_and_app_zip.sh "$PACKAGE_NAME" "MAIN" "$PYPI_INDEX_TO_USE";
          on:
            branch: master
      after_deploy:
        - PATH_APP_ZIP=`cat "$TRAVIS_BUILD_DIR/PATH_APP_ZIP.txt"`;
        - echo "PATH_APP_ZIP=$PATH_APP_ZIP";
        - FILE_NAME=$(basename $PATH_APP_ZIP);
        - .scripts/send_slack_notification.sh "Built $BUILD_TYPE version of [$PACKAGE_NAME] \n Artifactory App.zip - <$PATH_APP_ZIP|$FILE_NAME>" "success";

    - stage: rebuild all images
      python: 3.9
      services:
        - docker
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install resilient-sdk
        - sudo apt-get install jq
      script:
        # This will take split the git tag on '/'
        # E.g.:
        #  - to rebuild ALL images; tag with 'rebuild/40.1.1880/ALL/QUAY' and commit message 'INT-0001 {rebuild} <reason>'
        #  - to rebuild single image; tag with 'rebuild/40.1.1880/fn_utilities/ARTIFACTORY' and commit message 'INT-0001 {fn_utilities} <reason>'
        - PYTHON_LIBRARIES_VERSION=$(echo $TRAVIS_TAG | cut -d "/" -f 2)
        - IMAGE_TO_REBUILD=$(echo $TRAVIS_TAG | cut -d "/" -f 3)
        - REPO_TO_PUSH=$(echo $TRAVIS_TAG | cut -d "/" -f 4)
        - .scripts/rebuild_images.sh "$PYTHON_LIBRARIES_VERSION" "$IMAGE_TO_REBUILD" "$REPO_TO_PUSH"
