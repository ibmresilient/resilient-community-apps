language: python
python: 2.7
os: linux
env:
  global:
  - TEST_RESILIENT_APPLIANCE=staging2.internal.resilientsystems.com
  - OCTOKIT_API_ENDPOINT="https://github.ibm.com/api/v3/"
  - PIP_FIND_LINKS="$TRAVIS_BUILD_DIR/pkgs"
  - secure: VU1PL2bWOE+E3ieBz/0Oa2hIRXGeSFYubE9SYh3dH541h8V8FWE0kGt8P6xdZOGmf9xNsDL/O+rKqrq5TCKTdUQqFXm7RCD//iQrHUcbu2YU38XPpBQrWxSZs29sR3R6UkUypZahHmn/ghjgZnRxQIWGscYPvvNCiOP9X85ckmVaKLYPwW0HPH7vIKs9zcT8tEyRDANokc0BQDjeVu0s29FeKGyy9JVbuye8/1TmVkQWBvutvcQ/z/mOQ7dOO3fW0wkVwOHPF9FtBc79WzjK5w/Ej30EWHC5zdRG46+2FLcqKSHvkyuV59f0ojxLzRmeR1ueS37pNncmXfVMREwtiIYN/Dd3isLsg14RK1leu/JHiPxfQtz2TV4+yeVO4aZk+Bs/JLf1ZbXAE+A71hIH6rTUpEBq1S8qjKsfTPEWLg1cuq1ujf2WOAumdIf8rSOnQ9EbEfBlm3N8Wo9RjXbEx6hq+UHr7L28tw0u00gcAex6Ky2eRk+USFnXBHs/Kf5i29CWzw4Lcnb2hPa0bup3yNQuss/Yy+cQO5tDW8jJPP8joR5Fvr8fJZVtGlTGp09odHcrDGKvbdlf0gVmVDYawKi0v4m0URCKVy0vYAbzVOgZF46nW+VfcexiLxomwYpKeltigk+L52aV5DIodfuxS9aB6IJtEYSTO8Mf+Yo2x8Q=
  - secure: kr5Zz5frfrGOeuAylefGbDhY5s/YwyRhktuAly1ovOn/7Q3OJYjTq6h7wvnt1KQ/YeSdA+bxwOhWKbYHPQHAhovyo/5gsII7LruSs7VjdcD9tDoaYEoDBP7nki+NGr+dBVwrooGJ3f7TbuZs+4OSyPWD2FdN4PsOYLof4soDEW7C0cTP2KZ/wNGDjBGB2stOb6a5h4MQSohx+7B795noUoK5ojmygZObIGSDWmahR4kzCm+rEVLlMV0ptDCBXvn4xmJLCz5UOZhR27ckuiW342vNxShlms+rwWcvoxwbj61Qn3MEf9S9D59aJ+n4+u9Kb3VD4HJjlQ3rWZ/DADPfp7h6XOmfrQq3Xj3sQ4K2+8RMSFHdxWPsmhWd/Aty+YmWjoOnewoBfFaDUzFRURqwO3K+oh1H0IALTOTYQSYEeuVfi/+mwJRkKh0+IgvgscL5/bo+nVnQBk4FpWJRHV0x2fWiG8DHCKmInkkFSDHax3dHc9pYZXQTdNdfvsJRtc0rEn6GyVnRMia1TKLpB1joRhb7mkyc7pgDSatvV9W6+v6+evplHFxS7lkm9gqlW/ygJzPVYx7UaFuqo9cOi/c8sR6qf7NUTUi9Aa4aqY6qHNrkxfh7+5ck7wLTWmE0WL+0r3Z09Zg746SIGYqLrFQJZPn+JanFEy0q7kAU2Zr8vgE=
  - MASTER_BUILD=$( [[ $TRAVIS_BRANCH == "master"  &&  $TRAVIS_EVENT_TYPE != "pull_request" ]]; echo $? ) 
  # get the message of the latest tag this code is described by
  - LATEST_COMMIT_MSG=`if [[ $TRAVIS_EVENT_TYPE == "pull_request" ]]; then git --no-pager log --format=%B -n 1 $(echo $TRAVIS_COMMIT_RANGE | tr '.' '\n' | tail -n 1); else echo $TRAVIS_COMMIT_MESSAGE; fi`
  - TAG_MSG=`git tag -ln --format '%(subject)' $(git describe --tags --abbrev=0) | head -n 1`
  # this checks if commit message or a tag message if it's a tag push have [dev-deps] in them
  - DEV_DEPS_KEYWORD='[dev-deps]'
  - DEV_DEPS=`[[ ( -z $TRAVIS_TAG && "$LATEST_COMMIT_MSG" =~ "$DEV_DEPS_KEYWORD" ) || "$TAG_MSG" =~ "$DEV_DEPS_KEYWORD" ]]; echo $?`
  - ARTIFACTORY_PYPI_INDEX="https://$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD@na.artifactory.swg-devops.com/artifactory/api/pypi/sec-resilient-team-integrations-pypi-virtual/simple"
  - ARTIFACTORY_REPO_LINK=https://na.artifactory.swg-devops.com/artifactory/sec-resilient-team-integrations-generic-local
  - GITHUB_PR_COMMENT_URL=https://api.github.ibm.com/repos/${TRAVIS_REPO_SLUG}/issues/${TRAVIS_PULL_REQUEST}/comments
  - PYPI_INDEX="https://pypi.org/simple"
# Exclude these branches from having jobs ran.
branches:
  except:
    - public
    - /^_.*$/

stages:
  # todo - install deps for master tests
  # All tests are executed on CRON - checks if any dependencies got broken
  - name: all tests
    if: branch = master AND type = cron
  # Every commit not on master runs tests for the integrations that got updated.
  - name: run tests
    if: branch != master OR type in (pull_request)
  # For every commit in pull_request, or on special tag - images and packages are built and pushed to Artifactory
  - name: build images and packages
    if: type in (pull_request) OR ( tag IS present AND tag =~ ^container/.+ )
  # Publish to Quay and create a package when merged to master (only push to Quay on master)
  - name: publish master
    if: branch = master AND type IN (push)
  # Rebuild all images
  - name: rebuild all images
    if: tag =~ ^rebuild/.+
  # Send a success notification
  - name: successful notification
    if: tag !~ ^rebuild/.+

matrix:
  fast_finish: true
  include:
  # Master branch is where all the integrations should be tested, its okay if it takes a while
  # As we have the push jobs above to handle individual commits
  - stage: all tests
    python: 2.7
    name: Py27 Master Build and Run tests
    env:
    - TOXENV=py27 TEST_RESILIENT_ORG="Resilient Integrations - Test"
    install:
      - .scripts/install_tests_deps.sh
    script:
    - echo "2.7 Master Build" && .scripts/run_tests.sh
  - stage: all tests
    python: 3.6
    name: Py36 Master Build and Run tests
    env:
    - TOXENV=py36 TEST_RESILIENT_ORG="Resilient Integrations - Test"
    install:
      - .scripts/install_tests_deps.sh
    script:
    - echo "3.6 Master Build" && .scripts/run_tests.sh
  - stage: publish master
    name: Building Quay containers
    python: 3.6
    services:
      - docker
    install: skip
    script:
      - source .scripts/updated_integrations_build_images.sh QUAY
      # if there are failed containers send a message with their list
      - if [[ -n "${FAILED_CONTAINERS[*]}" ]]; then .scripts/send_notification.sh "Containers not built ${FAILED_CONTAINERS[*]}" failure; return 1; fi
  # Jobs below this line are reserved for push contributions i.e when someone pushes changes
  # ==========
  # Below jobs are used to run tests against the most recently modified integration.
  # We determine the most recent one using git diff and then ensure to only run tests against a package once. 
  - stage: run tests
    name: Python 2.7 Build and Run Tests
    python: 2.7
    env:
    - TOXENV=py27 TEST_RESILIENT_ORG="Resilient Integrations - Test"
    install:
      - .scripts/install_tests_deps.sh
    script:
    - echo "2.7 push test" && .scripts/run_most_recent_tests.sh
  - stage: run tests
    name: Python 3.6 Build and Run Tests
    python: 3.6
    env:
    - TOXENV=py36 TEST_RESILIENT_ORG="Resilient Integrations - Test"
    install:
      - .scripts/install_tests_deps.sh
    script:
    - echo "3.6 push test" && .scripts/run_most_recent_tests.sh
  # Next job is started when a tag is pushed of the form container/<name> or a pull request is created
  # where <name> is a name of an integration directory whose container
  # will be build and pushed to artifactory with label :latest and :<version>
  # ARTIFACTORY_URL should be sec-resilient-docker-local.artifactory.swg-devops.com
  - stage: build images and packages
    name: Building containers and packages
    services:
      - docker
    install:
      - .scripts/install_resilient_api.sh
    script:
      - source .scripts/updated_integrations_build_images.sh ARTIFACTORY
      # if there are failed containers send a message with their list
      - if [[ -n "${FAILED_CONTAINERS[*]}" ]]; then .scripts/send_notification.sh "Containers not built ${FAILED_CONTAINERS[*]}" failure; return 1; fi
      - sudo apt-get install jq
      # Package the updated integrations and push to Artifactory
      # This is done 2nd, because we need digest of the image in the repository to update app.zip
      - source .scripts/updated_integrations_package.sh
      # if there are failed packages send a message with their list
      - if [[ -n "${FAILED_PACKAGES[*]}" ]]; then .scripts/send_notification.sh "Packages not built ${FAILED_PACKAGES[*]}" failure; fi
      - .scripts/send_current_pr_comment.sh

  - stage: rebuild all images
    python: 3.6
    services:
      - docker
    install:
      - sudo apt-get install jq
      - pip install resilient-sdk
    script:
      # This will take split the git tag on '/'
      # E.g.: tag is 'rebuild/40.0.0,!=38.0.76/QUAY'
      # - the version of resilient-circuits installed will be >=40.0.0 and NOT 38.0.76
      # - it will only push the image to the quay.io repository. If REPO_TO_PUSH is blank, it will push the image to quay.io and artifactory
      - RESILIENT_CIRCUITS_VERSION=$(echo $TRAVIS_TAG | cut -d "/" -f 2)
      - REPO_TO_PUSH=$(echo $TRAVIS_TAG | cut -d "/" -f 3)
      - .scripts/rebuild_container_images.sh $RESILIENT_CIRCUITS_VERSION $REPO_TO_PUSH

  - stage: successful notification
    # To make sure that success is sent once per job we create a separate stage for it
    install: skip
    script:
      - .scripts/send_notification.sh

# If one job fails the whole build fails, so we can send it here
after_failure:
- .scripts/send_notification.sh "" failure

before_install:
  - echo `[[ ( -z $TRAVIS_TAG && "$TRAVIS_COMMIT_MESSAGE" =~ "$DEV_DEPS_KEYWORD" ) || "$TAG_MSG" =~ "$DEV_DEPS_KEYWORD" ]]; echo $?`
  - pip install --upgrade pip
  - pip install setuptools
  - env
