language: python
python: 3.9
os: linux
dist: xenial

git:
  depth: false

stages:
  - name: run tests and sonar scan on all packages
    if: tag IS blank AND branch = master AND type = cron
  - name: run package tests
    if: type != cron
  - name: sonarqube scan
    if: type != cron
  - name: build image and app zip
    if: tag IS blank AND type = push
  - name: rebuild all images
    if: tag =~ ^rebuild/.+
  - name: sync all images
    if: tag =~ ^sync/.+

env:
  global:
    - PATH_SCRIPTS_DIR="$TRAVIS_BUILD_DIR/.scripts"
    - PATH_COMMON_SCRIPTS_DIR="$TRAVIS_BUILD_DIR/common_scripts"
    - PATH_SONAR_PROPERTIES="$TRAVIS_BUILD_DIR/sonar-project.properties"
    - PATH_ALLOW_IMAGE_NAMES="$PATH_SCRIPTS_DIR/ALLOW_IMAGE_NAMES.txt"
    - PATH_PIP_REQ_MAIN="$PATH_SCRIPTS_DIR/requirements_main.txt"
    - PATH_PIP_REQ_TESTS="$PATH_SCRIPTS_DIR/requirements_tests.txt"
    - FILE_NAME_EXTRA_SETUP=".travis_extra_setup.sh"

    - QUAY_API_URL="$QUAY_URL/api/v1"
    - QUAY_IMAGES_API_URL="$QUAY_API_URL/repository?namespace=$QUAY_USERNAME&public=true"
    - ARTIFACTORY_BASE_URL="https://na.$ARTIFACTORY_URL/artifactory"
    - ARTIFACTORY_GENERIC_STORAGE="$ARTIFACTORY_BASE_URL/$ARTIFACTORY_GENERIC_STORAGE"
    - ARTIFACTORY_DOCKER_REPO="$ARTIFACTORY_DOCKER_REPO_NAME.$ARTIFACTORY_URL"
    - ARTIFACTORY_PYPI_INDEX="https://$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD@na.artifactory.swg-devops.com/artifactory/api/pypi/sec-resilient-team-integrations-pypi-virtual/simple"

    - PYPI_INDEX="https://pypi.org/simple"

    - KEYWORD_BUILD_DEV_APP="[build-dev-app]"
    - BUILD_DEV_APP=$([[ "$TRAVIS_COMMIT_MESSAGE" != *"$KEYWORD_BUILD_DEV_APP"* ]]; echo $?)
    - BUILD_TYPE=`if [ $BUILD_DEV_APP == 1 ]; then echo "DEV"; else echo "MAIN"; fi`
    - KEYWORD_UPLOAD_APP_TO_APPHOST="[deploy-apphost]"
    - UPLOAD_APP_TO_APPHOST=$([[ "$TRAVIS_COMMIT_MESSAGE" != *"$KEYWORD_UPLOAD_APP_TO_APPHOST"* ]]; echo $?)
    - BUILD_TYPE=`if [[ $BUILD_DEV_APP == 1 ]] || [[ $UPLOAD_APP_TO_APPHOST == 1 ]]; then echo "DEV"; else echo "MAIN"; fi`


    - KEYWORD_DEV_DEPS='[dev-deps]'
    - DEV_DEPS=`[[ "$TRAVIS_COMMIT_MESSAGE" != *"$KEYWORD_DEV_DEPS"* ]]; echo $?`
    - PYPI_INDEX_TO_USE=`if [ $DEV_DEPS == 1 ]; then echo "$ARTIFACTORY_PYPI_INDEX"; else echo "$PYPI_INDEX"; fi`

    - SONAR_SCANNER_CLI_URL="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli"
    - SONAR_SCANNER_CLI_FILENAME="sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip"
    - SONAR_QUBE_URL="https://sonarqube.secintel.intranet.ibm.com"

# Install package deps
before_install:
  - pip install -U pip setuptools requests retry2
  - $PATH_SCRIPTS_DIR/download_common_scripts.sh "$PATH_COMMON_SCRIPTS_DIR" "$GH_PATH_COMMON_SCRIPTS_REPO"
  - PACKAGE_NAME=`python $PATH_SCRIPTS_DIR/get_package_name_from_cmt_msg.py "$TRAVIS_COMMIT_MESSAGE"`

# Exclude these branches from having jobs ran.
branches:
  except:
    - public
    - /^_.*$/

notifications:
  slack:
    rooms:
      - secure: "OnC0Emkl5zxS0lWkoly700RI3oaMyn/QVNjFgYy3GHtX44cynlGYmrKiWU1oN12QBVdt6GcVsN+9IW/dovORfZQWtgaLdbVwNClL5MZkVUS3/PrFiA56Sx38zsrlKWVNNPg1ktPtlKSvZ36NwRwTKq5C7eyVWJ9uc3Kx0E5lI7MWP3n+pfAMXpiJ3r9tAuuXKT07YUTtxN+bev8yhSjj9hLWZvfobXVuWLhJHCPp6vWH2ME55GD9cqtxCJtPE0I7jElqUQZQ+ubHdHWpnFGySM+af+45kkE7NwavbdpkB57FQrCjXOeRCZ4Znei7r+iAet/ADQOXyOk6dXUAI9wccevORQnRTvPiyBan62apV/xvEIr4mqXPilD6EGMUAhi7rAWVyWwQeCFGNYHbX7EbHm7Tv30PF1CSjGxV3YYiZWLzjLSwNrCzwSZ0AnqN857WWygNfoe3h5PV6tGz9a12oFjaS3VvX61Ow93C5FeRWZMKkZHZuouZ68a4yGM99Gr3mJ9vffyhbV1b/SfGmfWdZs50ThBbyw1gEn/Hvq5L9uBOEktq9iVhzhWmWG0zpGL0HDCTvANvAoVK5EWUBfEymjpxL46ieK5lOV7e/QA1XSiM7YSgkPnz9wJx3/25WHOHLYLslKlXdwukwZwYhwT1JYGpZmWbT2nLsm7NBcC5fMQ="
  on_success: never
  on_failure: always

matrix:
  fast_finish: true

  include:
    - stage: run tests and sonar scan on all packages
      name: Python 2.7 Unit Tests - Main - PyPi
      python: 2.7
      env:
        - RUN_TYPE=unit_test_main_pp TOXENV=py27
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 2.7 Unit Tests - Main - PyPi"
        - $PATH_SCRIPTS_DIR/run_tests.sh "ALL" "$PYPI_INDEX"

    - stage: run tests and sonar scan on all packages
      name: Python 3.6 Unit Tests - Main - PyPi
      python: 3.6
      env:
        - RUN_TYPE=unit_test_main_pp TOXENV=py36
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.6 Unit Tests - Main - PyPi"
        - $PATH_SCRIPTS_DIR/run_tests.sh "ALL" "$PYPI_INDEX"

    - stage: run tests and sonar scan on all packages
      name: Python 3.9 Unit Tests - Main - PyPi
      python: 3.9
      env:
        - RUN_TYPE=unit_test_main_pp TOXENV=py39
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.9 Unit Tests - Main - PyPi"
        - $PATH_SCRIPTS_DIR/run_tests.sh "ALL" "$PYPI_INDEX"

    - stage: run tests and sonar scan on all packages
      name: Python 2.7 Unit Tests - Main - Artifactory
      python: 2.7
      env:
        - RUN_TYPE=unit_test_main_af TOXENV=py27
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 2.7 Unit Tests - Main - Artifactory"
        - $PATH_SCRIPTS_DIR/run_tests.sh "ALL" "$ARTIFACTORY_PYPI_INDEX"

    - stage: run tests and sonar scan on all packages
      name: Python 3.6 Unit Tests - Main - Artifactory
      python: 3.6
      env:
        - RUN_TYPE=unit_test_main_af TOXENV=py36
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.6 Unit Tests - Main - Artifactory"
        - $PATH_SCRIPTS_DIR/run_tests.sh "ALL" "$ARTIFACTORY_PYPI_INDEX"

    - stage: run tests and sonar scan on all packages
      name: Python 3.9 Unit Tests - Main - Artifactory
      python: 3.9
      env:
        - RUN_TYPE=unit_test_main_af TOXENV=py39
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.9 Unit Tests - Main - Artifactory"
        - $PATH_SCRIPTS_DIR/run_tests.sh "ALL" "$ARTIFACTORY_PYPI_INDEX"

    - stage: run tests and sonar scan on all packages
      name: SonarQube Scan on All Packages
      language: java
      env: RUN_TYPE=sonarqube
      before_install:
        - wget "$SONAR_SCANNER_CLI_URL/$SONAR_SCANNER_CLI_FILENAME"
        - unzip $SONAR_SCANNER_CLI_FILENAME -d /tmp
        - pip install requests retry2
        - $PATH_SCRIPTS_DIR/download_common_scripts.sh "$PATH_COMMON_SCRIPTS_DIR" "$GH_PATH_COMMON_SCRIPTS_REPO"
      script:
        - echo "Installing and running SonarQube scan"
        - ALL_ALLOWED_IMAGES=`python $PATH_COMMON_SCRIPTS_DIR/get_all_allowed_image_names.py "$PATH_ALLOW_IMAGE_NAMES" --ignore-lines "rc-" "rc_data_feed_plugin_odbcfeed"`
        - $PATH_COMMON_SCRIPTS_DIR/run_sonar_scanner.sh "$ALL_ALLOWED_IMAGES" "$PATH_COMMON_SCRIPTS_DIR" 1 0

    - stage: run package tests
      name: Python 2.7 Unit Tests - Package
      python: 2.7
      env:
        - RUN_TYPE=unit_test_package TOXENV=py27
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "$TRAVIS_COMMIT_MESSAGE"
        - echo "Starting Python 2.7 Unit Tests - Package"
        - $PATH_SCRIPTS_DIR/run_tests.sh "$PACKAGE_NAME" "$PYPI_INDEX_TO_USE"

    - stage: run package tests
      name: Python 3.6 Unit Tests - Package
      python: 3.6
      env:
        - RUN_TYPE=unit_test_package TOXENV=py36
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.6 Unit Tests - Package"
        - $PATH_SCRIPTS_DIR/run_tests.sh "$PACKAGE_NAME" "$PYPI_INDEX_TO_USE"

    - stage: run package tests
      name: Python 3.9 Unit Tests - Package
      python: 3.9
      env:
        - RUN_TYPE=unit_test_package TOXENV=py39
      install:
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install -U -r "$PATH_PIP_REQ_TESTS"
      script:
        - echo "Starting Python 3.9 Unit Tests - Package"
        - $PATH_SCRIPTS_DIR/run_tests.sh "$PACKAGE_NAME" "$PYPI_INDEX_TO_USE"

    - stage: sonarqube scan
      name: SonarQube Scan
      language: java
      env: RUN_TYPE=sonarqube
      before_install:
        - wget "$SONAR_SCANNER_CLI_URL/$SONAR_SCANNER_CLI_FILENAME"
        - unzip $SONAR_SCANNER_CLI_FILENAME -d /tmp
        - pip install requests retry2
        - $PATH_SCRIPTS_DIR/download_common_scripts.sh "$PATH_COMMON_SCRIPTS_DIR" "$GH_PATH_COMMON_SCRIPTS_REPO"
        - PACKAGE_NAME=`python $PATH_SCRIPTS_DIR/get_package_name_from_cmt_msg.py "$TRAVIS_COMMIT_MESSAGE"`
      script:
        - echo "Installing and running SonarQube scan"
        - $PATH_COMMON_SCRIPTS_DIR/run_sonar_scanner.sh "$PACKAGE_NAME/$PACKAGE_NAME" "$PATH_COMMON_SCRIPTS_DIR" 1 0

    - stage: build image and app zip
      name: Build Image and App zip
      python: 3.9
      services:
        - docker
      install: skip
      script: skip
      before_deploy:
        - pip install resilient-sdk -i $PYPI_INDEX_TO_USE
        - $PATH_SCRIPTS_DIR/install_ibmcli.sh
      deploy:
        - provider: script
          skip_cleanup: true
          script: $PATH_SCRIPTS_DIR/build_image_and_app_zip.sh "$PACKAGE_NAME" "DEV" "$PYPI_INDEX_TO_USE" "UPLOAD";
          on:
            all_branches: true
            condition: "$UPLOAD_APP_TO_APPHOST = 1"
        - provider: script
          skip_cleanup: true
          script: $PATH_SCRIPTS_DIR/build_image_and_app_zip.sh "$PACKAGE_NAME" "DEV" "$PYPI_INDEX_TO_USE" "DON'T UPLOAD";
          on:
            all_branches: true
            condition: "$BUILD_DEV_APP = 1"
        - provider: script
          skip_cleanup: true
          script: $PATH_SCRIPTS_DIR/build_image_and_app_zip.sh "$PACKAGE_NAME" "MAIN" "$PYPI_INDEX_TO_USE" "DON'T UPLOAD";
          on:
            branch: master
      after_deploy:
        - PATH_APP_ZIP=`cat "$TRAVIS_BUILD_DIR/PATH_APP_ZIP.txt"`;
        - echo "PATH_APP_ZIP=$PATH_APP_ZIP";
        - FILE_NAME=$(basename $PATH_APP_ZIP);
        - if [[ $UPLOAD_APP_TO_APPHOST != 1 ]]; then $PATH_COMMON_SCRIPTS_DIR/send_slack_notification.sh "Built $BUILD_TYPE version of [$PACKAGE_NAME] \n Artifactory App.zip - <$PATH_APP_ZIP|$FILE_NAME>" "success"; fi
        - if [[ $UPLOAD_APP_TO_APPHOST == 1 ]]; then $PATH_COMMON_SCRIPTS_DIR/send_slack_notification.sh "Built $BUILD_TYPE version of [$PACKAGE_NAME] \n Artifactory App.zip - <$PATH_APP_ZIP|$FILE_NAME> \n [$PACKAGE_NAME] can be found at <https://${FYRE_CLUSTER_DOMAIN}/#admin?tab=apps| ${FYRE_CLUSTER_DOMAIN}> if successfully deployed." "success"; fi

    - stage: rebuild all images
      python: 3.9
      services:
        - docker
      install:
        - sudo apt-get update
        - pip install -U -r "$PATH_PIP_REQ_MAIN"
        - pip install resilient-sdk
        - sudo apt-get install jq
        - $PATH_SCRIPTS_DIR/install_ibmcli.sh
      script:
        # This will take split the git tag on '/'
        # E.g.:
        #  - to rebuild ALL images and push back to Quay; tag with 'rebuild/42.1.2116/ALL/QUAY' and commit message 'INT-0001 {rebuild} <reason>'
        #  - to rebuild single image on Artifactory; tag with 'rebuild/42.1.2116/fn_utilities/ARTIFACTORY' and commit message 'INT-0001 {fn_utilities} <reason>'
        #  - to rebuild ALL images and push to ICR; tag with 'rebuild/42.1.2116/ALL/ICR' and commit message 'INT-0001 {rebuild} <reason>'
        #  - to rebuild ALL images and push to ALL; tag with 'rebuild/42.1.2116/ALL/ALL' and commit message 'INT-0001 {rebuild} <reason>'
        - PYTHON_LIBRARIES_VERSION=$(echo $TRAVIS_TAG | cut -d "/" -f 2)
        - IMAGE_TO_REBUILD=$(echo $TRAVIS_TAG | cut -d "/" -f 3)
        - REPO_TO_PUSH=$(echo $TRAVIS_TAG | cut -d "/" -f 4)
        - $PATH_SCRIPTS_DIR/rebuild_images.sh "$PYTHON_LIBRARIES_VERSION" "$IMAGE_TO_REBUILD" "$REPO_TO_PUSH"

    - stage: sync all images
      python: 3.9
      services:
        - docker
      install:
        - sudo apt-get update
        - sudo apt-get install jq
        - $PATH_SCRIPTS_DIR/install_ibmcli.sh
      script:
        # This will take split the git tag on '/'. The Date is optional but recommended so that syncs can be tracked
        # E.g.:
        #  - to sync ALL images from ICR to QUAY: tag with 'sync/ICR/QUAY/<DATE>' and commit message 'INT-0001 {sync} ICR to QUAY <reason>'
        #  - to sync ALL images from QUAY to ICR: tag with 'sync/QUAY/ICR/<DATE>' and commit message 'INT-0001 {sync} QUAY to ICR <reason>'
        - SOURCE_REPO=$(echo $TRAVIS_TAG | cut -d "/" -f 2)
        - DEST_REPO=$(echo $TRAVIS_TAG | cut -d "/" -f 3)
        - $PATH_SCRIPTS_DIR/sync_registries.sh "$SOURCE_REPO" "$DEST_REPO"
