# (c) Copyright IBM Corp. 2010, 2019. All Rights Reserved.
# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_phish_tank"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_phish_tank package"""
    reload_params = {"package": u"fn_phish_tank",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"phish_tank_check_url"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_phish_tank"], 
                    "functions": [u"fn_phish_tank_submit_url"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_phishtank_submit_url"], 
                    "actions": [u"Example: PhishTank: Submit URL"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     phish_tank_check_url
    #   Message Destinations:
    #     fn_phish_tank
    #   Functions:
    #     fn_phish_tank_submit_url
    #   Workflows:
    #     example_phishtank_submit_url
    #   Rules:
    #     Example: PhishTank: Submit URL


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjMxMGVkMmZiLWRkYzEt
NDk3OS1iNjJlLTRjNjQzNWZjOWJjNSIsICJkZXNjcmlwdGlvbiI6ICJDaGVjayBVUkwncyBhZ2Fp
bnN0IFBoaXNoVGFua3MoaHR0cHM6Ly93d3cucGhpc2h0YW5rLmNvbS8pIERhdGEgYmFzZSB0byBz
ZWUgVVJMIGlzIGZsYWdnZWQgYXMgcGhpc2hpbmcgb3Igbm90IHBoaXNoaW5nLiBhbmQgdGhlbiB1
cGRhdGUgdGhlIHBoaXNoaW5nIHN0YXR1cyBvbiBhcnRpZmFjdCBkZXNjcmlwdGlvbiBmaWVsZC4i
LCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3BoaXNo
dGFua19zdWJtaXRfdXJsIiwgIndvcmtmbG93X2lkIjogODksICJsYXN0X21vZGlmaWVkX2J5Ijog
Im5rYW5kaGExQGluLmlibS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmxcIiBpc0V4
ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IFBoaXNoVGFuazogU3VibWl0IFVSTFwi
Pjxkb2N1bWVudGF0aW9uPjwhW0NEQVRBW0NoZWNrIFVSTCdzIGFnYWluc3QgUGhpc2hUYW5rcyho
dHRwczovL3d3dy5waGlzaHRhbmsuY29tLykgRGF0YSBiYXNlIHRvIHNlZSBVUkwgaXMgZmxhZ2dl
ZCBhcyBwaGlzaGluZyBvciBub3QgcGhpc2hpbmcuIGFuZCB0aGVuIHVwZGF0ZSB0aGUgcGhpc2hp
bmcgc3RhdHVzIG9uIGFydGlmYWN0IGRlc2NyaXB0aW9uIGZpZWxkLl1dPjwvZG9jdW1lbnRhdGlv
bj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5j
ZUZsb3dfMW1pbjdvMzwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNl
cnZpY2VUYXNrXzE1dGU0d2pcIiBuYW1lPVwiUGhpc2ggVGFuayBTdWJtaXQgVVJMXCIgcmVzaWxp
ZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0
aW9uIHV1aWQ9XCI1YjllNjcxNy04YzlkLTRmZDMtYmVmMy00NmZhZTA4OWYxYjFcIj57XCJpbnB1
dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMgUGFyc2luZyB0aGUgcmVzdWx0
IHJldHVybmVkIGZyb20gZnVuY3Rpb24gZm5fcGhpc2hfdGFua1xcbmNvbnRlbnRfZGljdGlvbmFy
eSA9IHJlc3VsdHMuZ2V0KCdjb250ZW50JylcXG5yZXN1bHRfZGljdGlvbmFyeSA9IGNvbnRlbnRf
ZGljdGlvbmFyeS5nZXQoJ3Jlc3VsdHMnKVxcblVSTCA9IHJlc3VsdF9kaWN0aW9uYXJ5LmdldCgn
dXJsJylcXG5yaWNoX3RleHRfdG1wID0gXFxcIiZsdDtiJmd0O1VSTDoge30mbHQ7L2ImZ3Q7XFxc
Ii5mb3JtYXQoVVJMKVxcbmlmIHJlc3VsdF9kaWN0aW9uYXJ5LmdldCgnaW5fZGF0YWJhc2UnKTpc
XG4gICAgIGlmIHJlc3VsdF9kaWN0aW9uYXJ5LmdldCgndmFsaWQnKTpcXG4gICAgICAgICAgcmlj
aF90ZXh0X3RtcCArPSBcXFwiJmx0O3Agc3R5bGU9J2NvbG9yOnJlZDsnJmd0OyZsdDtiJmd0O1ZB
TElEIFBISVNIJmx0Oy9iJmd0O1xcXCJcXG4gICAgICAgICAgcGhpc2hfaWQgPSByZXN1bHRfZGlj
dGlvbmFyeS5nZXQoJ3BoaXNoX2lkJylcXG4gICAgICAgICAgZGV0YWlsc19wYWdlID0gcmVzdWx0
X2RpY3Rpb25hcnkuZ2V0KCdwaGlzaF9kZXRhaWxfcGFnZScpXFxuICAgICAgICAgIHZlcmlmaWVk
X2F0ID0gcmVzdWx0X2RpY3Rpb25hcnkuZ2V0KCd2ZXJpZmllZF9hdCcpXFxuICAgICAgICAgIHJp
Y2hfdGV4dF90bXAgKz0gXFxcIiZsdDticiZndDtQaGlzaCBJRDogezB9Jmx0Oy9iciZndDsmbHQ7
YnImZ3Q7UGhpc2ggRGV0YWlsIFBhZ2U6ICZsdDthIGhyZWY9J3sxfScmZ3Q7ezF9Jmx0Oy9hJmd0
OyZsdDsvYnImZ3Q7Jmx0O2JyJmd0OyBWZXJpZmllZCBhdDogezJ9Jmx0O2JyLyZndDsmbHQ7L3Am
Z3Q7XFxcIi5mb3JtYXQocGhpc2hfaWQsIGRldGFpbHNfcGFnZSwgc3RyKHZlcmlmaWVkX2F0KSlc
XG4gICAgIGVsc2U6XFxuICAgICAgICAgIHJpY2hfdGV4dF90bXAgKz0gXFxcIiZsdDtwIHN0eWxl
PSdjb2xvcjpncmVlbjsnJmd0OyZsdDtiJmd0O05PVCBQSElTSCZsdDsvYiZndDsmbHQ7L3AmZ3Q7
XFxcIlxcbmVsc2U6XFxuICAgICByaWNoX3RleHRfdG1wICs9IFxcXCImbHQ7cCBzdHlsZT0nY29s
b3I6Z3JlZW47JyZndDsmbHQ7YiZndDtOb3QgZm91bmQgaW4gcGhpc2hUYW5rIERhdGFiYXNlLiZs
dDsvYiZndDsmbHQ7L3AmZ3Q7XFxcIlxcbnJpY2hfdGV4dCA9IGhlbHBlci5jcmVhdGVSaWNoVGV4
dChyaWNoX3RleHRfdG1wKVxcbmluY2lkZW50LmFkZE5vdGUocmljaF90ZXh0KVxcbmFydGlmYWN0
LmRlc2NyaXB0aW9uID0gcmljaF90ZXh0XFxuXFxuXFxuXFxuXCIsXCJwcmVfcHJvY2Vzc2luZ19z
Y3JpcHRcIjpcImlucHV0cy5waGlzaF90YW5rX2NoZWNrX3VybCA9IGFydGlmYWN0LnZhbHVlXCJ9
PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVu
Y2VGbG93XzFtaW43bzM8L2luY29taW5nPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMHd0ejk4aTwv
b3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzFt
aW43bzNcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2
aWNlVGFza18xNXRlNHdqXCIvPjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50XzA2eGo1ZGxcIj48aW5j
b21pbmc+U2VxdWVuY2VGbG93XzB3dHo5OGk8L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNl
RmxvdyBpZD1cIlNlcXVlbmNlRmxvd18wd3R6OThpXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tf
MTV0ZTR3alwiIHRhcmdldFJlZj1cIkVuZEV2ZW50XzA2eGo1ZGxcIi8+PHRleHRBbm5vdGF0aW9u
IGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cg
aGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9u
XzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJU
ZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0
aW9uXzBvd28yYXRcIj48dGV4dD48IVtDREFUQVtDaGVjayBVUkwncyBQaGlzaGluZyBzdGF0dXMg
ZnJvbSBQaGlzaFRhbmsoaHR0cHM6Ly93d3cucGhpc2h0YW5rLmNvbS8pIGRhdGEgYmFzZSwgYW5k
IHVwZGF0ZSB0aGUgcGhpc2hpbmcgc3RhdHVzIG9uIGFydGlmYWN0IGRlc2NyaXB0aW9uIGZpZWxk
Ll1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9u
XzE1Mmh1ZGhcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xNXRlNHdqXCIgdGFyZ2V0UmVmPVwi
VGV4dEFubm90YXRpb25fMG93bzJhdFwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBp
ZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVm
aW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1c
IlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48
YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIg
eD1cIjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFw
ZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRc
IiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFw
ZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlk
PVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNp
OnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNc
IiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48
YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzE1dGU0d2pcIiBpZD1c
IlNlcnZpY2VUYXNrXzE1dGU0d2pfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lk
dGg9XCIxMDBcIiB4PVwiMzE5XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5k
aTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xbWluN28zXCIgaWQ9XCJTZXF1
ZW5jZUZsb3dfMW1pbjdvM19kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9
XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIzMTlcIiB4c2k6
dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjI1OC41XCIgeT1cIjE4NFwiLz48
L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBt
bkVsZW1lbnQ9XCJFbmRFdmVudF8wNnhqNWRsXCIgaWQ9XCJFbmRFdmVudF8wNnhqNWRsX2RpXCI+
PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiNTk4Ljc2MzI2NTMw
NjEyMjRcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0
PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNjE2Ljc2MzI2NTMwNjEyMjRcIiB5PVwiMjI3XCIvPjwv
YnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1u
RWxlbWVudD1cIlNlcXVlbmNlRmxvd18wd3R6OThpXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHd0ejk4
aV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNDE5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI1OTlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBv
aW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjEzXCIgd2lkdGg9XCIwXCIgeD1cIjUwOVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVs
PjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFu
bm90YXRpb25fMG93bzJhdFwiIGlkPVwiVGV4dEFubm90YXRpb25fMG93bzJhdF9kaVwiPjxvbWdk
YzpCb3VuZHMgaGVpZ2h0PVwiNjJcIiB3aWR0aD1cIjQzMVwiIHg9XCI0NjBcIiB5PVwiNTlcIi8+
PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lh
dGlvbl8xNTJodWRoXCIgaWQ9XCJBc3NvY2lhdGlvbl8xNTJodWRoX2RpXCI+PG9tZ2RpOndheXBv
aW50IHg9XCI0MTlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE4N1wiLz48b21nZGk6
d2F5cG9pbnQgeD1cIjU5NlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTIxXCIvPjwv
YnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48
L2RlZmluaXRpb25zPiIsICJ3b3JrZmxvd19pZCI6ICJleGFtcGxlX3BoaXNodGFua19zdWJtaXRf
dXJsIiwgInZlcnNpb24iOiA4MH0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTU2MDEzNDAzNjk5
LCAiY3JlYXRvcl9pZCI6ICJua2FuZGhhMUBpbi5pYm0uY29tIiwgImFjdGlvbnMiOiBbXSwgInBy
b2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmwiLCAibmFtZSI6
ICJFeGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkwifV0sICJhY3Rpb25zIjogW3sibG9naWNf
dHlwZSI6ICJhbGwiLCAibmFtZSI6ICJFeGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkwiLCAi
dmlld19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3b3JrZmxvd3MiOiBbImV4YW1wbGVfcGhpc2h0
YW5rX3N1Ym1pdF91cmwiXSwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgInRpbWVvdXRfc2Vj
b25kcyI6IDg2NDAwLCAidXVpZCI6ICJlODQ1ZTUxNS0wM2ZkLTQ2ZGMtODE1MC02ODUxZDE5ZjQ2
OGEiLCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogUGhpc2hUYW5r
OiBTdWJtaXQgVVJMIiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25f
aWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC50eXBlIiwgIm1ldGhvZCI6ICJlcXVh
bHMiLCAidmFsdWUiOiAiVVJMIn1dLCAiaWQiOiAxMDQsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6
IFtdfV0sICJsYXlvdXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiAx
MDIsICJpbmR1c3RyaWVzIjogbnVsbCwgInBoYXNlcyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10s
ICJnZW9zIjogbnVsbCwgImxvY2FsZSI6IG51bGwsICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3Ii
OiAzMSwgInZlcnNpb24iOiAiMzEuMS43NiIsICJidWlsZF9udW1iZXIiOiA3NiwgIm1pbm9yIjog
MX0sICJ0aW1lZnJhbWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwgImF1dG9tYXRpY190YXNr
cyI6IFtdLCAiZnVuY3Rpb25zIjogW3siZGlzcGxheV9uYW1lIjogIlBoaXNoIFRhbmsgU3VibWl0
IFVSTCIsICJkZXNjcmlwdGlvbiI6IHsiY29udGVudCI6ICJGdW5jdGlvbiB0byBjaGVjayBVUkxz
IGFnYWluc3QgUGhpc2hUYW5rcyhodHRwczovL3d3dy5waGlzaHRhbmsuY29tLykgRGF0YWJhc2Ug
dG8gc2VlIFVSTCBpcyBmbGFnZ2VkIGFzIHBoaXNoaW5nIG9yIG5vdCBwaGlzaGluZy4iLCAiZm9y
bWF0IjogInRleHQifSwgImNyZWF0b3IiOiB7ImRpc3BsYXlfbmFtZSI6ICJOaXRpbiBLYW5kaGFy
ZSAiLCAidHlwZSI6ICJ1c2VyIiwgImlkIjogNiwgIm5hbWUiOiAibmthbmRoYTFAaW4uaWJtLmNv
bSJ9LCAidmlld19pdGVtcyI6IFt7InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6ICJfX2Z1
bmN0aW9uIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRfdXVp
ZCIsICJjb250ZW50IjogImUzYzllNDQ2LTkzNWMtNGQ3ZC05YmMwLTk5YWRkNjkzMjA5OSIsICJz
dGVwX2xhYmVsIjogbnVsbH1dLCAiZXhwb3J0X2tleSI6ICJmbl9waGlzaF90YW5rX3N1Ym1pdF91
cmwiLCAidXVpZCI6ICI1YjllNjcxNy04YzlkLTRmZDMtYmVmMy00NmZhZTA4OWYxYjEiLCAibGFz
dF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIk5pdGluIEthbmRoYXJlICIsICJ0eXBl
IjogInVzZXIiLCAiaWQiOiA2LCAibmFtZSI6ICJua2FuZGhhMUBpbi5pYm0uY29tIn0sICJ2ZXJz
aW9uIjogNiwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0aW9uIjogbnVsbCwgIm9iamVjdF90eXBl
IjogImFydGlmYWN0IiwgImFjdGlvbnMiOiBbXSwgIm5hbWUiOiAiRXhhbXBsZTogUGhpc2hUYW5r
OiBTdWJtaXQgVVJMIiwgIndvcmtmbG93X2lkIjogODksICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJl
eGFtcGxlX3BoaXNodGFua19zdWJtaXRfdXJsIiwgInV1aWQiOiBudWxsfV0sICJsYXN0X21vZGlm
aWVkX3RpbWUiOiAxNTU2MDEzMjE3MjEzLCAiZGVzdGluYXRpb25faGFuZGxlIjogImZuX3BoaXNo
X3RhbmsiLCAiaWQiOiA0OCwgIm5hbWUiOiAiZm5fcGhpc2hfdGFua19zdWJtaXRfdXJsIn1dLCAi
bm90aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVz
IjogW3siY3JlYXRlX2RhdGUiOiAxNTU2MDEzNTc1MzQ0LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9t
aXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlv
biBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQ
YWNrYWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRlIjogMTU1NjAxMzU3NTM0NCwgInV1aWQi
OiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxz
ZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0s
ICJzY3JpcHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1
dWlkIjogImQ5Y2I1OTYyLWU1NDItNDcyMy04YmYyLThmZDc1MTlmZTM5OCIsICJleHBvcnRfa2V5
IjogImZuX3BoaXNoX3RhbmsiLCAibmFtZSI6ICJmbl9waGlzaF90YW5rIiwgImRlc3RpbmF0aW9u
X3R5cGUiOiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZm5fcGhpc2hfdGFuayIsICJleHBlY3Rf
YWNrIjogdHJ1ZSwgInVzZXJzIjogWyJua2FuZGhhMUBpbi5pYm0uY29tIl19XSwgImluY2lkZW50
X2FydGlmYWN0X3R5cGVzIjogW10sICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9u
cyI6IFtdLCAidHlwZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiU2lt
dWxhdGlvbiIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2Vh
YmxlIjogdHJ1ZSwgImlkIjogNTEsICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2YwZTNl
ZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90
eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNp
bXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHku
IiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtd
LCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwg
ImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJh
dGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6
ICJwaGlzaF90YW5rX2NoZWNrX3VybCIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6
IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjg5LCAicmVhZF9vbmx5IjogZmFsc2Us
ICJ1dWlkIjogImUzYzllNDQ2LTkzNWMtNGQ3ZC05YmMwLTk5YWRkNjkzMjA5OSIsICJjaG9zZW4i
OiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjogIlVSTCB0byBiZSBjaGVj
a2VkIGZvciBwaGlzaGluZyBzdGF0dXMuIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQi
OiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL3BoaXNo
X3RhbmtfY2hlY2tfdXJsIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRl
ciI6ICIiLCAibmFtZSI6ICJwaGlzaF90YW5rX2NoZWNrX3VybCIsICJkZXByZWNhdGVkIjogZmFs
c2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJv
dmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjogMTU1NjAxMzQ5NTY4Nn0=
"""
    )