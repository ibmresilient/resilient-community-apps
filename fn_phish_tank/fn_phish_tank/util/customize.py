# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_phish_tank"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_phish_tank package"""
    reload_params = {"package": u"fn_phish_tank",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"phish_tank_check_url"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_phish_tank"], 
                    "functions": [u"fn_phish_tank_submit_url"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_phishtank_submit_url"], 
                    "actions": [u"Example: PhishTank: Submit URL"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     phish_tank_check_url
    #   Message Destinations:
    #     fn_phish_tank
    #   Functions:
    #     fn_phish_tank_submit_url
    #   Workflows:
    #     example_phishtank_submit_url
    #   Rules:
    #     Example: PhishTank: Submit URL


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjMxMGVkMmZiLWRkYzEt
NDk3OS1iNjJlLTRjNjQzNWZjOWJjNSIsICJkZXNjcmlwdGlvbiI6ICJDaGVjayBVUkwncyBhZ2Fp
bnN0IFBoaXNoVGFua3MoaHR0cHM6Ly93d3cucGhpc2h0YW5rLmNvbS8pIERhdGEgYmFzZSB0byBz
ZWUgVVJMIGlzIGZsYWdnZWQgYXMgcGhpc2hpbmcgb3Igbm90IHBoaXNoaW5nLiBhbmQgdGhlbiB1
cGRhdGUgdGhlIHBoaXNoaW5nIHN0YXR1cyBvbiBhcnRpZmFjdCBkZXNjcmlwdGlvbiBmaWVsZC4i
LCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3BoaXNo
dGFua19zdWJtaXRfdXJsIiwgIndvcmtmbG93X2lkIjogMjIsICJsYXN0X21vZGlmaWVkX2J5Ijog
ImFkbWluQGV4YW1wbGUuY29tIiwgImNvbnRlbnQiOiB7InhtbCI6ICI8P3htbCB2ZXJzaW9uPVwi
MS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3
Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDov
L3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8y
MDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2No
ZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90
ZXN0XCI+PHByb2Nlc3MgaWQ9XCJleGFtcGxlX3BoaXNodGFua19zdWJtaXRfdXJsXCIgaXNFeGVj
dXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkxcIj48
ZG9jdW1lbnRhdGlvbj48IVtDREFUQVtDaGVjayBVUkwncyBhZ2FpbnN0IFBoaXNoVGFua3MoaHR0
cHM6Ly93d3cucGhpc2h0YW5rLmNvbS8pIERhdGEgYmFzZSB0byBzZWUgVVJMIGlzIGZsYWdnZWQg
YXMgcGhpc2hpbmcgb3Igbm90IHBoaXNoaW5nLiBhbmQgdGhlbiB1cGRhdGUgdGhlIHBoaXNoaW5n
IHN0YXR1cyBvbiBhcnRpZmFjdCBkZXNjcmlwdGlvbiBmaWVsZC5dXT48L2RvY3VtZW50YXRpb24+
PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VG
bG93XzFtaW43bzM8L291dGdvaW5nPjwvc3RhcnRFdmVudD48c2VydmljZVRhc2sgaWQ9XCJTZXJ2
aWNlVGFza18xNXRlNHdqXCIgbmFtZT1cIlBoaXNoIFRhbmsgU3VibWl0IFVSTFwiIHJlc2lsaWVu
dDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5jdGlv
biB1dWlkPVwiNWI5ZTY3MTctOGM5ZC00ZmQzLWJlZjMtNDZmYWUwODlmMWIxXCI+e1wiaW5wdXRz
XCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJkZWYgYXBwZW5kX2FydGlmYWN0X2Rl
c2NyaXB0aW9uKHRoZV9hcnRpZmFjdCwgdGhlX3RleHQpOlxcbiAgXFxuICBuZXdfZGVzY3JpcHRp
b24gPSB1XFxcIlxcXCJcXG4gIFxcbiAgaWYgdGhlX2FydGlmYWN0LmRlc2NyaXB0aW9uIGlzIE5v
bmU6XFxuICAgIGN1cnJlbnRfZGVzY3JpcHRpb24gPSBOb25lXFxuICBlbHNlOlxcbiAgICBjdXJy
ZW50X2Rlc2NyaXB0aW9uID0gdGhlX2FydGlmYWN0LmRlc2NyaXB0aW9uLmdldChcXFwiY29udGVu
dFxcXCIsIE5vbmUpXFxuXFxuICBpZiBjdXJyZW50X2Rlc2NyaXB0aW9uIGlzIG5vdCBOb25lOlxc
biAgICBuZXdfZGVzY3JpcHRpb24gPSB1XFxcInswfSZsdDticiZndDstLS0mbHQ7YnImZ3Q7ezF9
XFxcIi5mb3JtYXQodW5pY29kZShjdXJyZW50X2Rlc2NyaXB0aW9uKSwgdW5pY29kZSh0aGVfdGV4
dCkpXFxuXFxuICBlbHNlOlxcbiAgICBuZXdfZGVzY3JpcHRpb24gPSB1XFxcInswfVxcXCIuZm9y
bWF0KHVuaWNvZGUodGhlX3RleHQpKVxcblxcbiAgdGhlX2FydGlmYWN0LmRlc2NyaXB0aW9uID0g
aGVscGVyLmNyZWF0ZVJpY2hUZXh0KG5ld19kZXNjcmlwdGlvbilcXG5cXG5cXG5pZiByZXN1bHRz
LnN1Y2Nlc3M6XFxuICBcXG4gIHBoaXNoX3RhbmtfcmVzdWx0cyA9IHJlc3VsdHMuY29udGVudC5n
ZXQoXFxcInJlc3VsdHNcXFwiLCB7fSlcXG4gIHVybCA9IHBoaXNoX3RhbmtfcmVzdWx0cy5nZXQo
XFxcInVybFxcXCIsIHVcXFwiXFxcIilcXG4gIGluX2RhdGFiYXNlID0gcGhpc2hfdGFua19yZXN1
bHRzLmdldChcXFwiaW5fZGF0YWJhc2VcXFwiLCBGYWxzZSlcXG4gIGlzX3ZlcmlmaWVkID0gcGhp
c2hfdGFua19yZXN1bHRzLmdldChcXFwidmVyaWZpZWRcXFwiLCBGYWxzZSlcXG4gIGlzX3ZhbGlk
ID0gcGhpc2hfdGFua19yZXN1bHRzLmdldChcXFwidmFsaWRcXFwiLCBGYWxzZSlcXG5cXG4gIG1z
ZyA9IHVcXFwiXFxcIlxcXCImbHQ7YiZndDtQaGlzaFRhbmsgTG9va3VwJmx0Oy9iJmd0OyBoYXMg
Y29tcGxldGVcXG4gICAgICAgICAgICAmbHQ7YnImZ3Q7Jmx0O2ImZ3Q7VVJMOiZsdDsvYiZndDsg
ezB9Jmx0Oy9iJmd0O1xcbiAgICAgICAgICAgICZsdDticiZndDsmbHQ7YiZndDtGb3VuZCBpbiBE
YXRhYmFzZTombHQ7L2ImZ3Q7IHsxfVxcXCJcXFwiXFxcIi5mb3JtYXQodXJsLCB1bmljb2RlKGlu
X2RhdGFiYXNlKSlcXG5cXG4gIGNvbW1lbnQgPSB1XFxcIlxcXCJcXG5cXG4gIGlmIG5vdCBpbl9k
YXRhYmFzZTpcXG4gICAgY29tbWVudCA9IHVcXFwiTm90aGluZyBrbm93biBhYm91dCB0aGlzIHVy
bFxcXCJcXG4gIFxcbiAgZWxzZTpcXG4gICAgcGhpc2hfaWQgPSBwaGlzaF90YW5rX3Jlc3VsdHMu
Z2V0KFxcXCJwaGlzaF9pZFxcXCIpXFxuICAgIHBoaXNoX2RldGFpbF9wYWdlX3VybCA9IHBoaXNo
X3RhbmtfcmVzdWx0cy5nZXQoXFxcInBoaXNoX2RldGFpbF9wYWdlXFxcIilcXG4gICAgXFxuICAg
IG1zZyA9IHVcXFwiXFxcIlxcXCJ7MH1cXG4gICAgICAgICAgJmx0O2JyJmd0OyZsdDtiJmd0O1Bo
aXNoIElEOiZsdDsvYiZndDsgezF9XFxuICAgICAgICAgICZsdDticiZndDsmbHQ7YiZndDtWYWxp
ZCBQaGlzaDombHQ7L2ImZ3Q7IHsyfVxcbiAgICAgICAgICAmbHQ7YnImZ3Q7Jmx0O2ImZ3Q7VmVy
aWZpZWQ6Jmx0Oy9iJmd0OyB7M31cXG4gICAgICAgICAgJmx0O2JyJmd0OyZsdDtiJmd0O0xpbmsg
dG8gUGhpc2hUYW5rOiAmbHQ7YSBocmVmPXs0fSZndDt7NH0mbHQ7L2EmZ3Q7Jmx0Oy9iJmd0O1xc
XCJcXFwiXFxcIi5mb3JtYXQobXNnLCBwaGlzaF9pZCwgdVxcXCJZZXNcXFwiIGlmIGlzX3ZhbGlk
IGVsc2UgdVxcXCJOb1xcXCIsIHVcXFwiWWVzXFxcIiBpZiBpc192ZXJpZmllZCBlbHNlIFxcXCJO
b1xcXCIsIHBoaXNoX2RldGFpbF9wYWdlX3VybClcXG4gICAgXFxuICAgIGlmIGlzX3ZlcmlmaWVk
IGFuZCBpc192YWxpZDpcXG4gICAgICBjb21tZW50ID0gdVxcXCJWZXJpZmllZDogSXMgYSBwaGlz
aGluZyBzaXRlXFxcIlxcbiAgXFxuICAgIGVsaWYgaXNfdmVyaWZpZWQgYW5kIG5vdCBpc192YWxp
ZDpcXG4gICAgICBjb21tZW50ID0gdVxcXCJUaGlzIHNpdGUgaXMgbm90IGEgcGhpc2hpbmcgc2l0
ZVxcXCJcXG4gICAgICBcXG4gICAgZWxpZiBub3QgaXNfdmVyaWZpZWQ6XFxuICAgICAgY29tbWVu
dCA9IHVcXFwiVGhpcyB1cmwgaGFzIG5vdCBiZWVuIHZlcmlmaWVkXFxcIlxcbiAgXFxuICBtc2cg
PSB1XFxcIlxcXCJcXFwiezB9Jmx0O2JyJmd0OyZsdDticiZndDsmbHQ7YiZndDtDb21tZW50OiZs
dDsvYiZndDsgezF9XFxcIlxcXCJcXFwiLmZvcm1hdChtc2csIGNvbW1lbnQpXFxuICBcXG4gIGFw
cGVuZF9hcnRpZmFjdF9kZXNjcmlwdGlvbihhcnRpZmFjdCwgbXNnKVxcbiAgaW5jaWRlbnQuYWRk
Tm90ZShoZWxwZXIuY3JlYXRlUmljaFRleHQobXNnKSlcIixcInByZV9wcm9jZXNzaW5nX3Njcmlw
dFwiOlwiaW5wdXRzLnBoaXNoX3RhbmtfY2hlY2tfdXJsID0gYXJ0aWZhY3QudmFsdWVcIn08L3Jl
c2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZs
b3dfMW1pbjdvMzwvaW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wd3R6OThpPC9vdXRn
b2luZz48L3NlcnZpY2VUYXNrPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMW1pbjdv
M1wiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VU
YXNrXzE1dGU0d2pcIi8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMDZ4ajVkbFwiPjxpbmNvbWlu
Zz5TZXF1ZW5jZUZsb3dfMHd0ejk4aTwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93
IGlkPVwiU2VxdWVuY2VGbG93XzB3dHo5OGlcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xNXRl
NHdqXCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRfMDZ4ajVkbFwiLz48dGV4dEFubm90YXRpb24gaWQ9
XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJl
PC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNl
dWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRB
bm5vdGF0aW9uXzFreHhpeXRcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25f
MG93bzJhdFwiPjx0ZXh0PjwhW0NEQVRBW0NoZWNrIFVSTCdzIFBoaXNoaW5nIHN0YXR1cyBmcm9t
IFBoaXNoVGFuayhodHRwczovL3d3dy5waGlzaHRhbmsuY29tLykgZGF0YSBiYXNlLCBhbmQgdXBk
YXRlIHRoZSBwaGlzaGluZyBzdGF0dXMgb24gYXJ0aWZhY3QgZGVzY3JpcHRpb24gZmllbGQuXV0+
PC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMTUy
aHVkaFwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzE1dGU0d2pcIiB0YXJnZXRSZWY9XCJUZXh0
QW5ub3RhdGlvbl8wb3dvMmF0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwi
QlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVk
XCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3Rh
cnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1u
ZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwi
MTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiIGlk
PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBc
IiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJB
c3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6dHlw
ZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhz
aTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1u
ZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMTV0ZTR3alwiIGlkPVwiU2Vy
dmljZVRhc2tfMTV0ZTR3al9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1c
IjEwMFwiIHg9XCIzMTlcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQ
TU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzFtaW43bzNcIiBpZD1cIlNlcXVlbmNl
Rmxvd18xbWluN28zX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjMxOVwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiMjU4LjVcIiB5PVwiMTg0XCIvPjwvYnBt
bmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxl
bWVudD1cIkVuZEV2ZW50XzA2eGo1ZGxcIiBpZD1cIkVuZEV2ZW50XzA2eGo1ZGxfZGlcIj48b21n
ZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI1OTguNzYzMjY1MzA2MTIy
NFwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIx
M1wiIHdpZHRoPVwiMFwiIHg9XCI2MTYuNzYzMjY1MzA2MTIyNFwiIHk9XCIyMjdcIi8+PC9icG1u
ZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVt
ZW50PVwiU2VxdWVuY2VGbG93XzB3dHo5OGlcIiBpZD1cIlNlcXVlbmNlRmxvd18wd3R6OThpX2Rp
XCI+PG9tZ2RpOndheXBvaW50IHg9XCI0MTlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjU5OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNc
IiB3aWR0aD1cIjBcIiB4PVwiNTA5XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9i
cG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3Rh
dGlvbl8wb3dvMmF0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8wb3dvMmF0X2RpXCI+PG9tZ2RjOkJv
dW5kcyBoZWlnaHQ9XCI2MlwiIHdpZHRoPVwiNDMxXCIgeD1cIjQ2MFwiIHk9XCI1OVwiLz48L2Jw
bW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9u
XzE1Mmh1ZGhcIiBpZD1cIkFzc29jaWF0aW9uXzE1Mmh1ZGhfZGlcIj48b21nZGk6d2F5cG9pbnQg
eD1cIjQxOVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTg3XCIvPjxvbWdkaTp3YXlw
b2ludCB4PVwiNTk2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxMjFcIi8+PC9icG1u
ZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVm
aW5pdGlvbnM+IiwgIndvcmtmbG93X2lkIjogImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmwi
LCAidmVyc2lvbiI6IDMyfSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NjE0NjA1MDUyNDIsICJj
cmVhdG9yX2lkIjogImludGVncmF0aW9uc0BleGFtcGxlLmNvbSIsICJhY3Rpb25zIjogW10sICJw
cm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3BoaXNodGFua19zdWJtaXRfdXJsIiwgIm5hbWUi
OiAiRXhhbXBsZTogUGhpc2hUYW5rOiBTdWJtaXQgVVJMIn1dLCAiYWN0aW9ucyI6IFt7ImxvZ2lj
X3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiRXhhbXBsZTogUGhpc2hUYW5rOiBTdWJtaXQgVVJMIiwg
InZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjogWyJleGFtcGxlX3BoaXNo
dGFua19zdWJtaXRfdXJsIl0sICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJ0aW1lb3V0X3Nl
Y29uZHMiOiA4NjQwMCwgInV1aWQiOiAiZTg0NWU1MTUtMDNmZC00NmRjLTgxNTAtNjg1MWQxOWY0
NjhhIiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IFBoaXNoVGFu
azogU3VibWl0IFVSTCIsICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9u
X2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAiYXJ0aWZhY3QudHlwZSIsICJtZXRob2QiOiAiZXF1
YWxzIiwgInZhbHVlIjogIlVSTCJ9XSwgImlkIjogMzUsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6
IFtdfV0sICJsYXlvdXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiAy
LCAiaW5kdXN0cmllcyI6IG51bGwsICJwaGFzZXMiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAi
Z2VvcyI6IG51bGwsICJsb2NhbGUiOiBudWxsLCAic2VydmVyX3ZlcnNpb24iOiB7Im1ham9yIjog
MzEsICJ2ZXJzaW9uIjogIjMxLjAuNDI1NCIsICJidWlsZF9udW1iZXIiOiA0MjU0LCAibWlub3Ii
OiAwfSwgInRpbWVmcmFtZXMiOiBudWxsLCAid29ya3NwYWNlcyI6IFtdLCAiYXV0b21hdGljX3Rh
c2tzIjogW10sICJmdW5jdGlvbnMiOiBbeyJkaXNwbGF5X25hbWUiOiAiUGhpc2ggVGFuayBTdWJt
aXQgVVJMIiwgImRlc2NyaXB0aW9uIjogeyJjb250ZW50IjogIkZ1bmN0aW9uIHRvIGNoZWNrIFVS
THMgYWdhaW5zdCBQaGlzaFRhbmtzKGh0dHBzOi8vd3d3LnBoaXNodGFuay5jb20vKSBEYXRhYmFz
ZSB0byBzZWUgVVJMIGlzIGZsYWdnZWQgYXMgcGhpc2hpbmcgb3Igbm90IHBoaXNoaW5nLiIsICJm
b3JtYXQiOiAidGV4dCJ9LCAiY3JlYXRvciI6IHsiZGlzcGxheV9uYW1lIjogIk9yY2hlc3RyYXRp
b24gRW5naW5lIiwgInR5cGUiOiAidXNlciIsICJpZCI6IDM4LCAibmFtZSI6ICJpbnRlZ3JhdGlv
bnNAZXhhbXBsZS5jb20ifSwgInZpZXdfaXRlbXMiOiBbeyJzaG93X2lmIjogbnVsbCwgImZpZWxk
X3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50
IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICJlM2M5ZTQ0Ni05MzVjLTRkN2QtOWJjMC05OWFk
ZDY5MzIwOTkiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAiZm5fcGhpc2hf
dGFua19zdWJtaXRfdXJsIiwgInV1aWQiOiAiNWI5ZTY3MTctOGM5ZC00ZmQzLWJlZjMtNDZmYWUw
ODlmMWIxIiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7ImRpc3BsYXlfbmFtZSI6ICJPcmNoZXN0cmF0
aW9uIEVuZ2luZSIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiAzOCwgIm5hbWUiOiAiaW50ZWdyYXRp
b25zQGV4YW1wbGUuY29tIn0sICJ2ZXJzaW9uIjogMSwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0
aW9uIjogbnVsbCwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImFjdGlvbnMiOiBbXSwgIm5h
bWUiOiAiRXhhbXBsZTogUGhpc2hUYW5rOiBTdWJtaXQgVVJMIiwgIndvcmtmbG93X2lkIjogMjIs
ICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3BoaXNodGFua19zdWJtaXRfdXJsIiwgInV1
aWQiOiBudWxsfV0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTYwNzY4NTcyNzk4LCAiZGVzdGlu
YXRpb25faGFuZGxlIjogImZuX3BoaXNoX3RhbmsiLCAiaWQiOiA1NSwgIm5hbWUiOiAiZm5fcGhp
c2hfdGFua19zdWJtaXRfdXJsIn1dLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3Jz
IjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAxNTYxNDY0ODU1MzAy
LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4
cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwg
Im5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRl
IjogMTU2MTQ2NDg1NTMwMiwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0
MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjog
bnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVz
c2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjogImQ5Y2I1OTYyLWU1NDItNDcyMy04YmYyLThm
ZDc1MTlmZTM5OCIsICJleHBvcnRfa2V5IjogImZuX3BoaXNoX3RhbmsiLCAibmFtZSI6ICJmbl9w
aGlzaF90YW5rIiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAi
Zm5fcGhpc2hfdGFuayIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJpbnRlZ3JhdGlv
bnNAZXhhbXBsZS5jb20iXX1dLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgInJvbGVz
IjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMCwgIm9wZXJh
dGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJTaW11bGF0aW9uIiwgImJsYW5rX29wdGlvbiI6IGZh
bHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAzOCwgInJlYWRf
b25seSI6IHRydWUsICJ1dWlkIjogImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNj
YSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJ0b29sdGlwIjog
IldoZXRoZXIgdGhlIGluY2lkZW50IGlzIGEgc2ltdWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRl
bnQuICBUaGlzIGZpZWxkIGlzIHJlYWQtb25seS4iLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hf
dGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogImluY2lkZW50L2lu
Y190cmFpbmluZyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAibmFtZSI6ICJpbmNfdHJh
aW5pbmciLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDExLCAi
b3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogInBoaXNoX3RhbmtfY2hlY2tfdXJsIiwgImJs
YW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAi
aWQiOiAyMTQsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiZTNjOWU0NDYtOTM1Yy00ZDdk
LTliYzAtOTlhZGQ2OTMyMDk5IiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0
IiwgInRvb2x0aXAiOiAiVVJMIHRvIGJlIGNoZWNrZWQgZm9yIHBoaXNoaW5nIHN0YXR1cy4iLCAi
aW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJl
eHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vcGhpc2hfdGFua19jaGVja191cmwiLCAiaGlkZV9ub3Rp
ZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJuYW1lIjogInBoaXNoX3Rhbmtf
Y2hlY2tfdXJsIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZl
ciI6IGZhbHNlLCAidmFsdWVzIjogW119XSwgIm92ZXJyaWRlcyI6IFtdLCAiZXhwb3J0X2RhdGUi
OiAxNTYxNDYwNTQzMTkwfQ==
"""
    )