# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_phish_tank"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_phish_tank package"""
    reload_params = {"package": u"fn_phish_tank",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"phish_tank_check_url"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_phish_tank"], 
                    "functions": [u"fn_phish_tank_submitt_url"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_phishtank_submit_url"], 
                    "actions": [u"Example: PhishTank: Submit URL"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     phish_tank_check_url
    #   Message Destinations:
    #     fn_phish_tank
    #   Functions:
    #     fn_phish_tank_submitt_url
    #   Workflows:
    #     example_phishtank_submit_url
    #   Rules:
    #     Example: PhishTank: Submit URL


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjMxMGVkMmZiLWRkYzEt
NDk3OS1iNjJlLTRjNjQzNWZjOWJjNSIsICJkZXNjcmlwdGlvbiI6ICJDaGVjayBVUkwncyBhZ2Fp
bnN0IFBoaXNoVGFua3MoaHR0cHM6Ly93d3cucGhpc2h0YW5rLmNvbS8pIGRhdGEgYmFzZSB0byBz
ZWUgVVJMIGlzIGZsYWdnZWQgYXMgcGhpc2hpbmcgb3Igbm90IHBoaXNoaW5nLCBhbmQgdGhlbiB1
cGRhdGUgdGhlIHBoaXNoaW5nIHN0YXR1cyBvbiBhcnRpZmFjdCBkZXNjcmlwdGlvbiBmaWVsZC4i
LCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3BoaXNo
dGFua19zdWJtaXRfdXJsIiwgIndvcmtmbG93X2lkIjogODksICJsYXN0X21vZGlmaWVkX2J5Ijog
Im5rYW5kaGExQGluLmlibS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmxcIiBpc0V4
ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IFBoaXNoVGFuazogU3VibWl0IFVSTFwi
Pjxkb2N1bWVudGF0aW9uPjwhW0NEQVRBW0NoZWNrIFVSTCdzIGFnYWluc3QgUGhpc2hUYW5rcyho
dHRwczovL3d3dy5waGlzaHRhbmsuY29tLykgZGF0YSBiYXNlIHRvIHNlZSBVUkwgaXMgZmxhZ2dl
ZCBhcyBwaGlzaGluZyBvciBub3QgcGhpc2hpbmcsIGFuZCB0aGVuIHVwZGF0ZSB0aGUgcGhpc2hp
bmcgc3RhdHVzIG9uIGFydGlmYWN0IGRlc2NyaXB0aW9uIGZpZWxkLl1dPjwvZG9jdW1lbnRhdGlv
bj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5j
ZUZsb3dfMW1pbjdvMzwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNl
cnZpY2VUYXNrXzE1dGU0d2pcIiBuYW1lPVwiUGhpc2ggVGFuayBTdWJtaXR0IFVSTFwiIHJlc2ls
aWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5j
dGlvbiB1dWlkPVwiNWI5ZTY3MTctOGM5ZC00ZmQzLWJlZjMtNDZmYWUwODlmMWIxXCI+e1wiaW5w
dXRzXCI6e30sXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImlucHV0cy5waGlzaF90YW5rX2No
ZWNrX3VybCA9IGFydGlmYWN0LnZhbHVlXCJ9PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRlbnNp
b25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzFtaW43bzM8L2luY29taW5nPjxvdXRn
b2luZz5TZXF1ZW5jZUZsb3dfMHd0ejk4aTwvb3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVu
Y2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzFtaW43bzNcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50
XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18xNXRlNHdqXCIvPjxlbmRFdmVudCBp
ZD1cIkVuZEV2ZW50XzA2eGo1ZGxcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzB3dHo5OGk8L2lu
Y29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18wd3R6OThp
XCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMTV0ZTR3alwiIHRhcmdldFJlZj1cIkVuZEV2ZW50
XzA2eGo1ZGxcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwi
Pjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxh
c3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2
ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjx0ZXh0
QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzBvd28yYXRcIj48dGV4dD48IVtDREFUQVtD
aGVjayBVUkwncyBQaGlzaGluZyBzdGF0dXMgZnJvbSBQaGlzaFRhbmsoaHR0cHM6Ly93d3cucGhp
c2h0YW5rLmNvbS8pIGRhdGEgYmFzZSwgYW5kIHVwZGF0ZSB0aGUgcGhpc2hpbmcgc3RhdHVzIG9u
IGFydGlmYWN0IGRlc2NyaXB0aW9uIGZpZWxkLl1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxh
c3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzE1Mmh1ZGhcIiBzb3VyY2VSZWY9XCJTZXJ2aWNl
VGFza18xNXRlNHdqXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMG93bzJhdFwiLz48L3By
b2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQ
TU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBt
bmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3Rh
cnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwi
MzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6
QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVu
dD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRf
ZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5
PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50
PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxv
bWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBc
Ii8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1c
IlNlcnZpY2VUYXNrXzE1dGU0d2pcIiBpZD1cIlNlcnZpY2VUYXNrXzE1dGU0d2pfZGlcIj48b21n
ZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiMzE5XCIgeT1cIjE2Nlwi
Lz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVl
bmNlRmxvd18xbWluN28zXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMW1pbjdvM19kaVwiPjxvbWdkaTp3
YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9t
Z2RpOndheXBvaW50IHg9XCIzMTlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwi
Lz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIw
XCIgeD1cIjI1OC41XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBN
TkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRFdmVudF8wNnhqNWRsXCIg
aWQ9XCJFbmRFdmVudF8wNnhqNWRsX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdp
ZHRoPVwiMzZcIiB4PVwiNTk4Ljc2MzI2NTMwNjEyMjRcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBN
TkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNjE2Ljc2
MzI2NTMwNjEyMjRcIiB5PVwiMjI3XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1O
U2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wd3R6OThp
XCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHd0ejk4aV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNDE5
XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9
XCI1OTlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5M
YWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjUwOVwiIHk9
XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBN
TlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMG93bzJhdFwiIGlkPVwiVGV4dEFu
bm90YXRpb25fMG93bzJhdF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNjJcIiB3aWR0aD1c
IjQzMVwiIHg9XCI0NjBcIiB5PVwiNTlcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBN
TkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xNTJodWRoXCIgaWQ9XCJBc3NvY2lhdGlv
bl8xNTJodWRoX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0MTlcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjE4N1wiLz48b21nZGk6d2F5cG9pbnQgeD1cIjU5NlwiIHhzaTp0eXBlPVwi
b21nZGM6UG9pbnRcIiB5PVwiMTIxXCIvPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5Q
bGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48L2RlZmluaXRpb25zPiIsICJ3b3JrZmxvd19pZCI6
ICJleGFtcGxlX3BoaXNodGFua19zdWJtaXRfdXJsIiwgInZlcnNpb24iOiA0fSwgImxhc3RfbW9k
aWZpZWRfdGltZSI6IDE1NTU0MDY0MDc0NzEsICJjcmVhdG9yX2lkIjogIm5rYW5kaGExQGluLmli
bS5jb20iLCAiYWN0aW9ucyI6IFtdLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9waGlz
aHRhbmtfc3VibWl0X3VybCIsICJuYW1lIjogIkV4YW1wbGU6IFBoaXNoVGFuazogU3VibWl0IFVS
TCJ9XSwgImFjdGlvbnMiOiBbeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkV4YW1wbGU6
IFBoaXNoVGFuazogU3VibWl0IFVSTCIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndv
cmtmbG93cyI6IFsiZXhhbXBsZV9waGlzaHRhbmtfc3VibWl0X3VybCJdLCAib2JqZWN0X3R5cGUi
OiAiYXJ0aWZhY3QiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImU4NDVlNTE1
LTAzZmQtNDZkYy04MTUwLTY4NTFkMTlmNDY4YSIsICJhdXRvbWF0aW9ucyI6IFtdLCAiZXhwb3J0
X2tleSI6ICJFeGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkwiLCAiY29uZGl0aW9ucyI6IFt7
InR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGwsICJmaWVsZF9uYW1lIjogImFydGlm
YWN0LnR5cGUiLCAibWV0aG9kIjogImVxdWFscyIsICJ2YWx1ZSI6ICJVUkwifV0sICJpZCI6IDEw
NCwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW119XSwgImxheW91dHMiOiBbXSwgImV4cG9ydF9m
b3JtYXRfdmVyc2lvbiI6IDIsICJpZCI6IDk4LCAiaW5kdXN0cmllcyI6IG51bGwsICJwaGFzZXMi
OiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAiZ2VvcyI6IG51bGwsICJsb2NhbGUiOiBudWxsLCAi
c2VydmVyX3ZlcnNpb24iOiB7Im1ham9yIjogMzEsICJ2ZXJzaW9uIjogIjMxLjEuNzYiLCAiYnVp
bGRfbnVtYmVyIjogNzYsICJtaW5vciI6IDF9LCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3Bh
Y2VzIjogW10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImRpc3BsYXlf
bmFtZSI6ICJQaGlzaCBUYW5rIFN1Ym1pdHQgVVJMIiwgImRlc2NyaXB0aW9uIjogeyJjb250ZW50
IjogIkZ1bmN0aW9uIHRvIGNoZWNrIFVSTCBhZ2FpbnN0IFBoaXNoVGFua3MoaHR0cHM6Ly93d3cu
cGhpc2h0YW5rLmNvbS8pIERhdGFiYXNlIHRvIHNlZSBVUkwgaXMgZmxhZ2dlZCBhcyBwaGlzaGlu
ZyBvciBub3QuIiwgImZvcm1hdCI6ICJ0ZXh0In0sICJjcmVhdG9yIjogeyJkaXNwbGF5X25hbWUi
OiAiTml0aW4gS2FuZGhhcmUgIiwgInR5cGUiOiAidXNlciIsICJpZCI6IDYsICJuYW1lIjogIm5r
YW5kaGExQGluLmlibS5jb20ifSwgInZpZXdfaXRlbXMiOiBbeyJzaG93X2lmIjogbnVsbCwgImZp
ZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVt
ZW50IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICJlM2M5ZTQ0Ni05MzVjLTRkN2QtOWJjMC05
OWFkZDY5MzIwOTkiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAiZm5fcGhp
c2hfdGFua19zdWJtaXR0X3VybCIsICJ1dWlkIjogIjViOWU2NzE3LThjOWQtNGZkMy1iZWYzLTQ2
ZmFlMDg5ZjFiMSIsICJsYXN0X21vZGlmaWVkX2J5IjogeyJkaXNwbGF5X25hbWUiOiAiTml0aW4g
S2FuZGhhcmUgIiwgInR5cGUiOiAidXNlciIsICJpZCI6IDYsICJuYW1lIjogIm5rYW5kaGExQGlu
LmlibS5jb20ifSwgInZlcnNpb24iOiAzLCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiBu
dWxsLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJF
eGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkwiLCAid29ya2Zsb3dfaWQiOiA4OSwgInByb2dy
YW1tYXRpY19uYW1lIjogImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmwiLCAidXVpZCI6IG51
bGx9XSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTU0MDYzNzkzMjIsICJkZXN0aW5hdGlvbl9o
YW5kbGUiOiAiZm5fcGhpc2hfdGFuayIsICJpZCI6IDQ4LCAibmFtZSI6ICJmbl9waGlzaF90YW5r
X3N1Ym1pdHRfdXJsIn1dLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVs
bCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAxNTU1NDA2NTM0ODY3LCAiZGVz
Y3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9r
ZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUi
OiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRlIjogMTU1
NTQwNjUzNDg2NywgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEw
IiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwg
ImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVzc2FnZV9k
ZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjogImQ5Y2I1OTYyLWU1NDItNDcyMy04YmYyLThmZDc1MTlm
ZTM5OCIsICJleHBvcnRfa2V5IjogImZuX3BoaXNoX3RhbmsiLCAibmFtZSI6ICJmbl9waGlzaF90
YW5rIiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZm5fcGhp
c2hfdGFuayIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJua2FuZGhhMUBpbi5pYm0u
Y29tIl19XSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJyb2xlcyI6IFtdLCAiZmll
bGRzIjogW3sib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMi
OiB7fSwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZp
eCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogNTEsICJyZWFkX29ubHkiOiB0cnVl
LCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2Vu
IjogZmFsc2UsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRo
ZSBpbmNpZGVudCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBm
aWVsZCBpcyByZWFkLW9ubHkuIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxz
ZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmci
LCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgImRl
cHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFs
dWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9w
ZXJtcyI6IHt9LCAidGV4dCI6ICJwaGlzaF90YW5rX2NoZWNrX3VybCIsICJibGFua19vcHRpb24i
OiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjg5LCAi
cmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogImUzYzllNDQ2LTkzNWMtNGQ3ZC05YmMwLTk5YWRk
NjkzMjA5OSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlw
IjogIlVSTCB0byBiZSBjaGVja2VkIGZvciBwaGlzaGluZyBzdGF0dXMuIiwgImludGVybmFsIjog
ZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6
ICJfX2Z1bmN0aW9uL3BoaXNoX3RhbmtfY2hlY2tfdXJsIiwgImhpZGVfbm90aWZpY2F0aW9uIjog
ZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJwaGlzaF90YW5rX2NoZWNrX3VybCIs
ICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwg
InZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjogMTU1NTQwNjQy
MDYyOH0=
"""
    )