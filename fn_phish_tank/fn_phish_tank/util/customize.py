# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_phish_tank"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_phish_tank package"""
    reload_params = {"package": u"fn_phish_tank",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"phish_tank_check_url"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_phish_tank"], 
                    "functions": [u"fn_phish_tank_submit_url"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_phishtank_submit_url"], 
                    "actions": [u"Example: PhishTank: Submit URL"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     phish_tank_check_url
    #   Message Destinations:
    #     fn_phish_tank
    #   Functions:
    #     fn_phish_tank_submit_url
    #   Workflows:
    #     example_phishtank_submit_url
    #   Rules:
    #     Example: PhishTank: Submit URL


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjMxMGVkMmZiLWRkYzEt
NDk3OS1iNjJlLTRjNjQzNWZjOWJjNSIsICJkZXNjcmlwdGlvbiI6ICJDaGVjayBVUkwncyBhZ2Fp
bnN0IFBoaXNoVGFua3MoaHR0cHM6Ly93d3cucGhpc2h0YW5rLmNvbS8pIERhdGEgYmFzZSB0byBz
ZWUgVVJMIGlzIGZsYWdnZWQgYXMgcGhpc2hpbmcgb3Igbm90IHBoaXNoaW5nLiBhbmQgdGhlbiB1
cGRhdGUgdGhlIHBoaXNoaW5nIHN0YXR1cyBvbiBhcnRpZmFjdCBkZXNjcmlwdGlvbiBmaWVsZC4i
LCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3BoaXNo
dGFua19zdWJtaXRfdXJsIiwgIndvcmtmbG93X2lkIjogOTYsICJsYXN0X21vZGlmaWVkX2J5Ijog
Im5rYW5kaGExQGluLmlibS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmxcIiBpc0V4
ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IFBoaXNoVGFuazogU3VibWl0IFVSTFwi
Pjxkb2N1bWVudGF0aW9uPjwhW0NEQVRBW0NoZWNrIFVSTCdzIGFnYWluc3QgUGhpc2hUYW5rcyho
dHRwczovL3d3dy5waGlzaHRhbmsuY29tLykgRGF0YSBiYXNlIHRvIHNlZSBVUkwgaXMgZmxhZ2dl
ZCBhcyBwaGlzaGluZyBvciBub3QgcGhpc2hpbmcuIGFuZCB0aGVuIHVwZGF0ZSB0aGUgcGhpc2hp
bmcgc3RhdHVzIG9uIGFydGlmYWN0IGRlc2NyaXB0aW9uIGZpZWxkLl1dPjwvZG9jdW1lbnRhdGlv
bj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5j
ZUZsb3dfMW1pbjdvMzwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNl
cnZpY2VUYXNrXzE1dGU0d2pcIiBuYW1lPVwiUGhpc2ggVGFuayBTdWJtaXQgVVJMXCIgcmVzaWxp
ZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0
aW9uIHV1aWQ9XCI1YjllNjcxNy04YzlkLTRmZDMtYmVmMy00NmZhZTA4OWYxYjFcIj57XCJpbnB1
dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMgUGFyc2luZyB0aGUgcmVzdWx0
IHJldHVybmVkIGZyb20gZnVuY3Rpb24gZm5fcGhpc2hfdGFua1xcbmNvbnRlbnRfZGljdGlvbmFy
eSA9IHJlc3VsdHMuZ2V0KCdjb250ZW50JylcXG5yZXN1bHRfZGljdGlvbmFyeSA9IGNvbnRlbnRf
ZGljdGlvbmFyeS5nZXQoJ3Jlc3VsdHMnKVxcblVSTCA9IHJlc3VsdF9kaWN0aW9uYXJ5LmdldCgn
dXJsJylcXG5yaWNoX3RleHRfdG1wID0gXFxcIiZsdDticiZndDsmbHQ7YiZndDtVUkw6IHt9Jmx0
Oy9iJmd0OyZsdDsvYnImZ3Q7XFxcIi5mb3JtYXQoVVJMKVxcbmlmIHJlc3VsdF9kaWN0aW9uYXJ5
LmdldCgnaW5fZGF0YWJhc2UnKTpcXG4gICAgIGlmIHJlc3VsdF9kaWN0aW9uYXJ5LmdldCgndmVy
aWZpZWQnKTpcXG4gICAgICAgICAgaWYgcmVzdWx0X2RpY3Rpb25hcnkuZ2V0KCd2YWxpZCcpOlxc
biAgICAgICAgICAgICAgIHJpY2hfdGV4dF90bXAgKz0gXFxcIiZsdDtwIHN0eWxlPSdjb2xvcjpy
ZWQ7JyZndDsmbHQ7YiZndDtUaGlzIFVSTCBoYXMgYmVlbiBjaGVja2VkIGFnYWluc3QgUGhpc2hU
YW5rIGFuZCBpdCBpcyBWQUxJRCBQSElTSCZsdDsvYiZndDtcXFwiXFxuICAgICAgICAgICAgICAg
cGhpc2hfaWQgPSByZXN1bHRfZGljdGlvbmFyeS5nZXQoJ3BoaXNoX2lkJylcXG4gICAgICAgICAg
ICAgICBkZXRhaWxzX3BhZ2UgPSByZXN1bHRfZGljdGlvbmFyeS5nZXQoJ3BoaXNoX2RldGFpbF9w
YWdlJylcXG4gICAgICAgICAgICAgICB2ZXJpZmllZF9hdCA9IHJlc3VsdF9kaWN0aW9uYXJ5Lmdl
dCgndmVyaWZpZWRfYXQnKVxcbiAgICAgICAgICAgICAgIHJpY2hfdGV4dF90bXAgKz0gXFxcIiZs
dDticiZndDtQaGlzaCBJRDogezB9Jmx0Oy9iciZndDsmbHQ7YnImZ3Q7UGhpc2ggRGV0YWlsIFBh
Z2U6ICZsdDthIGhyZWY9J3sxfScmZ3Q7ezF9Jmx0Oy9hJmd0OyZsdDsvYnImZ3Q7Jmx0O2JyJmd0
OyBWZXJpZmllZCBhdDogezJ9Jmx0O2JyLyZndDsmbHQ7L3AmZ3Q7XFxcIi5mb3JtYXQocGhpc2hf
aWQsIGRldGFpbHNfcGFnZSwgc3RyKHZlcmlmaWVkX2F0KSlcXG4gICAgICAgICAgZWxzZTpcXG4g
ICAgICAgICAgICAgICByaWNoX3RleHRfdG1wICs9IFxcXCImbHQ7cCBzdHlsZT0nY29sb3I6Z3Jl
ZW47JyZndDsmbHQ7YiZndDtUaGlzIFVSTCBoYXMgYmVlbiBjaGVja2VkIGFnYWluc3QgUGhpc2hU
YW5rIGFuZCBpdCBpcyBOT1QgUEhJU0gmbHQ7L2ImZ3Q7Jmx0Oy9wJmd0O1xcXCJcXG4gICAgIGVs
c2U6XFxuICAgICAgICAgIHJpY2hfdGV4dF90bXAgKz0gXFxcIiZsdDtwIHN0eWxlPSdjb2xvcjpn
cmVlbjsnJmd0OyZsdDtiJmd0O1RoaXMgVVJMIGhhcyBiZWVuIGNoZWNrZWQgYWdhaW5zdCBQaGlz
aFRhbmsgYW5kIGl0IGlzIE5PVCBWRVJJRklFRCZsdDsvYiZndDsmbHQ7L3AmZ3Q7XFxcIlxcbmVs
c2U6XFxuICAgICByaWNoX3RleHRfdG1wICs9IFxcXCImbHQ7cCBzdHlsZT0nY29sb3I6Z3JlZW47
JyZndDsmbHQ7YiZndDtUaGlzIFVSTCBoYXMgYmVlbiBjaGVja2VkIGFnYWluc3QgUGhpc2hUYW5r
IGFuZCBpdCBpcyBub3QgZm91bmQgaW4gcGhpc2hUYW5rIERhdGFiYXNlLiZsdDsvYiZndDsmbHQ7
L3AmZ3Q7XFxcIlxcbiMgQXBwZW5kaW5nIHRvIGV4c3RpbmcgYXJ0aWZhY3QgZGVzY3JpcHRpb24g
ZmllbGQuXFxudG1wX2Rlc2MgPSBhcnRpZmFjdC5kZXNjcmlwdGlvblxcbmlmIHRtcF9kZXNjOlxc
biAgICAgdG1wX2Rlc2MgPSB0bXBfZGVzYy5nZXQoJ2NvbnRlbnQnKVxcbmVsc2U6XFxuICAgICB0
bXBfZGVzYyA9IFxcXCJcXFwiXFxuY29tcGxldGVfdG1wX3RleHQgPSB0bXBfZGVzYyArIHJpY2hf
dGV4dF90bXBcXG5yaWNoX3RleHQgPSBoZWxwZXIuY3JlYXRlUmljaFRleHQoY29tcGxldGVfdG1w
X3RleHQpXFxubGF0ZXN0X3JpY2hfdGV4dCA9IGhlbHBlci5jcmVhdGVSaWNoVGV4dChyaWNoX3Rl
eHRfdG1wKVxcbmluY2lkZW50LmFkZE5vdGUobGF0ZXN0X3JpY2hfdGV4dClcXG5hcnRpZmFjdC5k
ZXNjcmlwdGlvbiA9IHJpY2hfdGV4dFxcblxcblxcblxcblwiLFwicHJlX3Byb2Nlc3Npbmdfc2Ny
aXB0XCI6XCJpbnB1dHMucGhpc2hfdGFua19jaGVja191cmwgPSBhcnRpZmFjdC52YWx1ZVwifTwv
cmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNl
Rmxvd18xbWluN28zPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB3dHo5OGk8L291
dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xbWlu
N28zXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2Vydmlj
ZVRhc2tfMTV0ZTR3alwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8wNnhqNWRsXCI+PGluY29t
aW5nPlNlcXVlbmNlRmxvd18wd3R6OThpPC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5jZUZs
b3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHd0ejk4aVwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzE1
dGU0d2pcIiB0YXJnZXRSZWY9XCJFbmRFdmVudF8wNnhqNWRsXCIvPjx0ZXh0QW5ub3RhdGlvbiBp
ZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhl
cmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8x
c2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4
dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlv
bl8wb3dvMmF0XCI+PHRleHQ+PCFbQ0RBVEFbQ2hlY2sgVVJMJ3MgUGhpc2hpbmcgc3RhdHVzIGZy
b20gUGhpc2hUYW5rKGh0dHBzOi8vd3d3LnBoaXNodGFuay5jb20vKSBkYXRhIGJhc2UsIGFuZCB1
cGRhdGUgdGhlIHBoaXNoaW5nIHN0YXR1cyBvbiBhcnRpZmFjdCBkZXNjcmlwdGlvbiBmaWVsZC5d
XT48L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8x
NTJodWRoXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMTV0ZTR3alwiIHRhcmdldFJlZj1cIlRl
eHRBbm5vdGF0aW9uXzBvd28yYXRcIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9
XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmlu
ZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJT
dGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpC
b3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJw
bW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9
XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIg
aWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIz
MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+
PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1c
IkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJw
bW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18xNXRlNHdqXCIgaWQ9XCJT
ZXJ2aWNlVGFza18xNXRlNHdqX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRo
PVwiMTAwXCIgeD1cIjMxOVwiIHk9XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMW1pbjdvM1wiIGlkPVwiU2VxdWVu
Y2VGbG93XzFtaW43bzNfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwi
b21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMzE5XCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJv
dW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIyNTguNVwiIHk9XCIxODRcIi8+PC9i
cG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5F
bGVtZW50PVwiRW5kRXZlbnRfMDZ4ajVkbFwiIGlkPVwiRW5kRXZlbnRfMDZ4ajVkbF9kaVwiPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjU5OC43NjMyNjUzMDYx
MjI0XCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjEzXCIgd2lkdGg9XCIwXCIgeD1cIjYxNi43NjMyNjUzMDYxMjI0XCIgeT1cIjIyN1wiLz48L2Jw
bW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVs
ZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMHd0ejk4aVwiIGlkPVwiU2VxdWVuY2VGbG93XzB3dHo5OGlf
ZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQxOVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNTk5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIx
M1wiIHdpZHRoPVwiMFwiIHg9XCI1MDlcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48
L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5v
dGF0aW9uXzBvd28yYXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzBvd28yYXRfZGlcIj48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjYyXCIgd2lkdGg9XCI0MzFcIiB4PVwiNDYwXCIgeT1cIjU5XCIvPjwv
YnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRp
b25fMTUyaHVkaFwiIGlkPVwiQXNzb2NpYXRpb25fMTUyaHVkaF9kaVwiPjxvbWdkaTp3YXlwb2lu
dCB4PVwiNDE5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODdcIi8+PG9tZ2RpOndh
eXBvaW50IHg9XCI1OTZcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjEyMVwiLz48L2Jw
bW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRpYWdyYW0+PC9k
ZWZpbml0aW9ucz4iLCAid29ya2Zsb3dfaWQiOiAiZXhhbXBsZV9waGlzaHRhbmtfc3VibWl0X3Vy
bCIsICJ2ZXJzaW9uIjogNH0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTU3MzkzNzExOTc2LCAi
Y3JlYXRvcl9pZCI6ICJua2FuZGhhMUBpbi5pYm0uY29tIiwgImFjdGlvbnMiOiBbXSwgInByb2dy
YW1tYXRpY19uYW1lIjogImV4YW1wbGVfcGhpc2h0YW5rX3N1Ym1pdF91cmwiLCAibmFtZSI6ICJF
eGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkwifV0sICJhY3Rpb25zIjogW3sibG9naWNfdHlw
ZSI6ICJhbGwiLCAibmFtZSI6ICJFeGFtcGxlOiBQaGlzaFRhbms6IFN1Ym1pdCBVUkwiLCAidmll
d19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3b3JrZmxvd3MiOiBbImV4YW1wbGVfcGhpc2h0YW5r
X3N1Ym1pdF91cmwiXSwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgInRpbWVvdXRfc2Vjb25k
cyI6IDg2NDAwLCAidXVpZCI6ICJlODQ1ZTUxNS0wM2ZkLTQ2ZGMtODE1MC02ODUxZDE5ZjQ2OGEi
LCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogUGhpc2hUYW5rOiBT
dWJtaXQgVVJMIiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQi
OiBudWxsLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC50eXBlIiwgIm1ldGhvZCI6ICJlcXVhbHMi
LCAidmFsdWUiOiAiVVJMIn1dLCAiaWQiOiAxMTIsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtd
fV0sICJsYXlvdXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiAxMTAs
ICJpbmR1c3RyaWVzIjogbnVsbCwgInBoYXNlcyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJn
ZW9zIjogbnVsbCwgImxvY2FsZSI6IG51bGwsICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAz
MSwgInZlcnNpb24iOiAiMzEuMS43NiIsICJidWlsZF9udW1iZXIiOiA3NiwgIm1pbm9yIjogMX0s
ICJ0aW1lZnJhbWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwgImF1dG9tYXRpY190YXNrcyI6
IFtdLCAiZnVuY3Rpb25zIjogW3siZGlzcGxheV9uYW1lIjogIlBoaXNoIFRhbmsgU3VibWl0IFVS
TCIsICJkZXNjcmlwdGlvbiI6IHsiY29udGVudCI6ICJGdW5jdGlvbiB0byBjaGVjayBVUkxzIGFn
YWluc3QgUGhpc2hUYW5rcyhodHRwczovL3d3dy5waGlzaHRhbmsuY29tLykgRGF0YWJhc2UgdG8g
c2VlIFVSTCBpcyBmbGFnZ2VkIGFzIHBoaXNoaW5nIG9yIG5vdCBwaGlzaGluZy4iLCAiZm9ybWF0
IjogInRleHQifSwgImNyZWF0b3IiOiB7ImRpc3BsYXlfbmFtZSI6ICJOaXRpbiBLYW5kaGFyZSAi
LCAidHlwZSI6ICJ1c2VyIiwgImlkIjogNiwgIm5hbWUiOiAibmthbmRoYTFAaW4uaWJtLmNvbSJ9
LCAidmlld19pdGVtcyI6IFt7InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0
aW9uIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIs
ICJjb250ZW50IjogImUzYzllNDQ2LTkzNWMtNGQ3ZC05YmMwLTk5YWRkNjkzMjA5OSIsICJzdGVw
X2xhYmVsIjogbnVsbH1dLCAiZXhwb3J0X2tleSI6ICJmbl9waGlzaF90YW5rX3N1Ym1pdF91cmwi
LCAidXVpZCI6ICI1YjllNjcxNy04YzlkLTRmZDMtYmVmMy00NmZhZTA4OWYxYjEiLCAibGFzdF9t
b2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIk5pdGluIEthbmRoYXJlICIsICJ0eXBlIjog
InVzZXIiLCAiaWQiOiA2LCAibmFtZSI6ICJua2FuZGhhMUBpbi5pYm0uY29tIn0sICJ2ZXJzaW9u
IjogMiwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0aW9uIjogbnVsbCwgIm9iamVjdF90eXBlIjog
ImFydGlmYWN0IiwgImFjdGlvbnMiOiBbXSwgIm5hbWUiOiAiRXhhbXBsZTogUGhpc2hUYW5rOiBT
dWJtaXQgVVJMIiwgIndvcmtmbG93X2lkIjogOTYsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFt
cGxlX3BoaXNodGFua19zdWJtaXRfdXJsIiwgInV1aWQiOiBudWxsfV0sICJsYXN0X21vZGlmaWVk
X3RpbWUiOiAxNTU3MzI2NTE1NTYyLCAiZGVzdGluYXRpb25faGFuZGxlIjogImZuX3BoaXNoX3Rh
bmsiLCAiaWQiOiA1MywgIm5hbWUiOiAiZm5fcGhpc2hfdGFua19zdWJtaXRfdXJsIn1dLCAibm90
aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjog
W3siY3JlYXRlX2RhdGUiOiAxNTU3MzkzOTA4MjI4LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXph
dGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQ
YWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNr
YWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRlIjogMTU1NzM5MzkwODIyOCwgInV1aWQiOiAi
YmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwg
InN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJz
Y3JpcHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlk
IjogImQ5Y2I1OTYyLWU1NDItNDcyMy04YmYyLThmZDc1MTlmZTM5OCIsICJleHBvcnRfa2V5Ijog
ImZuX3BoaXNoX3RhbmsiLCAibmFtZSI6ICJmbl9waGlzaF90YW5rIiwgImRlc3RpbmF0aW9uX3R5
cGUiOiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZm5fcGhpc2hfdGFuayIsICJleHBlY3RfYWNr
IjogdHJ1ZSwgInVzZXJzIjogWyJua2FuZGhhMUBpbi5pYm0uY29tIl19XSwgImluY2lkZW50X2Fy
dGlmYWN0X3R5cGVzIjogW10sICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9ucyI6
IFtdLCAidHlwZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiU2ltdWxh
dGlvbiIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxl
IjogdHJ1ZSwgImlkIjogNTEsICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2YwZTNlZC0y
MWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBl
IjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNpbXVs
YXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHkuIiwg
ImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAi
ZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmljYXRpb24i
OiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRl
ZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlv
bnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJw
aGlzaF90YW5rX2NoZWNrX3VybCIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51
bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjg5LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1
dWlkIjogImUzYzllNDQ2LTkzNWMtNGQ3ZC05YmMwLTk5YWRkNjkzMjA5OSIsICJjaG9zZW4iOiBm
YWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjogIlVSTCB0byBiZSBjaGVja2Vk
IGZvciBwaGlzaGluZyBzdGF0dXMuIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBm
YWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL3BoaXNoX3Rh
bmtfY2hlY2tfdXJsIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6
ICIiLCAibmFtZSI6ICJwaGlzaF90YW5rX2NoZWNrX3VybCIsICJkZXByZWNhdGVkIjogZmFsc2Us
ICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJvdmVy
cmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjogMTU1NzM5MzcyMjg1NX0=
"""
    )