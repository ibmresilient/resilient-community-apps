# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_incident_utils"""

try:
    from resilient import ImportDefinition
except ImportError:
    # Support Apps running on resilient-circuits < v35.0.195
    from resilient_circuits.util import ImportDefinition


def codegen_reload_data():
    """
    Parameters required reload codegen for the fn_incident_utils package
    """
    return {
        "package": u"fn_incident_utils",
        "message_destinations": [u"fn_incident_utils"],
        "functions": [u"incident_utils_close_incident"],
        "workflows": [u"example_close_incident"],
        "actions": [u"Example: Close Incident"],
        "incident_fields": [],
        "incident_artifact_types": [],
        "datatables": [],
        "automatic_tasks": [],
        "scripts": []
    }


def customization_data(client=None):
    """
    Returns a Generator of ImportDefinitions (Customizations).
    Install them using `resilient-circuits customize`

    Contents:
    - Message Destinations:
        - fn_incident_utils
    - Functions:
        - incident_utils_close_incident
    - Workflows:
        - example_close_incident
    - Rules:
        - Example: Close Incident
    """

    yield ImportDefinition(u"""
eyJhY3Rpb25fb3JkZXIiOiBbXSwgImFjdGlvbnMiOiBbeyJhdXRvbWF0aW9ucyI6IFtdLCAiY29u
ZGl0aW9ucyI6IFt7ImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVu
dC5wbGFuX3N0YXR1cyIsICJtZXRob2QiOiAiZXF1YWxzIiwgInR5cGUiOiBudWxsLCAidmFsdWUi
OiAiQWN0aXZlIn1dLCAiZW5hYmxlZCI6IHRydWUsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IENs
b3NlIEluY2lkZW50IiwgImlkIjogMTUsICJsb2dpY190eXBlIjogImFsbCIsICJtZXNzYWdlX2Rl
c3RpbmF0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlOiBDbG9zZSBJbmNpZGVudCIsICJvYmpl
Y3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0YWdzIjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQw
MCwgInR5cGUiOiAxLCAidXVpZCI6ICJkOTljOWQ0OS1hODIxLTRmNWQtOWM5Mi0yODY1Mzk2ZDYy
YzgiLCAidmlld19pdGVtcyI6IFt7ImNvbnRlbnQiOiAiZjFmZTM2YTUtZGYyNy00OWYwLTg1ZDMt
ODM0OTg3ZWU0ZjY5IiwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogImFj
dGlvbmludm9jYXRpb24iLCAic2hvd19pZiI6IG51bGwsICJzaG93X2xpbmtfaGVhZGVyIjogZmFs
c2UsICJzdGVwX2xhYmVsIjogbnVsbH1dLCAid29ya2Zsb3dzIjogWyJleGFtcGxlX2Nsb3NlX2lu
Y2lkZW50Il19XSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAiZXhwb3J0X2RhdGUiOiAxNTkyOTI1
OTM4MDIzLCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImV4dGVuc2lvbnMiOiBbXSwgImZp
ZWxkcyI6IFt7ImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZh
bHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJjaG9zZW4iOiBm
YWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiZGVwcmVjYXRlZCI6IGZh
bHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2luY2lkZW50X2lkIiwgImhpZGVfbm90aWZp
Y2F0aW9uIjogZmFsc2UsICJpZCI6IDE4MSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgImludGVy
bmFsIjogZmFsc2UsICJpc190cmFja2VkIjogZmFsc2UsICJuYW1lIjogImluY2lkZW50X2lkIiwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAib3BlcmF0aW9ucyI6IFtdLCAicGxhY2Vob2xkZXIiOiAi
IiwgInByZWZpeCI6IG51bGwsICJyZWFkX29ubHkiOiBmYWxzZSwgInJlcXVpcmVkIjogImFsd2F5
cyIsICJyaWNoX3RleHQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInRlbXBsYXRlcyI6IFtdLCAidGV4
dCI6ICJpbmNpZGVudF9pZCIsICJ0b29sdGlwIjogIiIsICJ0eXBlX2lkIjogMTEsICJ1dWlkIjog
ImIxM2E0MGUzLWU3ZmYtNDY0ZS05NjZjLWFlYTgzZWI1YWJiOSIsICJ2YWx1ZXMiOiBbXX0sIHsi
YWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJjYWxj
dWxhdGVkIjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImNob3NlbiI6IGZhbHNlLCAiZGVm
YXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJkZXByZWNhdGVkIjogZmFsc2UsICJleHBv
cnRfa2V5IjogIl9fZnVuY3Rpb24vY2xvc2VfZmllbGRzIiwgImhpZGVfbm90aWZpY2F0aW9uIjog
ZmFsc2UsICJpZCI6IDE4MiwgImlucHV0X3R5cGUiOiAidGV4dCIsICJpbnRlcm5hbCI6IGZhbHNl
LCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6ICJjbG9zZV9maWVsZHMiLCAib3BlcmF0aW9u
X3Blcm1zIjoge30sICJvcGVyYXRpb25zIjogW10sICJwbGFjZWhvbGRlciI6ICIiLCAicHJlZml4
IjogbnVsbCwgInJlYWRfb25seSI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0YWdzIjog
W10sICJ0ZW1wbGF0ZXMiOiBbXSwgInRleHQiOiAiY2xvc2VfZmllbGRzIiwgInRvb2x0aXAiOiAi
QSBKU09OIFN0cmluZyBvZiB0aGUgZmllbGRzIHJlcXVpcmVkIHRvIGNsb3NlIGFuIEluY2lkZW50
IGUuZy46IHsncmVzb2x1dGlvbl9pZCc6J1Jlc29sdmVkJywncmVzb2x1dGlvbl9zdW1tYXJ5Jzon
Y2xvc2luZyd9IiwgInR5cGVfaWQiOiAxMSwgInV1aWQiOiAiN2FkMDYyNDUtYzJhNi00YWI0LTgz
ZmQtNGVhYzFkZWI4M2VlIiwgInZhbHVlcyI6IFtdfSwgeyJhbGxvd19kZWZhdWx0X3ZhbHVlIjog
ZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgImNoYW5n
ZWFibGUiOiB0cnVlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIi
OiBmYWxzZSwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiYWN0aW9uaW52b2Nh
dGlvbi9pbmNpZGVudF91dGlsc19jbG9zZV9maWVsZHMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBm
YWxzZSwgImlkIjogMTgzLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0YXJlYSIsICJpbnRlcm5hbCI6IGZh
bHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6ICJpbmNpZGVudF91dGlsc19jbG9zZV9m
aWVsZHMiLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJvcGVyYXRpb25zIjogW10sICJwbGFjZWhv
bGRlciI6ICJlLmcuOiB7XCJyZXNvbHV0aW9uX2lkXCI6XCJSZXNvbHZlZFwiLFwicmVzb2x1dGlv
bl9zdW1tYXJ5XCI6XCJjbG9zaW5nXCJ9IiwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgInJlYWRf
b25seSI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0YWdzIjogW10sICJ0ZW1wbGF0ZXMi
OiBbXSwgInRleHQiOiAiSW5jaWRlbnQgVXRpbHMgQ2xvc2UgRmllbGRzIiwgInRvb2x0aXAiOiAi
RW50ZXIgYSBKU09OIFN0cmluZyBvZiB0aGUgZmllbGRzIHJlcXVpcmVkIHRvIGNsb3NlIGFuIElu
Y2lkZW50IiwgInR5cGVfaWQiOiA2LCAidXVpZCI6ICJmMWZlMzZhNS1kZjI3LTQ5ZjAtODVkMy04
MzQ5ODdlZTRmNjkiLCAidmFsdWVzIjogW119LCB7ImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvaW50
ZXJuYWxfY3VzdG9taXphdGlvbnNfZmllbGQiLCAiaWQiOiAwLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0
IiwgImludGVybmFsIjogdHJ1ZSwgIm5hbWUiOiAiaW50ZXJuYWxfY3VzdG9taXphdGlvbnNfZmll
bGQiLCAicmVhZF9vbmx5IjogdHJ1ZSwgInRleHQiOiAiQ3VzdG9taXphdGlvbnMgRmllbGQgKGlu
dGVybmFsKSIsICJ0eXBlX2lkIjogMCwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzkt
NGEwMDA0MDQ0YWExIn1dLCAiZnVuY3Rpb25zIjogW3siY3JlYXRvciI6IHsiZGlzcGxheV9uYW1l
IjogIlNhYmluYSBDemVybmVja2EiLCAiaWQiOiAxLCAibmFtZSI6ICJzYWJpbmEuY3plcm5lY2th
MUBpZS5pYm0uY29tIiwgInR5cGUiOiAidXNlciJ9LCAiZGVzY3JpcHRpb24iOiB7ImZvcm1hdCI6
ICJ0ZXh0IiwgImNvbnRlbnQiOiAiRnVuY3Rpb24gdGhhdCB0YWtlcyBhbiBpbmNpZGVudF9pZCBh
bmQgYSBKU09OIFN0cmluZyBvZiBmaWVsZF9uYW1lIGFuZCBmaWVsZF92YWx1ZSBwYWlycyB0byBj
bG9zZSBhbiBJbmNpZGVudC4ifSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJmbl9pbmNpZGVudF91
dGlscyIsICJkaXNwbGF5X25hbWUiOiAiSW5jaWRlbnQgVXRpbHM6IENsb3NlIEluY2lkZW50Iiwg
ImV4cG9ydF9rZXkiOiAiaW5jaWRlbnRfdXRpbHNfY2xvc2VfaW5jaWRlbnQiLCAiaWQiOiAzLCAi
bGFzdF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIlNhYmluYSBDemVybmVja2EiLCAi
aWQiOiAxLCAibmFtZSI6ICJzYWJpbmEuY3plcm5lY2thMUBpZS5pYm0uY29tIiwgInR5cGUiOiAi
dXNlciJ9LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU5MjI0NjgxMjI4NiwgIm5hbWUiOiAiaW5j
aWRlbnRfdXRpbHNfY2xvc2VfaW5jaWRlbnQiLCAidGFncyI6IFtdLCAidXVpZCI6ICI3YTExNTZm
Ny1hMDBkLTRmNzUtODAzNS1hNDFmNDBhYzk4MGYiLCAidmVyc2lvbiI6IDIsICJ2aWV3X2l0ZW1z
IjogW3siY29udGVudCI6ICJiMTNhNDBlMy1lN2ZmLTQ2NGUtOTY2Yy1hZWE4M2ViNWFiYjkiLCAi
ZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93
X2lmIjogbnVsbCwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgInN0ZXBfbGFiZWwiOiBudWxs
fSwgeyJjb250ZW50IjogIjdhZDA2MjQ1LWMyYTYtNGFiNC04M2ZkLTRlYWMxZGViODNlZSIsICJl
bGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3df
aWYiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAic3RlcF9sYWJlbCI6IG51bGx9
XSwgIndvcmtmbG93cyI6IFt7ImFjdGlvbnMiOiBbXSwgImRlc2NyaXB0aW9uIjogbnVsbCwgIm5h
bWUiOiAiRXhhbXBsZTogQ2xvc2UgSW5jaWRlbnQiLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQi
LCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9jbG9zZV9pbmNpZGVudCIsICJ0YWdzIjog
W10sICJ1dWlkIjogbnVsbCwgIndvcmtmbG93X2lkIjogNH1dfV0sICJnZW9zIjogbnVsbCwgImdy
b3VwcyI6IG51bGwsICJpZCI6IDExLCAiaW5ib3VuZF9tYWlsYm94ZXMiOiBudWxsLCAiaW5jaWRl
bnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgImluY2lkZW50X3R5cGVzIjogW3sidXBkYXRlX2RhdGUi
OiAxNjA3NTE0NzE0MTkyLCAiY3JlYXRlX2RhdGUiOiAxNjA3NTE0NzE0MTkyLCAidXVpZCI6ICJi
ZmVlYzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZGVzY3JpcHRpb24iOiAiQ3Vz
dG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXph
dGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdl
cyAoaW50ZXJuYWwpIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50
X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlLCAiaWQiOiAwfV0sICJpbmR1c3RyaWVzIjogbnVs
bCwgImxheW91dHMiOiBbXSwgImxvY2FsZSI6IG51bGwsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6
IFt7ImFwaV9rZXlzIjogWyJmYjViOTBjNS03NTAxLTQwYTktYWZkZi00ZDkxYmQ2ZWFhMWMiXSwg
ImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAiZXhwZWN0X2FjayI6IHRydWUsICJleHBvcnRfa2V5Ijog
ImZuX2luY2lkZW50X3V0aWxzIiwgIm5hbWUiOiAiZm5faW5jaWRlbnRfdXRpbHMiLCAicHJvZ3Jh
bW1hdGljX25hbWUiOiAiZm5faW5jaWRlbnRfdXRpbHMiLCAidGFncyI6IFtdLCAidXNlcnMiOiBb
InNhYmluYS5jemVybmVja2ExQGllLmlibS5jb20iXSwgInV1aWQiOiAiMzZlOWYzZmMtYzNlOS00
YmNmLTg1YmQtYWIyMjQ0NmMyNDYxIn1dLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJvdmVycmlk
ZXMiOiBbXSwgInBoYXNlcyI6IFtdLCAicmVndWxhdG9ycyI6IG51bGwsICJyb2xlcyI6IFtdLCAi
c2NyaXB0cyI6IFtdLCAic2VydmVyX3ZlcnNpb24iOiB7ImJ1aWxkX251bWJlciI6IDU2MzQsICJt
YWpvciI6IDM2LCAibWlub3IiOiAwLCAidmVyc2lvbiI6ICIzNi4wLjU2MzQifSwgInRhZ3MiOiBb
XSwgInRhc2tfb3JkZXIiOiBbXSwgInRpbWVmcmFtZXMiOiBudWxsLCAidHlwZXMiOiBbXSwgIndv
cmtmbG93cyI6IFt7ImFjdGlvbnMiOiBbXSwgImNvbnRlbnQiOiB7InZlcnNpb24iOiA0NSwgIndv
cmtmbG93X2lkIjogImV4YW1wbGVfY2xvc2VfaW5jaWRlbnQiLCAieG1sIjogIjw/eG1sIHZlcnNp
b249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6
Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJo
dHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJo
dHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0
cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJo
dHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMu
b3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEu
b3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfY2xvc2VfaW5jaWRlbnRcIiBpc0V4ZWN1
dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IENsb3NlIEluY2lkZW50XCI+PGRvY3VtZW50
YXRpb24+QW4gZXhhbXBsZSB3b3JrZmxvdyB3aGljaCB0YWtlcyBhbiBpbmNpZGVudF9pZCBhbmQg
b3B0aW9uYWwgY2xvc2VfZmllbGRzIGluIG9yZGVyIHRvIGNsb3NlIGFuIEluY2lkZW50LjwvZG9j
dW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2lu
Zz5TZXF1ZW5jZUZsb3dfMWttOHE5bzwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFz
ayBpZD1cIlNlcnZpY2VUYXNrXzBxNjkyczJcIiBuYW1lPVwiSW5jaWRlbnQgVXRpbHM6IENsb3Nl
IEluY2lkZW50XCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50
cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI3YTExNTZmNy1hMDBkLTRmNzUtODAzNS1hNDFm
NDBhYzk4MGZcIj57XCJpbnB1dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIm5v
dGVfdGV4dCA9IFxcXCJSZXN1bHQgZnJvbSBFeGFtcGxlOiBDbG9zZSBJbmNpZGVudCBvbiBJbmNp
ZGVudCB7MH06ICZsdDtzdHJvbmcmZ3Q7ezF9Jmx0Oy9zdHJvbmcmZ3Q7XFxcIi5mb3JtYXQocmVz
dWx0cy5pbnB1dHNbJ2luY2lkZW50X2lkJ10sIFxcXFxcXG5cXFwic3VjY2Vzc1xcXCIgaWYgcmVz
dWx0cy5zdWNjZXNzIGVsc2UgXFxcImZhaWx1cmUuJmx0O2JyJmd0O1JlYXNvbjoge31cXFwiLmZv
cm1hdChyZXN1bHRzLnJlYXNvbikpXFxuaW5jaWRlbnQuYWRkTm90ZShoZWxwZXIuY3JlYXRlUmlj
aFRleHQobm90ZV90ZXh0KSlcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5wdXRzLmlu
Y2lkZW50X2lkID0gaW5jaWRlbnQuaWRcXG5pdV9jbG9zZV9maWVsZHMgPSBydWxlLnByb3BlcnRp
ZXMuaW5jaWRlbnRfdXRpbHNfY2xvc2VfZmllbGRzLmNvbnRlbnRcXG5pbnB1dHMuY2xvc2VfZmll
bGRzID0gdVxcXCJ7fVxcXCIuZm9ybWF0KGl1X2Nsb3NlX2ZpZWxkcylcIn08L3Jlc2lsaWVudDpm
dW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMWttOHE5
bzwvaW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wdnljbmdvPC9vdXRnb2luZz48L3Nl
cnZpY2VUYXNrPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMWttOHE5b1wiIHNvdXJj
ZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzBxNjky
czJcIi8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMDZkbDNvZFwiPjxpbmNvbWluZz5TZXF1ZW5j
ZUZsb3dfMHZ5Y25nbzwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2Vx
dWVuY2VGbG93XzB2eWNuZ29cIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wcTY5MnMyXCIgdGFy
Z2V0UmVmPVwiRW5kRXZlbnRfMDZkbDNvZFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5u
b3RhdGlvbl8xZjVvd2cwXCI+PHRleHQ+PCFbQ0RBVEFbSW5wdXRzOlxuaW5jaWRlbnRfaWQsIGNs
b3NlX2ZpZWxkc11dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFz
c29jaWF0aW9uXzAyN3I1cXBcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wcTY5MnMyXCIgdGFy
Z2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWY1b3dnMFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJU
ZXh0QW5ub3RhdGlvbl8xamRvZTFzXCI+PHRleHQ+PCFbQ0RBVEFbT3V0cHV0OlxuQ2xvc2VzIHRo
ZSBJbmNpZGVudCBzaG91bGQgcmVmbGVjdCB0aGUgYWN0aW9uIGFmdGVyIHRoZSBmdW5jdGlvbiBy
dW5zLiBBIE5vdGUgaXMgY3JlYXRlZCB3aXRoIHRoZSBmdW5jdGlvbiByZXN1bHRzLlxuXV0+PC90
ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMDB5Y293
bVwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzBxNjkyczJcIiB0YXJnZXRSZWY9XCJUZXh0QW5u
b3RhdGlvbl8xamRvZTFzXCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBN
TkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIg
aWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRF
dmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6
QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3
XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1u
ZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMHE2OTJzMlwiIGlkPVwiU2Vy
dmljZVRhc2tfMHE2OTJzMl9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1c
IjEwMFwiIHg9XCIzNTJcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQ
TU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzFrbThxOW9cIiBpZD1cIlNlcXVlbmNl
Rmxvd18xa204cTlvX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjI3NVwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMjc1XCIgeHNp
OnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIzNTJc
IiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjI5MFwiIHk9XCIxOTku
NVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hh
cGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xZjVvd2cwXCIgaWQ9XCJUZXh0QW5ub3Rh
dGlvbl8xZjVvd2cwX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI1OFwiIHdpZHRoPVwiOThc
IiB4PVwiMjMxXCIgeT1cIjMzXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdl
IGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMDI3cjVxcFwiIGlkPVwiQXNzb2NpYXRpb25fMDI3
cjVxcF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMzY4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIxNjZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIzMDVcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjkxXCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJw
bW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMWpkb2Uxc1wiIGlkPVwiVGV4dEFubm90YXRpb25f
MWpkb2Uxc19kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNzlcIiB3aWR0aD1cIjE4OVwiIHg9
XCI0NjVcIiB5PVwiMTJcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBt
bkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8wMHljb3dtXCIgaWQ9XCJBc3NvY2lhdGlvbl8wMHljb3dt
X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0NDNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIg
eT1cIjE2N1wiLz48b21nZGk6d2F5cG9pbnQgeD1cIjUyMVwiIHhzaTp0eXBlPVwib21nZGM6UG9p
bnRcIiB5PVwiOTFcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVs
ZW1lbnQ9XCJFbmRFdmVudF8wNmRsM29kXCIgaWQ9XCJFbmRFdmVudF8wNmRsM29kX2RpXCI+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiNTk2LjgwMzc5NzQ2ODM1
NDRcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwi
MTNcIiB3aWR0aD1cIjBcIiB4PVwiNjE0LjgwMzc5NzQ2ODM1NDRcIiB5PVwiMjI3XCIvPjwvYnBt
bmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxl
bWVudD1cIlNlcXVlbmNlRmxvd18wdnljbmdvXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHZ5Y25nb19k
aVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNDUyXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI1OTdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50
XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEz
XCIgd2lkdGg9XCIwXCIgeD1cIjUyNC41XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+
PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFt
PjwvZGVmaW5pdGlvbnM+In0sICJjb250ZW50X3ZlcnNpb24iOiA0NSwgImNyZWF0b3JfaWQiOiAi
c2FiaW5hLmN6ZXJuZWNrYTFAaWUuaWJtLmNvbSIsICJkZXNjcmlwdGlvbiI6ICJBbiBleGFtcGxl
IHdvcmtmbG93IHdoaWNoIHRha2VzIGFuIGluY2lkZW50X2lkIGFuZCBvcHRpb25hbCBjbG9zZV9m
aWVsZHMgaW4gb3JkZXIgdG8gY2xvc2UgYW4gSW5jaWRlbnQuIiwgImV4cG9ydF9rZXkiOiAiZXhh
bXBsZV9jbG9zZV9pbmNpZGVudCIsICJsYXN0X21vZGlmaWVkX2J5IjogInNhYmluYS5jemVybmVj
a2ExQGllLmlibS5jb20iLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU5MjM5NzkzNDMyNCwgIm5h
bWUiOiAiRXhhbXBsZTogQ2xvc2UgSW5jaWRlbnQiLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQi
LCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9jbG9zZV9pbmNpZGVudCIsICJ0YWdzIjog
W10sICJ1dWlkIjogIjM0OGQxMGY3LTE0ZTMtNDJiZi04ZWY4LTU4MzRmYWViMjViMSIsICJ3b3Jr
Zmxvd19pZCI6IDR9XSwgIndvcmtzcGFjZXMiOiBbXX0=
""")
