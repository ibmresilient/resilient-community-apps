# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_incident_utils"""

try:
    from resilient import ImportDefinition
except ImportError:
    # Support Apps running on resilient-circuits < v35.0.195
    from resilient_circuits.util import ImportDefinition


def codegen_reload_data():
    """
    Parameters required reload codegen for the fn_incident_utils package
    """
    return {
        "package": u"fn_incident_utils",
        "message_destinations": [u"fn_incident_utils"],
        "functions": [u"incident_utils_close_incident"],
        "workflows": [u"example_close_incident"],
        "actions": [u"Example: Close Incident"],
        "incident_fields": [],
        "incident_artifact_types": [],
        "datatables": [],
        "automatic_tasks": [],
        "scripts": []
    }


def customization_data(client=None):
    """
    Returns a Generator of ImportDefinitions (Customizations).
    Install them using `resilient-circuits customize`

    IBM Resilient Platform Version: 36.0.5634

    Contents:
    - Message Destinations:
        - fn_incident_utils
    - Functions:
        - incident_utils_close_incident
    - Workflows:
        - example_close_incident
    - Rules:
        - Example: Close Incident
    """

    yield ImportDefinition(u"""
eyJhY3Rpb25fb3JkZXIiOiBbXSwgImFjdGlvbnMiOiBbeyJhdXRvbWF0aW9ucyI6IFtdLCAiY29u
ZGl0aW9ucyI6IFtdLCAiZW5hYmxlZCI6IHRydWUsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IENs
b3NlIEluY2lkZW50IiwgImlkIjogMTU5LCAibG9naWNfdHlwZSI6ICJhbGwiLCAibWVzc2FnZV9k
ZXN0aW5hdGlvbnMiOiBbXSwgIm5hbWUiOiAiRXhhbXBsZTogQ2xvc2UgSW5jaWRlbnQiLCAib2Jq
ZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidGFncyI6IFtdLCAidGltZW91dF9zZWNvbmRzIjogODY0
MDAsICJ0eXBlIjogMSwgInV1aWQiOiAiZDk5YzlkNDktYTgyMS00ZjVkLTljOTItMjg2NTM5NmQ2
MmM4IiwgInZpZXdfaXRlbXMiOiBbeyJjb250ZW50IjogImYxZmUzNmE1LWRmMjctNDlmMC04NWQz
LTgzNDk4N2VlNGY2OSIsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJh
Y3Rpb25pbnZvY2F0aW9uIiwgInNob3dfaWYiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZh
bHNlLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgIndvcmtmbG93cyI6IFsiZXhhbXBsZV9jbG9zZV9p
bmNpZGVudCJdfV0sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgImV4cG9ydF9kYXRlIjogMTYwNTYz
OTkzMzU3NywgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJleHRlbnNpb25zIjogW10sICJm
aWVsZHMiOiBbeyJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFsc2UsICJibGFua19vcHRpb24iOiBm
YWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAiY2hvc2VuIjog
ZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImRlcHJlY2F0ZWQiOiBm
YWxzZSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9pbmNpZGVudF9pZCIsICJoaWRlX25vdGlm
aWNhdGlvbiI6IGZhbHNlLCAiaWQiOiAyMTcsICJpbnB1dF90eXBlIjogIm51bWJlciIsICJpbnRl
cm5hbCI6IGZhbHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6ICJpbmNpZGVudF9pZCIs
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgIm9wZXJhdGlvbnMiOiBbXSwgInBsYWNlaG9sZGVyIjog
IiIsICJwcmVmaXgiOiBudWxsLCAicmVhZF9vbmx5IjogZmFsc2UsICJyZXF1aXJlZCI6ICJhbHdh
eXMiLCAicmljaF90ZXh0IjogZmFsc2UsICJ0YWdzIjogW10sICJ0ZW1wbGF0ZXMiOiBbXSwgInRl
eHQiOiAiaW5jaWRlbnRfaWQiLCAidG9vbHRpcCI6ICIiLCAidHlwZV9pZCI6IDExLCAidXVpZCI6
ICJiMTNhNDBlMy1lN2ZmLTQ2NGUtOTY2Yy1hZWE4M2ViNWFiYjkiLCAidmFsdWVzIjogW119LCB7
ImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiY2Fs
Y3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJjaG9zZW4iOiBmYWxzZSwgImRl
ZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZXhw
b3J0X2tleSI6ICJfX2Z1bmN0aW9uL2Nsb3NlX2ZpZWxkcyIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAiaWQiOiAxMTc1LCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImludGVybmFsIjogZmFs
c2UsICJpc190cmFja2VkIjogZmFsc2UsICJuYW1lIjogImNsb3NlX2ZpZWxkcyIsICJvcGVyYXRp
b25fcGVybXMiOiB7fSwgIm9wZXJhdGlvbnMiOiBbXSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVm
aXgiOiBudWxsLCAicmVhZF9vbmx5IjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRhZ3Mi
OiBbXSwgInRlbXBsYXRlcyI6IFtdLCAidGV4dCI6ICJjbG9zZV9maWVsZHMiLCAidG9vbHRpcCI6
ICJBIEpTT04gU3RyaW5nIG9mIHRoZSBmaWVsZHMgcmVxdWlyZWQgdG8gY2xvc2UgYW4gSW5jaWRl
bnQgZS5nLjogeydmaWVsZDEnOid2YWx1ZTEnLCdmaWVsZDInOid2YWx1ZTInfSIsICJ0eXBlX2lk
IjogMTEsICJ1dWlkIjogIjdhZDA2MjQ1LWMyYTYtNGFiNC04M2ZkLTRlYWMxZGViODNlZSIsICJ2
YWx1ZXMiOiBbXX0sIHsiYWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAiYmxhbmtfb3B0aW9u
IjogZmFsc2UsICJjYWxjdWxhdGVkIjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImNob3Nl
biI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJkZXByZWNhdGVk
IjogZmFsc2UsICJleHBvcnRfa2V5IjogImFjdGlvbmludm9jYXRpb24vaW5jaWRlbnRfdXRpbHNf
Y2xvc2VfZmllbGRzIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJpZCI6IDExNzQsICJp
bnB1dF90eXBlIjogInRleHRhcmVhIiwgImludGVybmFsIjogZmFsc2UsICJpc190cmFja2VkIjog
ZmFsc2UsICJuYW1lIjogImluY2lkZW50X3V0aWxzX2Nsb3NlX2ZpZWxkcyIsICJvcGVyYXRpb25f
cGVybXMiOiB7fSwgIm9wZXJhdGlvbnMiOiBbXSwgInBsYWNlaG9sZGVyIjogImUuZy46IHsnZmll
bGQxJzondmFsdWUxJywnZmllbGQyJzondmFsdWUyJ30gIiwgInByZWZpeCI6ICJwcm9wZXJ0aWVz
IiwgInJlYWRfb25seSI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0YWdzIjogW10sICJ0
ZW1wbGF0ZXMiOiBbXSwgInRleHQiOiAiSW5jaWRlbnQgVXRpbHMgQ2xvc2UgRmllbGRzIiwgInRv
b2x0aXAiOiAiRW50ZXIgYSBKU09OIFN0cmluZyBvZiB0aGUgZmllbGRzIHJlcXVpcmVkIHRvIGNs
b3NlIGFuIEluY2lkZW50IiwgInR5cGVfaWQiOiA2LCAidXVpZCI6ICJmMWZlMzZhNS1kZjI3LTQ5
ZjAtODVkMy04MzQ5ODdlZTRmNjkiLCAidmFsdWVzIjogW119LCB7ImV4cG9ydF9rZXkiOiAiaW5j
aWRlbnQvaW50ZXJuYWxfY3VzdG9taXphdGlvbnNfZmllbGQiLCAiaWQiOiAwLCAiaW5wdXRfdHlw
ZSI6ICJ0ZXh0IiwgImludGVybmFsIjogdHJ1ZSwgIm5hbWUiOiAiaW50ZXJuYWxfY3VzdG9taXph
dGlvbnNfZmllbGQiLCAicmVhZF9vbmx5IjogdHJ1ZSwgInRleHQiOiAiQ3VzdG9taXphdGlvbnMg
RmllbGQgKGludGVybmFsKSIsICJ0eXBlX2lkIjogMCwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0x
MWU4LWFkMzktNGEwMDA0MDQ0YWExIn1dLCAiZnVuY3Rpb25zIjogW3siY3JlYXRvciI6IHsiZGlz
cGxheV9uYW1lIjogIlJlc2lsaWVudCBTeXNhZG1pbiIsICJpZCI6IDMsICJuYW1lIjogImFAZXhh
bXBsZS5jb20iLCAidHlwZSI6ICJ1c2VyIn0sICJkZXNjcmlwdGlvbiI6IHsiZm9ybWF0IjogInRl
eHQiLCAiY29udGVudCI6ICJGdW5jdGlvbiB0aGF0IHRha2VzIGFuIGluY2lkZW50X2lkIGFuZCBh
IEpTT04gU3RyaW5nIG9mIGZpZWxkX25hbWUgYW5kIGZpZWxkX3ZhbHVlIHBhaXJzIHRvIGNsb3Nl
IGFuIEluY2lkZW50LiJ9LCAiZGVzdGluYXRpb25faGFuZGxlIjogImZuX2luY2lkZW50X3V0aWxz
IiwgImRpc3BsYXlfbmFtZSI6ICJJbmNpZGVudCBVdGlsczogQ2xvc2UgSW5jaWRlbnQiLCAiZXhw
b3J0X2tleSI6ICJpbmNpZGVudF91dGlsc19jbG9zZV9pbmNpZGVudCIsICJpZCI6IDc3LCAibGFz
dF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIlJlc2lsaWVudCBTeXNhZG1pbiIsICJp
ZCI6IDMsICJuYW1lIjogImFAZXhhbXBsZS5jb20iLCAidHlwZSI6ICJ1c2VyIn0sICJsYXN0X21v
ZGlmaWVkX3RpbWUiOiAxNjA1NjM3NTcwODYxLCAibmFtZSI6ICJpbmNpZGVudF91dGlsc19jbG9z
ZV9pbmNpZGVudCIsICJ0YWdzIjogW10sICJ1dWlkIjogIjdhMTE1NmY3LWEwMGQtNGY3NS04MDM1
LWE0MWY0MGFjOTgwZiIsICJ2ZXJzaW9uIjogMSwgInZpZXdfaXRlbXMiOiBbeyJjb250ZW50Ijog
ImIxM2E0MGUzLWU3ZmYtNDY0ZS05NjZjLWFlYTgzZWI1YWJiOSIsICJlbGVtZW50IjogImZpZWxk
X3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfaWYiOiBudWxsLCAic2hv
d19saW5rX2hlYWRlciI6IGZhbHNlLCAic3RlcF9sYWJlbCI6IG51bGx9LCB7ImNvbnRlbnQiOiAi
N2FkMDYyNDUtYzJhNi00YWI0LTgzZmQtNGVhYzFkZWI4M2VlIiwgImVsZW1lbnQiOiAiZmllbGRf
dXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19pZiI6IG51bGwsICJzaG93
X2xpbmtfaGVhZGVyIjogZmFsc2UsICJzdGVwX2xhYmVsIjogbnVsbH1dLCAid29ya2Zsb3dzIjog
W3siYWN0aW9ucyI6IFtdLCAiZGVzY3JpcHRpb24iOiBudWxsLCAibmFtZSI6ICJFeGFtcGxlOiBD
bG9zZSBJbmNpZGVudCIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJwcm9ncmFtbWF0aWNf
bmFtZSI6ICJleGFtcGxlX2Nsb3NlX2luY2lkZW50IiwgInRhZ3MiOiBbXSwgInV1aWQiOiBudWxs
LCAid29ya2Zsb3dfaWQiOiA5OX1dfV0sICJnZW9zIjogbnVsbCwgImdyb3VwcyI6IG51bGwsICJp
ZCI6IDQyLCAiaW5ib3VuZF9tYWlsYm94ZXMiOiBudWxsLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlw
ZXMiOiBbXSwgImluY2lkZW50X3R5cGVzIjogW3sidXBkYXRlX2RhdGUiOiAxNjA1NjM5OTMyMDM5
LCAiY3JlYXRlX2RhdGUiOiAxNjA1NjM5OTMyMDM5LCAidXVpZCI6ICJiZmVlYzJkNC0zNzcwLTEx
ZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNr
YWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAo
aW50ZXJuYWwpIiwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwg
ImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhp
ZGRlbiI6IGZhbHNlLCAiaWQiOiAwfV0sICJpbmR1c3RyaWVzIjogbnVsbCwgImxheW91dHMiOiBb
XSwgImxvY2FsZSI6IG51bGwsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7ImFwaV9rZXlzIjog
W10sICJkZXN0aW5hdGlvbl90eXBlIjogMCwgImV4cGVjdF9hY2siOiB0cnVlLCAiZXhwb3J0X2tl
eSI6ICJmbl9pbmNpZGVudF91dGlscyIsICJuYW1lIjogImZuX2luY2lkZW50X3V0aWxzIiwgInBy
b2dyYW1tYXRpY19uYW1lIjogImZuX2luY2lkZW50X3V0aWxzIiwgInRhZ3MiOiBbXSwgInVzZXJz
IjogWyJhQGV4YW1wbGUuY29tIl0sICJ1dWlkIjogIjM2ZTlmM2ZjLWMzZTktNGJjZi04NWJkLWFi
MjI0NDZjMjQ2MSJ9XSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAib3ZlcnJpZGVzIjogW10sICJw
aGFzZXMiOiBbXSwgInJlZ3VsYXRvcnMiOiBudWxsLCAicm9sZXMiOiBbXSwgInNjcmlwdHMiOiBb
XSwgInNlcnZlcl92ZXJzaW9uIjogeyJidWlsZF9udW1iZXIiOiA1NjM0LCAibWFqb3IiOiAzNiwg
Im1pbm9yIjogMCwgInZlcnNpb24iOiAiMzYuMC41NjM0In0sICJ0YWdzIjogW10sICJ0YXNrX29y
ZGVyIjogW10sICJ0aW1lZnJhbWVzIjogbnVsbCwgInR5cGVzIjogW10sICJ3b3JrZmxvd3MiOiBb
eyJhY3Rpb25zIjogW10sICJjb250ZW50IjogeyJ2ZXJzaW9uIjogNCwgIndvcmtmbG93X2lkIjog
ImV4YW1wbGVfY2xvc2VfaW5jaWRlbnQiLCAieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBl
bmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9y
Zy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxp
ZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5z
dGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48
cHJvY2VzcyBpZD1cImV4YW1wbGVfY2xvc2VfaW5jaWRlbnRcIiBpc0V4ZWN1dGFibGU9XCJ0cnVl
XCIgbmFtZT1cIkV4YW1wbGU6IENsb3NlIEluY2lkZW50XCI+PGRvY3VtZW50YXRpb24+QW4gZXhh
bXBsZSB3b3JrZmxvdyB3aGljaCB0YWtlcyBhbiBpbmNpZGVudF9pZCBhbmQgb3B0aW9uYWwgY2xv
c2VfZmllbGRzIGluIG9yZGVyIHRvIGNsb3NlIGFuIEluY2lkZW50LjwvZG9jdW1lbnRhdGlvbj48
c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZs
b3dfMWttOHE5bzwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZp
Y2VUYXNrXzBxNjkyczJcIiBuYW1lPVwiSW5jaWRlbnQgVXRpbHM6IENsb3NlIEluY2lkZW50XCIg
cmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50
OmZ1bmN0aW9uIHV1aWQ9XCI3YTExNTZmNy1hMDBkLTRmNzUtODAzNS1hNDFmNDBhYzk4MGZcIj57
XCJpbnB1dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIm5vdGVfdGV4dCA9IFxc
XCJSZXN1bHQgZnJvbSBFeGFtcGxlOiBDbG9zZSBJbmNpZGVudCBvbiBJbmNpZGVudCB7MH06ICZs
dDtzdHJvbmcmZ3Q7ezF9Jmx0Oy9zdHJvbmcmZ3Q7XFxcIi5mb3JtYXQocmVzdWx0cy5pbnB1dHNb
J2luY2lkZW50X2lkJ10sIFxcXFxcXG5cXFwic3VjY2Vzc1xcXCIgaWYgcmVzdWx0cy5zdWNjZXNz
IGVsc2UgXFxcImZhaWx1cmUuJmx0O2JyJmd0O1JlYXNvbjoge31cXFwiLmZvcm1hdChyZXN1bHRz
LnJlYXNvbikpXFxuaW5jaWRlbnQuYWRkTm90ZShoZWxwZXIuY3JlYXRlUmljaFRleHQobm90ZV90
ZXh0KSlcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5wdXRzLmluY2lkZW50X2lkID0g
aW5jaWRlbnQuaWRcXG5pdV9jbG9zZV9maWVsZHMgPSBydWxlLnByb3BlcnRpZXMuaW5jaWRlbnRf
dXRpbHNfY2xvc2VfZmllbGRzLmNvbnRlbnRcXG5pbnB1dHMuY2xvc2VfZmllbGRzID0gdVxcXCJ7
fVxcXCIuZm9ybWF0KGl1X2Nsb3NlX2ZpZWxkcylcIn08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4
dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMWttOHE5bzwvaW5jb21pbmc+
PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wdnljbmdvPC9vdXRnb2luZz48L3NlcnZpY2VUYXNrPjxz
ZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMWttOHE5b1wiIHNvdXJjZVJlZj1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzBxNjkyczJcIi8+PGVuZEV2
ZW50IGlkPVwiRW5kRXZlbnRfMDZkbDNvZFwiPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHZ5Y25n
bzwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzB2
eWNuZ29cIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wcTY5MnMyXCIgdGFyZ2V0UmVmPVwiRW5k
RXZlbnRfMDZkbDNvZFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xZjVv
d2cwXCI+PHRleHQ+PCFbQ0RBVEFbSW5wdXRzOlxuaW5jaWRlbnRfaWQsIGNsb3NlX2ZpZWxkc11d
PjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzAy
N3I1cXBcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wcTY5MnMyXCIgdGFyZ2V0UmVmPVwiVGV4
dEFubm90YXRpb25fMWY1b3dnMFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlv
bl8xamRvZTFzXCI+PHRleHQ+PCFbQ0RBVEFbT3V0cHV0OlxuQ2xvc2VzIHRoZSBJbmNpZGVudCBz
aG91bGQgcmVmbGVjdCB0aGUgYWN0aW9uIGFmdGVyIHRoZSBmdW5jdGlvbiBydW5zLiBBIE5vdGUg
aXMgY3JlYXRlZCB3aXRoIHRoZSBmdW5jdGlvbiByZXN1bHRzLlxuXV0+PC90ZXh0PjwvdGV4dEFu
bm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMDB5Y293bVwiIHNvdXJjZVJl
Zj1cIlNlcnZpY2VUYXNrXzBxNjkyczJcIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xamRv
ZTFzXCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwi
PjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxh
bmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3ht
XCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2
XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wi
Lz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBl
IGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMHE2OTJzMlwiIGlkPVwiU2VydmljZVRhc2tfMHE2
OTJzMl9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIz
NTJcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5F
bGVtZW50PVwiU2VxdWVuY2VGbG93XzFrbThxOW9cIiBpZD1cIlNlcXVlbmNlRmxvd18xa204cTlv
X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIg
eT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjI3NVwiIHhzaTp0eXBlPVwib21nZGM6UG9p
bnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMjc1XCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIzNTJcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjI5MFwiIHk9XCIxOTkuNVwiLz48L2JwbW5k
aTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1l
bnQ9XCJUZXh0QW5ub3RhdGlvbl8xZjVvd2cwXCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xZjVvd2cw
X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI1OFwiIHdpZHRoPVwiOThcIiB4PVwiMjMxXCIg
eT1cIjMzXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50
PVwiQXNzb2NpYXRpb25fMDI3cjVxcFwiIGlkPVwiQXNzb2NpYXRpb25fMDI3cjVxcF9kaVwiPjxv
bWdkaTp3YXlwb2ludCB4PVwiMzY4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNjZc
Ii8+PG9tZ2RpOndheXBvaW50IHg9XCIzMDVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjkxXCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwi
VGV4dEFubm90YXRpb25fMWpkb2Uxc1wiIGlkPVwiVGV4dEFubm90YXRpb25fMWpkb2Uxc19kaVwi
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNzlcIiB3aWR0aD1cIjE4OVwiIHg9XCI0NjVcIiB5PVwi
MTJcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJB
c3NvY2lhdGlvbl8wMHljb3dtXCIgaWQ9XCJBc3NvY2lhdGlvbl8wMHljb3dtX2RpXCI+PG9tZ2Rp
OndheXBvaW50IHg9XCI0NDNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE2N1wiLz48
b21nZGk6d2F5cG9pbnQgeD1cIjUyMVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiOTFc
Ii8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRF
dmVudF8wNmRsM29kXCIgaWQ9XCJFbmRFdmVudF8wNmRsM29kX2RpXCI+PG9tZ2RjOkJvdW5kcyBo
ZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiNTk2LjgwMzc5NzQ2ODM1NDRcIiB5PVwiMTg4
XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1c
IjBcIiB4PVwiNjE0LjgwMzc5NzQ2ODM1NDRcIiB5PVwiMjI3XCIvPjwvYnBtbmRpOkJQTU5MYWJl
bD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVl
bmNlRmxvd18wdnljbmdvXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHZ5Y25nb19kaVwiPjxvbWdkaTp3
YXlwb2ludCB4PVwiNDUyXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9t
Z2RpOndheXBvaW50IHg9XCI1OTdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwi
Lz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIw
XCIgeD1cIjUyNC41XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBN
TkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlv
bnM+In0sICJjb250ZW50X3ZlcnNpb24iOiA0LCAiY3JlYXRvcl9pZCI6ICJhQGV4YW1wbGUuY29t
IiwgImRlc2NyaXB0aW9uIjogIkFuIGV4YW1wbGUgd29ya2Zsb3cgd2hpY2ggdGFrZXMgYW4gaW5j
aWRlbnRfaWQgYW5kIG9wdGlvbmFsIGNsb3NlX2ZpZWxkcyBpbiBvcmRlciB0byBjbG9zZSBhbiBJ
bmNpZGVudC4iLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX2Nsb3NlX2luY2lkZW50IiwgImxhc3Rf
bW9kaWZpZWRfYnkiOiAiYUBleGFtcGxlLmNvbSIsICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNjA1
NjM4ODg4ODA0LCAibmFtZSI6ICJFeGFtcGxlOiBDbG9zZSBJbmNpZGVudCIsICJvYmplY3RfdHlw
ZSI6ICJpbmNpZGVudCIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX2Nsb3NlX2luY2lk
ZW50IiwgInRhZ3MiOiBbXSwgInV1aWQiOiAiMzQ4ZDEwZjctMTRlMy00MmJmLThlZjgtNTgzNGZh
ZWIyNWIxIiwgIndvcmtmbG93X2lkIjogOTl9XSwgIndvcmtzcGFjZXMiOiBbXX0=
""")
