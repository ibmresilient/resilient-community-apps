# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_GRPC_Interface"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_GRPC_Interface package"""
    reload_params = {"package": u"fn_GRPC_Interface",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"grpc_channel", u"grpc_communication_type", u"grpc_data", u"grpc_interface_dir", u"grpc_io_name", u"grpc_request_function_name", u"grpc_secure_connection"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_grpc"], 
                    "functions": [u"grpc"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [],
                    "actions": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     grpc_channel
    #     grpc_communication_type
    #     grpc_data
    #     grpc_interface_dir
    #     grpc_io_name
    #     grpc_request_function_name
    #     grpc_secure_connection
    #   Message Destinations:
    #     fn_grpc
    #   Functions:
    #     grpc


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMCwgIm1pbm9yIjogNCwgImJ1aWxkX251bWJl
ciI6IDIzNywgInZlcnNpb24iOiAiMzAuNC4yMzcifSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6
IDIsICJpZCI6IDI4LCAiZXhwb3J0X2RhdGUiOiAxNTQ2MjYxMTk3MjU1LCAiZmllbGRzIjogW3si
aWQiOiA1MSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJw
cmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDAsICJ0b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lk
ZW50IGlzIGEgc2ltdWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuICBUaGlzIGZpZWxkIGlz
IHJlYWQtb25seS4iLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwgImhpZGVfbm90aWZpY2F0aW9u
IjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZh
bHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICJj
M2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAib3BlcmF0aW9ucyI6IFtdLCAi
b3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IHRydWUsICJj
aGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJpbmNp
ZGVudC9pbmNfdHJhaW5pbmciLCAidGVtcGxhdGVzIjogW119LCB7ImlkIjogMTQ0LCAibmFtZSI6
ICJncnBjX3NlY3VyZV9jb25uZWN0aW9uIiwgInRleHQiOiAiZ3JwY19zZWN1cmVfY29ubmVjdGlv
biIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRpcCI6ICIiLCAicGxhY2Vo
b2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxz
ZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiZTM1
YjlmNTUtZGJiYy00NzNlLWIzNjgtMzNkNmViMzJmMTkzIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNo
YW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVu
Y3Rpb24vZ3JwY19zZWN1cmVfY29ubmVjdGlvbiIsICJ0ZW1wbGF0ZXMiOiBbXX0sIHsiaWQiOiAx
NDcsICJuYW1lIjogImdycGNfcmVxdWVzdF9mdW5jdGlvbl9uYW1lIiwgInRleHQiOiAiZ3JwY19y
ZXF1ZXN0X2Z1bmN0aW9uX25hbWUiLCAicHJlZml4IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRv
b2x0aXAiOiAiIiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogInRleHQiLCAiaGlk
ZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5f
Ynlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjogZmFs
c2UsICJ1dWlkIjogImQwOTg3OGRjLWQxMWYtNGUyZS1iMTEyLWQ1M2U1ODgyZTI1ZiIsICJvcGVy
YXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVhZF9v
bmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiZXhw
b3J0X2tleSI6ICJfX2Z1bmN0aW9uL2dycGNfcmVxdWVzdF9mdW5jdGlvbl9uYW1lIiwgInRlbXBs
YXRlcyI6IFtdfSwgeyJpZCI6IDE0MywgIm5hbWUiOiAiZ3JwY19pb19uYW1lIiwgInRleHQiOiAi
Z3JwY19pb19uYW1lIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlwIjog
IiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImhpZGVfbm90aWZp
Y2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZl
ciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVp
ZCI6ICI3YjU1ODZiMS0yM2YxLTQzZGUtYTk5ZS03NzRkMzQ3NGYyNTciLCAib3BlcmF0aW9ucyI6
IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZh
bHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXki
OiAiX19mdW5jdGlvbi9ncnBjX2lvX25hbWUiLCAidGVtcGxhdGVzIjogW119LCB7ImlkIjogMTQ2
LCAibmFtZSI6ICJncnBjX2RhdGEiLCAidGV4dCI6ICJncnBjX2RhdGEiLCAicHJlZml4IjogbnVs
bCwgInR5cGVfaWQiOiAxMSwgInRvb2x0aXAiOiAiIiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1
dF90eXBlIjogInRleHQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6IGZh
bHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBm
YWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogImE0YTNiZDlkLTM4NjctNGQzMS1iNTFi
LTIyM2RkZjBhMmNkYiIsICJvcGVyYXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwg
InZhbHVlcyI6IFtdLCAicmVhZF9vbmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJp
Y2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2dycGNfZGF0YSIsICJ0
ZW1wbGF0ZXMiOiBbXX0sIHsiaWQiOiAxNDEsICJuYW1lIjogImdycGNfY2hhbm5lbCIsICJ0ZXh0
IjogImdycGNfY2hhbm5lbCIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRp
cCI6ICIiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4dCIsICJoaWRlX25v
dGlmaWNhdGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9z
ZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwg
InV1aWQiOiAiMzNiZjdjNDEtMWY0NS00ZDJjLWI5MTUtOTExNDUzZGIxZDVlIiwgIm9wZXJhdGlv
bnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHki
OiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRf
a2V5IjogIl9fZnVuY3Rpb24vZ3JwY19jaGFubmVsIiwgInRlbXBsYXRlcyI6IFtdfSwgeyJpZCI6
IDE0MiwgIm5hbWUiOiAiZ3JwY19pbnRlcmZhY2VfZGlyIiwgInRleHQiOiAiZ3JwY19pbnRlcmZh
Y2VfZGlyIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlwIjogIiIsICJw
bGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImhpZGVfbm90aWZpY2F0aW9u
IjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZh
bHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICI5
YjFiOWZhNS0yNmYzLTQxNmYtOTk4MS03ZTE4MWQyOTQwYmYiLCAib3BlcmF0aW9ucyI6IFtdLCAi
b3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZhbHNlLCAi
Y2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiX19m
dW5jdGlvbi9ncnBjX2ludGVyZmFjZV9kaXIiLCAidGVtcGxhdGVzIjogW119LCB7ImlkIjogMTQ1
LCAibmFtZSI6ICJncnBjX2NvbW11bmljYXRpb25fdHlwZSIsICJ0ZXh0IjogImdycGNfY29tbXVu
aWNhdGlvbl90eXBlIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlwIjog
IiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImhpZGVfbm90aWZp
Y2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZl
ciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVp
ZCI6ICJlYzdiZjBhMC00ZWZmLTRiNTItOGFjYS1iNmNiZGQ2MTY1NjUiLCAib3BlcmF0aW9ucyI6
IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZh
bHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXki
OiAiX19mdW5jdGlvbi9ncnBjX2NvbW11bmljYXRpb25fdHlwZSIsICJ0ZW1wbGF0ZXMiOiBbXX1d
LCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1NDYyNjEzNjAwMDEsICJjcmVh
dGVfZGF0ZSI6IDE1NDYyNjEzNjAwMDEsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5
LTRhMDAwNDA0NGFhMCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChp
bnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5h
bCkiLCAibmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZW5hYmxl
ZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVuIjog
ZmFsc2UsICJpZCI6IDB9XSwgInBoYXNlcyI6IFtdLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJv
dmVycmlkZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sibmFtZSI6ICJmbl9ncnBj
IiwgInByb2dyYW1tYXRpY19uYW1lIjogImZuX2dycGMiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAs
ICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJua2FuZGhhMUBpbi5pYm0uY29tIl0sICJ1
dWlkIjogImIwODdmMzNhLTIxYzctNGE5Yy1iNjA1LTAyYzcxOTk3NjM5MiIsICJleHBvcnRfa2V5
IjogImZuX2dycGMifV0sICJhY3Rpb25zIjogW10sICJsYXlvdXRzIjogW10sICJub3RpZmljYXRp
b25zIjogbnVsbCwgInRpbWVmcmFtZXMiOiBudWxsLCAiaW5kdXN0cmllcyI6IG51bGwsICJyZWd1
bGF0b3JzIjogbnVsbCwgImdlb3MiOiBudWxsLCAidGFza19vcmRlciI6IFtdLCAiYWN0aW9uX29y
ZGVyIjogW10sICJ0eXBlcyI6IFtdLCAic2NyaXB0cyI6IFtdLCAiaW5jaWRlbnRfYXJ0aWZhY3Rf
dHlwZXMiOiBbXSwgIndvcmtmbG93cyI6IFtdLCAicm9sZXMiOiBbXSwgIndvcmtzcGFjZXMiOiBb
XSwgImZ1bmN0aW9ucyI6IFt7ImlkIjogMjgsICJuYW1lIjogImdycGMiLCAiZGlzcGxheV9uYW1l
IjogIkdSUEMiLCAiZGVzY3JpcHRpb24iOiB7ImZvcm1hdCI6ICJ0ZXh0IiwgImNvbnRlbnQiOiAi
QSBmdW5jdGlvbiB0byBjb21tdW5pY2F0ZSB3aXRoIGdSUEMgU2VydmVycyJ9LCAiZGVzdGluYXRp
b25faGFuZGxlIjogImZuX2dycGMiLCAiZXhwb3J0X2tleSI6ICJncnBjIiwgInV1aWQiOiAiMGY5
Njk2MDgtZjIyZi00YTZiLWE3NDMtYWYwMWEyMWQ2OTNjIiwgInZlcnNpb24iOiAyLCAiY3JlYXRv
ciI6IHsiaWQiOiA2LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAibmthbmRoYTFAaW4uaWJtLmNv
bSIsICJkaXNwbGF5X25hbWUiOiAiTml0aW4gS2FuZGhhcmUgIn0sICJsYXN0X21vZGlmaWVkX2J5
IjogeyJpZCI6IDYsICJ0eXBlIjogInVzZXIiLCAibmFtZSI6ICJua2FuZGhhMUBpbi5pYm0uY29t
IiwgImRpc3BsYXlfbmFtZSI6ICJOaXRpbiBLYW5kaGFyZSAifSwgImxhc3RfbW9kaWZpZWRfdGlt
ZSI6IDE1NDYyNDkxNzM1MTYsICJ2aWV3X2l0ZW1zIjogW3sic3RlcF9sYWJlbCI6IG51bGwsICJz
aG93X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9f
ZnVuY3Rpb24iLCAiY29udGVudCI6ICIzM2JmN2M0MS0xZjQ1LTRkMmMtYjkxNS05MTE0NTNkYjFk
NWUiLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xhYmVsIjogbnVsbCwgInNo
b3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19m
dW5jdGlvbiIsICJjb250ZW50IjogIjliMWI5ZmE1LTI2ZjMtNDE2Zi05OTgxLTdlMTgxZDI5NDBi
ZiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9LCB7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hv
d19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1
bmN0aW9uIiwgImNvbnRlbnQiOiAiZTM1YjlmNTUtZGJiYy00NzNlLWIzNjgtMzNkNmViMzJmMTkz
IiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93
X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVu
Y3Rpb24iLCAiY29udGVudCI6ICI3YjU1ODZiMS0yM2YxLTQzZGUtYTk5ZS03NzRkMzQ3NGYyNTci
LCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xhYmVsIjogbnVsbCwgInNob3df
aWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5j
dGlvbiIsICJjb250ZW50IjogImVjN2JmMGEwLTRlZmYtNGI1Mi04YWNhLWI2Y2JkZDYxNjU2NSIs
ICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9LCB7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19p
ZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0
aW9uIiwgImNvbnRlbnQiOiAiYTRhM2JkOWQtMzg2Ny00ZDMxLWI1MWItMjIzZGRmMGEyY2RiIiwg
InNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2lm
IjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rp
b24iLCAiY29udGVudCI6ICJkMDk4NzhkYy1kMTFmLTRlMmUtYjExMi1kNTNlNTg4MmUyNWYiLCAi
c2hvd19saW5rX2hlYWRlciI6IGZhbHNlfV0sICJ3b3JrZmxvd3MiOiBbeyJ3b3JrZmxvd19pZCI6
IDMwLCAibmFtZSI6ICJFeGFtcGxlOiBHUlBDIENvbW11bmljYXRpb24gSW50ZXJmYWNlIiwgInBy
b2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfZ3JwY19jb21tdW5pY2F0aW9uX2ludGVyZmFjZSIs
ICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJkZXNjcmlwdGlvbiI6IG51bGwsICJ1dWlkIjog
bnVsbCwgImFjdGlvbnMiOiBbXX0sIHsid29ya2Zsb3dfaWQiOiAzMSwgIm5hbWUiOiAiRXhhbXBs
ZTogR1JQQyBDb21tdW5pY2F0aW9uIEludGVyZmFjZSBDbGllbnQxIiwgInByb2dyYW1tYXRpY19u
YW1lIjogImV4YW1wbGVfZ3JwY19jb21tdW5pY2F0aW9uX2ludGVyZmFjZV9jbGllbnQxIiwgIm9i
amVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2NyaXB0aW9uIjogbnVsbCwgInV1aWQiOiBudWxs
LCAiYWN0aW9ucyI6IFtdfV19XX0=
"""
    )