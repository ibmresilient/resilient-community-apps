{"action_order": [], "actions": [{"automations": [], "conditions": [{"evaluation_id": null, "field_name": "artifact.type", "method": "in", "type": null, "value": ["URL", "URL Referer"]}], "enabled": true, "export_key": "URLScan.io Hits", "id": 29, "logic_type": "all", "message_destinations": [], "name": "URLScan.io Hits", "object_type": "artifact", "tags": [], "timeout_seconds": 86400, "type": 0, "uuid": "2be63ea6-6dc9-4353-a8b7-c5b0966f9d97", "view_items": [], "workflows": ["urlscanio_hits"]}], "apps": [], "automatic_tasks": [], "export_date": 1651695646619, "export_format_version": 2, "export_type": null, "fields": [{"export_key": "incident/internal_customizations_field", "id": 0, "input_type": "text", "internal": true, "name": "internal_customizations_field", "read_only": true, "text": "Customizations Field (internal)", "type_id": 0, "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa1"}], "functions": [], "geos": null, "groups": null, "id": 96, "inbound_destinations": [], "inbound_mailboxes": null, "incident_artifact_types": [], "incident_types": [{"update_date": 1651695644638, "create_date": 1651695644638, "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa0", "description": "Customization Packages (internal)", "export_key": "Customization Packages (internal)", "name": "Customization Packages (internal)", "enabled": false, "system": false, "parent_id": null, "hidden": false, "id": 0}], "industries": null, "layouts": [], "locale": null, "message_destinations": [], "notifications": null, "overrides": [], "phases": [], "playbooks": null, "regulators": null, "roles": [], "scripts": [], "server_version": {"build_number": 49, "major": 43, "minor": 1, "version": "43.1.49"}, "tags": [], "task_order": [], "timeframes": null, "types": [], "workflows": [{"actions": [], "content": {"version": 19, "workflow_id": "urlscanio_hits", "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:resilient=\"http://resilient.ibm.com/bpmn\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" targetNamespace=\"http://www.camunda.org/test\"><process id=\"urlscanio_hits\" isExecutable=\"true\" name=\"URLScan.io Hits\"><documentation>Queries URLScan.io to determine if a URL is malicious. This Workflow requires SOAR v43 or greater in order to add hits to the artifact.</documentation><startEvent id=\"StartEvent_155asxm\"><outgoing>SequenceFlow_0jmucb1</outgoing></startEvent><endEvent id=\"EndEvent_0lrz8h4\"><incoming>SequenceFlow_1470lxu</incoming></endEvent><sequenceFlow id=\"SequenceFlow_0jmucb1\" sourceRef=\"StartEvent_155asxm\" targetRef=\"ServiceTask_1jds5z2\"/><serviceTask id=\"ServiceTask_1jds5z2\" name=\"Scan with urlscan.io\" resilient:type=\"function\"><extensionElements><resilient:function uuid=\"d19c1f00-b4f1-4480-b8a3-7bdd19143041\">{\"inputs\":{},\"post_processing_script\":\"def verify_for_scan_failed_flag(result_content):\\n      \\\"\\\"\\\" Verify if scan failed \\\"\\\"\\\"\\n\\n      result_data = result_content.get('data', None)\\n      if not result_data:\\n          return True\\n\\n      result_data_requests_list = result_data.get('requests', None)\\n      if not result_data_requests_list:\\n          return True\\n\\n      # get first element from the list\\n      requests_first_el = result_data_requests_list[0]\\n      if not requests_first_el:\\n          return True\\n\\n      response = requests_first_el.get('response', None)\\n      if not response or 'failed' in response:\\n          return True\\n\\n      return False\\n\\ndef prepare_city_country(*argv):\\n        \\\"\\\"\\\"\\n        Prepare a list of non None value or blank \\\"Falsy\\\" parameters.\\n        :param *argv - city, country\\n        :return: list\\n        \\\"\\\"\\\"\\n        city_country_list = [el for el in argv if el]\\n        return city_country_list\\n\\nif results.png_url is not None:\\n  result_content = results.report\\n\\n  stats = result_content.get('stats', None)\\n  if stats:\\n      verdicts = result_content.get('verdicts', None)\\n      urlscan = verdicts.get('urlscan', None)\\n      malicious_flag = urlscan.get('malicious', None)\\n\\n      if malicious_flag == 1:\\n\\n          # Some malicious scans show as failed, do not include those\\n          if not verify_for_scan_failed_flag(result_content):\\n            task = result_content.get('task', None)\\n            page = result_content.get('page', None)\\n  \\n            png_url = task.get('screenshotURL', None) if task else None\\n            scan_time = task.get('time', None) if task else None\\n            report_url = task.get('reportURL', None) if task else None\\n            uniq_countries_int = stats.get('uniqCountries', None)\\n            city_country_list = prepare_city_country(page.get('city', None),\\n                                                          page.get('country', None)) if page else None\\n            city_country = \\\",\\\".join(city_country_list) if city_country_list else None\\n            server = page.get('server', None) if page else None\\n            asn = page.get('asnname', None) if page else None\\n            \\n            hit = [\\n                {\\n                  \\\"name\\\": \\\"Time Last Scanner\\\",\\n                  \\\"type\\\": \\\"string\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(scan_time)\\n                }, \\n                {\\n                  \\\"name\\\": \\\"Number of Countries\\\",\\n                  \\\"type\\\": \\\"number\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(uniq_countries_int)\\n                }, \\n                {\\n                  \\\"name\\\": \\\"City and Country\\\",\\n                  \\\"type\\\": \\\"string\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(city_country)\\n                },\\n                {\\n                  \\\"name\\\": \\\"Server\\\",\\n                  \\\"type\\\": \\\"string\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(server)\\n                },\\n                {\\n                  \\\"name\\\": \\\"ASN Name\\\",\\n                  \\\"type\\\": \\\"string\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(asn)\\n                },\\n                {\\n                  \\\"name\\\": \\\"Report Link\\\",\\n                  \\\"type\\\": \\\"uri\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(report_url)\\n                },\\n                {\\n                  \\\"name\\\": \\\"Screenshot Link\\\",\\n                  \\\"type\\\": \\\"uri\\\",\\n                  \\\"value\\\": \\\"{}\\\".format(png_url)\\n                }\\n                ]\\n            artifact.addHit(\\\"URLScan.io Function hits added\\\", hit)\\nelse:\\n  LOG.info(\\\"No Result information found on URL: {0}\\\".format(result_url))\\n\\n\",\"post_processing_script_language\":\"python3\",\"pre_processing_script\":\"# This is an artifact workflow; \\n# The URL to scan is the artifact value\\ninputs.urlscanio_url = artifact.value\\n\\n# Set the incident id\\ninputs.incident_id = incident.id\",\"pre_processing_script_language\":\"python3\"}</resilient:function></extensionElements><incoming>SequenceFlow_0jmucb1</incoming><outgoing>SequenceFlow_1470lxu</outgoing></serviceTask><sequenceFlow id=\"SequenceFlow_1470lxu\" sourceRef=\"ServiceTask_1jds5z2\" targetRef=\"EndEvent_0lrz8h4\"/><textAnnotation id=\"TextAnnotation_1kxxiyt\"><text>Start your workflow here</text></textAnnotation><association id=\"Association_1seuj48\" sourceRef=\"StartEvent_155asxm\" targetRef=\"TextAnnotation_1kxxiyt\"/><textAnnotation id=\"TextAnnotation_0av8twe\"><text>Results are returned as a hit in the artifact</text></textAnnotation><association id=\"Association_19hzf0g\" sourceRef=\"ServiceTask_1jds5z2\" targetRef=\"TextAnnotation_0av8twe\"/></process><bpmndi:BPMNDiagram id=\"BPMNDiagram_1\"><bpmndi:BPMNPlane bpmnElement=\"undefined\" id=\"BPMNPlane_1\"><bpmndi:BPMNShape bpmnElement=\"StartEvent_155asxm\" id=\"StartEvent_155asxm_di\"><omgdc:Bounds height=\"36\" width=\"36\" x=\"162\" y=\"188\"/><bpmndi:BPMNLabel><omgdc:Bounds height=\"0\" width=\"90\" x=\"157\" y=\"223\"/></bpmndi:BPMNLabel></bpmndi:BPMNShape><bpmndi:BPMNShape bpmnElement=\"TextAnnotation_1kxxiyt\" id=\"TextAnnotation_1kxxiyt_di\"><omgdc:Bounds height=\"30\" width=\"100\" x=\"99\" y=\"254\"/></bpmndi:BPMNShape><bpmndi:BPMNEdge bpmnElement=\"Association_1seuj48\" id=\"Association_1seuj48_di\"><omgdi:waypoint x=\"169\" xsi:type=\"omgdc:Point\" y=\"220\"/><omgdi:waypoint x=\"153\" xsi:type=\"omgdc:Point\" y=\"254\"/></bpmndi:BPMNEdge><bpmndi:BPMNShape bpmnElement=\"EndEvent_0lrz8h4\" id=\"EndEvent_0lrz8h4_di\"><omgdc:Bounds height=\"36\" width=\"36\" x=\"532\" y=\"188\"/><bpmndi:BPMNLabel><omgdc:Bounds height=\"13\" width=\"90\" x=\"505\" y=\"227\"/></bpmndi:BPMNLabel></bpmndi:BPMNShape><bpmndi:BPMNEdge bpmnElement=\"SequenceFlow_0jmucb1\" id=\"SequenceFlow_0jmucb1_di\"><omgdi:waypoint x=\"198\" xsi:type=\"omgdc:Point\" y=\"206\"/><omgdi:waypoint x=\"318\" xsi:type=\"omgdc:Point\" y=\"206\"/><bpmndi:BPMNLabel><omgdc:Bounds height=\"13\" width=\"0\" x=\"258\" y=\"184.5\"/></bpmndi:BPMNLabel></bpmndi:BPMNEdge><bpmndi:BPMNShape bpmnElement=\"ServiceTask_1jds5z2\" id=\"ServiceTask_1jds5z2_di\"><omgdc:Bounds height=\"80\" width=\"100\" x=\"318\" y=\"166\"/></bpmndi:BPMNShape><bpmndi:BPMNEdge bpmnElement=\"SequenceFlow_1470lxu\" id=\"SequenceFlow_1470lxu_di\"><omgdi:waypoint x=\"418\" xsi:type=\"omgdc:Point\" y=\"206\"/><omgdi:waypoint x=\"532\" xsi:type=\"omgdc:Point\" y=\"206\"/><bpmndi:BPMNLabel><omgdc:Bounds height=\"13\" width=\"90\" x=\"430\" y=\"184.5\"/></bpmndi:BPMNLabel></bpmndi:BPMNEdge><bpmndi:BPMNShape bpmnElement=\"TextAnnotation_0av8twe\" id=\"TextAnnotation_0av8twe_di\"><omgdc:Bounds height=\"62\" width=\"102\" x=\"443\" y=\"70\"/></bpmndi:BPMNShape><bpmndi:BPMNEdge bpmnElement=\"Association_19hzf0g\" id=\"Association_19hzf0g_di\"><omgdi:waypoint x=\"412\" xsi:type=\"omgdc:Point\" y=\"170\"/><omgdi:waypoint x=\"457\" xsi:type=\"omgdc:Point\" y=\"132\"/></bpmndi:BPMNEdge></bpmndi:BPMNPlane></bpmndi:BPMNDiagram></definitions>"}, "content_version": 19, "creator_id": "admin@example.com", "description": "Queries URLScan.io to determine if a URL is malicious. This Workflow requires SOAR v43 or greater in order to add hits to the artifact.", "export_key": "urlscanio_hits", "last_modified_by": "admin@example.com", "last_modified_time": 1651691947085, "name": "URLScan.io Hits", "object_type": "artifact", "programmatic_name": "urlscanio_hits", "tags": [], "uuid": "bc4f3317-1676-4d4e-b12e-9f2a907e97f6", "workflow_id": 24}], "workspaces": []}