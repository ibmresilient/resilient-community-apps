# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_symantec_dlp"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_symantec_dlp package"""
    reload_params = {"package": u"fn_symantec_dlp",
                    "incident_fields": [u"sdlp_incident_id", u"sdlp_incident_url"], 
                    "action_fields": [], 
                    "function_params": [u"sdlp_update_payload"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_symantec_dlp"], 
                    "functions": [u"fn_symantec_dlp_update_incident"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"sdlp_set_incident_status"], 
                    "actions": [u"Example: Symantec DLP - Update DLP when this Incident is closed "], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     sdlp_incident_id
    #     sdlp_incident_url
    #   Function inputs:
    #     sdlp_update_payload
    #   Message Destinations:
    #     fn_symantec_dlp
    #   Functions:
    #     fn_symantec_dlp_update_incident
    #   Workflows:
    #     sdlp_set_incident_status
    #   Rules:
    #     Example: Symantec DLP - Update DLP when this Incident is closed 


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMCwgImJ1aWxkX251bWJl
ciI6IDQyMzUsICJ2ZXJzaW9uIjogIjMxLjAuNDIzNSJ9LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9u
IjogMiwgImlkIjogNTMsICJleHBvcnRfZGF0ZSI6IDE1NzE2NTU3MjQ1NjMsICJmaWVsZHMiOiBb
eyJpZCI6IDQzNywgIm5hbWUiOiAic2RscF9pbmNpZGVudF9pZCIsICJ0ZXh0IjogIlN5bWFudGVj
IERMUCBJbmNpZGVudCBJRCIsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJ0eXBlX2lkIjogMCwg
InRvb2x0aXAiOiAiVGhlIElEIG9mIGEgU3ltYW50ZWMgRExQIEluY2lkZW50IiwgInBsYWNlaG9s
ZGVyIjogIiIsICJpbnB1dF90eXBlIjogIm51bWJlciIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZh
bHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwg
ImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiNTVmMzVl
MjItMTYxMC00MmIwLWFjY2MtZjY1OTc0ZTg2ZTRlIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9wZXJh
dGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNoYW5n
ZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogImluY2lkZW50
L3NkbHBfaW5jaWRlbnRfaWQiLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFsc2V9
LCB7ImlkIjogNDM4LCAibmFtZSI6ICJzZGxwX2luY2lkZW50X3VybCIsICJ0ZXh0IjogIlN5bWFu
dGVjIERMUCBJbmNpZGVudCBVUkwgIiwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgInR5cGVfaWQi
OiAwLCAidG9vbHRpcCI6ICIiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4
dGFyZWEiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVm
YXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImlu
dGVybmFsIjogZmFsc2UsICJ1dWlkIjogIjQ5NTk4NjkzLTJhYzMtNDNhZi1hMjZiLTAxMWNkYmU3
YmQ0YSIsICJvcGVyYXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6
IFtdLCAicmVhZF9vbmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6
IHRydWUsICJleHBvcnRfa2V5IjogImluY2lkZW50L3NkbHBfaW5jaWRlbnRfdXJsIiwgInRlbXBs
YXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZhbHNlfSwgeyJpZCI6IDQ3MiwgIm5hbWUiOiAic2Rs
cF91cGRhdGVfcGF5bG9hZCIsICJ0ZXh0IjogInNkbHBfdXBkYXRlX3BheWxvYWQiLCAicHJlZml4
IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRvb2x0aXAiOiAiQSBKU09OLWxpa2Ugb2JqZWN0IHdo
aWNoIGNvbnRhaW5zIHZhbHVlcyB0byBiZSB1cGRhdGVkIG9uIGEgZ2l2ZW4gU3ltYW50ZWMgRExQ
IEluY2lkZW50IiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogInRleHRhcmVhIiwg
InJlcXVpcmVkIjogImFsd2F5cyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiY2hvc2Vu
IjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlv
biI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiYjE1ODcxZWItYjQzNi00MjY2
LWIxYmItODM2OGI3NDM5NzJiIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6
IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVl
LCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vc2RscF91cGRh
dGVfcGF5bG9hZCIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxzZX1dLCAiaW5j
aWRlbnRfdHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1NzE2NTU3MjU5NjYsICJjcmVhdGVfZGF0
ZSI6IDE1NzE2NTU3MjU5NjYsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAw
NDA0NGFhMCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5h
bCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAi
bmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZW5hYmxlZCI6IGZh
bHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVuIjogZmFsc2Us
ICJpZCI6IDB9XSwgInBoYXNlcyI6IFtdLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJvdmVycmlk
ZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sibmFtZSI6ICJTeW1hbnRlYyBETFAg
TWVzc2FnZSBEZXN0aW5hdGlvbiIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJmbl9zeW1hbnRlY19k
bHAiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjog
WyJpbnRlZ3JhdGlvbi1zZXJ2ZXIuYWxmcmVkQHdheW5lY29ycC5jb20iXSwgInV1aWQiOiAiZDc1
Yzg1NjAtNjRkMi00NGNhLTg3Y2UtNGRiNTEwYTNjNWQxIiwgImV4cG9ydF9rZXkiOiAiZm5fc3lt
YW50ZWNfZGxwIn1dLCAiYWN0aW9ucyI6IFt7ImlkIjogNTYsICJuYW1lIjogIkV4YW1wbGU6IFN5
bWFudGVjIERMUCAtIFVwZGF0ZSBETFAgd2hlbiB0aGlzIEluY2lkZW50IGlzIGNsb3NlZCAiLCAi
dHlwZSI6IDAsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJjb25kaXRpb25zIjogW3sibWV0
aG9kIjogImVxdWFscyIsICJmaWVsZF9uYW1lIjogImluY2lkZW50LnBsYW5fc3RhdHVzIiwgInZh
bHVlIjogIkNsb3NlZCIsICJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsfV0sICJh
dXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXSwgIndvcmtmbG93cyI6
IFsic2RscF9zZXRfaW5jaWRlbnRfc3RhdHVzIl0sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0
X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNDU2MmNmMTctNmFjNi00YTA5LWIyZWUtOTFkZDEy
ZmFiNjYyIiwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gVXBkYXRlIERM
UCB3aGVuIHRoaXMgSW5jaWRlbnQgaXMgY2xvc2VkICIsICJsb2dpY190eXBlIjogImFsbCJ9XSwg
ImxheW91dHMiOiBbXSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAidGltZWZyYW1lcyI6IG51bGws
ICJsb2NhbGUiOiBudWxsLCAiaW5kdXN0cmllcyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwg
Imdlb3MiOiBudWxsLCAidGFza19vcmRlciI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJ0eXBl
cyI6IFtdLCAic2NyaXB0cyI6IFtdLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgIndv
cmtmbG93cyI6IFt7IndvcmtmbG93X2lkIjogMTYsICJuYW1lIjogIkV4YW1wbGU6IFN5bWFudGVj
IERMUCAtIFNldCBJbmNpZGVudCBTdGF0dXMgdG8gQ2xvc2VkIiwgInByb2dyYW1tYXRpY19uYW1l
IjogInNkbHBfc2V0X2luY2lkZW50X3N0YXR1cyIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIs
ICJkZXNjcmlwdGlvbiI6ICJBbiBleGFtcGxlIHdvcmtmbG93IHdoaWNoIGlzIHVzZWQgdG8gdXBk
YXRlIGEgRExQIEluY2lkZW50cyBTdGF0dXMgdG8gQ2xvc2VkLiIsICJjcmVhdG9yX2lkIjogImFs
ZnJlZEB3YXluZWNvcnAuY29tIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAiYWxmcmVkQHdheW5lY29y
cC5jb20iLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU3MTY1NTY0MDgxNiwgImV4cG9ydF9rZXki
OiAic2RscF9zZXRfaW5jaWRlbnRfc3RhdHVzIiwgInV1aWQiOiAiNjhhZjUwMGYtZmIwYS00OTBh
LWI0MzgtNWY5MDAyNGRmZTFlIiwgImNvbnRlbnQiOiB7IndvcmtmbG93X2lkIjogInNkbHBfc2V0
X2luY2lkZW50X3N0YXR1cyIsICJ4bWwiOiAiPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5n
PVwiVVRGLThcIj8+PGRlZmluaXRpb25zIHhtbG5zPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMv
QlBNTi8yMDEwMDUyNC9NT0RFTFwiIHhtbG5zOmJwbW5kaT1cImh0dHA6Ly93d3cub21nLm9yZy9z
cGVjL0JQTU4vMjAxMDA1MjQvRElcIiB4bWxuczpvbWdkYz1cImh0dHA6Ly93d3cub21nLm9yZy9z
cGVjL0RELzIwMTAwNTI0L0RDXCIgeG1sbnM6b21nZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3Bl
Yy9ERC8yMDEwMDUyNC9ESVwiIHhtbG5zOnJlc2lsaWVudD1cImh0dHA6Ly9yZXNpbGllbnQuaWJt
LmNvbS9icG1uXCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFc
IiB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwi
IHRhcmdldE5hbWVzcGFjZT1cImh0dHA6Ly93d3cuY2FtdW5kYS5vcmcvdGVzdFwiPjxwcm9jZXNz
IGlkPVwic2RscF9zZXRfaW5jaWRlbnRfc3RhdHVzXCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5h
bWU9XCJFeGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZXQgSW5jaWRlbnQgU3RhdHVzIHRvIENsb3Nl
ZFwiPjxkb2N1bWVudGF0aW9uPkFuIGV4YW1wbGUgd29ya2Zsb3cgd2hpY2ggaXMgdXNlZCB0byB1
cGRhdGUgYSBETFAgSW5jaWRlbnRzIFN0YXR1cyB0byBDbG9zZWQuPC9kb2N1bWVudGF0aW9uPjxz
dGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVlbmNlRmxv
d18wZHp5eHZiPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwiU2Vydmlj
ZVRhc2tfMWZieTMzbVwiIG5hbWU9XCJTeW1hbnRlYyBETFA6IFVwZGF0ZSBJbmNpZGVudFwiIHJl
c2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpm
dW5jdGlvbiB1dWlkPVwiODk2MmY3MTUtNjExNC00ZThmLWEyNDctMjljNDA2MjNiOThjXCI+e1wi
aW5wdXRzXCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJwPWFcIixcInByZV9wcm9j
ZXNzaW5nX3NjcmlwdFwiOlwiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
XFxuIyMjIERlZmluZSBwcmUtcHJvY2Vzc2luZyBmdW5jdGlvbnMgIyMjXFxuIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXFxuZGVmIGRpY3RfdG9fanNvbl9zdHIoZCk6XFxu
ICBcXFwiXFxcIlxcXCJGdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGEgZGljdGlvbmFyeSBpbnRvIGEg
SlNPTiBzdHJpbmdzZWxmLlxcbiAgICAgU3VwcG9ydHMgYmFzZXN0cmluZywgYm9vbCBhbmQgaW50
LlxcbiAgICAgSWYgdGhlIHZhbHVlIGlzIE5vbmUsIGl0IHNldHMgaXQgdG8gRmFsc2VcXFwiXFxc
IlxcXCJcXG5cXG4gIGpzb25fc3RyID0gJ1xcXCJ7IHswfSB9XFxcIidcXG4gIGpzb25fZW50cnkg
PSAnXFxcInswfVxcXCI6ezF9J1xcbiAganNvbl9lbnRyeV9zdHIgPSAnXFxcInswfVxcXCI6XFxc
InsxfVxcXCInXFxuICBlbnRyaWVzID0gW10gXFxuICBcXG4gIGZvciBlbnRyeSBpbiBkOlxcbiAg
ICBrZXkgPSBlbnRyeVxcbiAgICB2YWx1ZSA9IGRbZW50cnldXFxuICAgIFxcbiAgICAgIFxcbiAg
ICBpZiB2YWx1ZSBpcyBOb25lOlxcbiAgICAgIHZhbHVlID0gRmFsc2VcXG4gICAgICBcXG4gICAg
XFxuICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGJhc2VzdHJpbmcpOlxcbiAgICAgIGVudHJpZXMu
YXBwZW5kKGpzb25fZW50cnlfc3RyLmZvcm1hdChrZXksIHZhbHVlKSlcXG4gICAgXFxuICAgIGVs
aWYgaXNpbnN0YW5jZSh2YWx1ZSwgYm9vbCk6XFxuICAgICAgdmFsdWUgPSAndHJ1ZScgaWYgdmFs
dWUgPT0gVHJ1ZSBlbHNlICdmYWxzZSdcXG4gICAgICBlbnRyaWVzLmFwcGVuZChqc29uX2VudHJ5
LmZvcm1hdChrZXksIHZhbHVlKSlcXG4gICAgXFxuICAgIGVsc2U6XFxuICAgICAgZW50cmllcy5h
cHBlbmQoanNvbl9lbnRyeS5mb3JtYXQoa2V5LCB2YWx1ZSkpXFxuICBcXG4gIHJldHVybiAneycg
KyAnLCcuam9pbihlbnRyaWVzKSArICd9J1xcblxcbnBheWxvYWQgPSB7XFxuXFxcInN0YXR1c1xc
XCI6IFxcXCJDbG9zZWRcXFwiLFxcblxcXCJpbmNpZGVudF9pZFxcXCI6IGluY2lkZW50LnByb3Bl
cnRpZXMuc2RscF9pbmNpZGVudF9pZFxcbn1cXG5cXG5cXG5cXG5cXG5pbnB1dHMuc2RscF91cGRh
dGVfcGF5bG9hZCA9IGRpY3RfdG9fanNvbl9zdHIocGF5bG9hZClcIn08L3Jlc2lsaWVudDpmdW5j
dGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMGR6eXh2Yjwv
aW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wdnJmYnk3PC9vdXRnb2luZz48L3NlcnZp
Y2VUYXNrPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMGR6eXh2YlwiIHNvdXJjZVJl
Zj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzFmYnkzM21c
Ii8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMWMycjIza1wiPjxpbmNvbWluZz5TZXF1ZW5jZUZs
b3dfMHZyZmJ5NzwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVu
Y2VGbG93XzB2cmZieTdcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xZmJ5MzNtXCIgdGFyZ2V0
UmVmPVwiRW5kRXZlbnRfMWMycjIza1wiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3Rh
dGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4
dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJj
ZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFr
eHhpeXRcIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8x
XCI+PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5Q
bGFuZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFz
eG1cIiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwi
MzZcIiB3aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+
PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIz
XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hh
cGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3Rh
dGlvbl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAw
XCIgeD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRn
ZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFz
ZXVqNDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9p
bnRcIiB5PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUg
YnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18xZmJ5MzNtXCIgaWQ9XCJTZXJ2aWNlVGFza18xZmJ5
MzNtX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjM3
NlwiIHk9XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVs
ZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMGR6eXh2YlwiIGlkPVwiU2VxdWVuY2VGbG93XzBkenl4dmJf
ZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMzc2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIx
M1wiIHdpZHRoPVwiMFwiIHg9XCIyODdcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48
L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50
XzFjMnIyM2tcIiBpZD1cIkVuZEV2ZW50XzFjMnIyM2tfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI2NTlcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxh
YmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNjc3XCIgeT1c
IjIyN1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBN
TkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMHZyZmJ5N1wiIGlkPVwiU2VxdWVuY2VG
bG93XzB2cmZieTdfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQ3NlwiIHhzaTp0eXBlPVwib21n
ZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNjU5XCIgeHNpOnR5cGU9
XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5k
cyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI1NjcuNVwiIHk9XCIxODRcIi8+PC9icG1u
ZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5k
aTpCUE1ORGlhZ3JhbT48L2RlZmluaXRpb25zPiIsICJ2ZXJzaW9uIjogM30sICJhY3Rpb25zIjog
W119XSwgInJvbGVzIjogW10sICJ3b3Jrc3BhY2VzIjogW10sICJmdW5jdGlvbnMiOiBbeyJpZCI6
IDQzLCAibmFtZSI6ICJmbl9zeW1hbnRlY19kbHBfdXBkYXRlX2luY2lkZW50IiwgImRpc3BsYXlf
bmFtZSI6ICJTeW1hbnRlYyBETFA6IFVwZGF0ZSBJbmNpZGVudCIsICJkZXNjcmlwdGlvbiI6IHsi
Zm9ybWF0IjogInRleHQiLCAiY29udGVudCI6ICJBIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8g
dXBkYXRlIHRoZSBkZXRhaWxzIG9mIGEgU3ltYW50ZWMgRExQIEluY2lkZW50LiBUYWtlcyAxIGlu
cHV0IHdoaWNoIGlzIGEgZGljdGlvbmFyeSBvZiB0aGluZ3MgdG8gYmUgY2hhbmdlZC4gVG8gZW5h
YmxlIHRvIHVwZGF0aW5nIG9mIG11bHRpcGxlIGN1c3RvbSBhdHRyaWJ1dGVzLCBwcm92aWRlIGEg
bGlzdCBvciBkaWN0aW9uYXJ5IG9mIGFsbCB0aGUgYXR0cmlidXRlcyB0byBiZSBjaGFuZ2VkIGlu
IHRoZSBmb3JtYXQ6IDxhdHRyaWJ1dGVfbmFtZT46IDxuZXdfdmFsdWU+In0sICJkZXN0aW5hdGlv
bl9oYW5kbGUiOiAiZm5fc3ltYW50ZWNfZGxwIiwgImV4cG9ydF9rZXkiOiAiZm5fc3ltYW50ZWNf
ZGxwX3VwZGF0ZV9pbmNpZGVudCIsICJ1dWlkIjogIjg5NjJmNzE1LTYxMTQtNGU4Zi1hMjQ3LTI5
YzQwNjIzYjk4YyIsICJ2ZXJzaW9uIjogNSwgImNyZWF0b3IiOiB7ImlkIjogNDAsICJ0eXBlIjog
InVzZXIiLCAibmFtZSI6ICJpbnRlZ3JhdGlvbi1zZXJ2ZXIuYWxmcmVkQHdheW5lY29ycC5jb20i
LCAiZGlzcGxheV9uYW1lIjogIkludGVncmF0aW9ucyBTZXJ2ZXIgQSJ9LCAibGFzdF9tb2RpZmll
ZF9ieSI6IHsiaWQiOiAzOSwgInR5cGUiOiAidXNlciIsICJuYW1lIjogImFsZnJlZEB3YXluZWNv
cnAuY29tIiwgImRpc3BsYXlfbmFtZSI6ICJBbGZyZWQgUGVubnl3b3J0aCJ9LCAibGFzdF9tb2Rp
ZmllZF90aW1lIjogMTU3MTY1NTUzOTEyOSwgInZpZXdfaXRlbXMiOiBbeyJzdGVwX2xhYmVsIjog
bnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5
cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogImIxNTg3MWViLWI0MzYtNDI2Ni1iMWJiLTgz
NjhiNzQzOTcyYiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XSwgIndvcmtmbG93cyI6IFt7
IndvcmtmbG93X2lkIjogMTcsICJuYW1lIjogIkV4YW1wbGU6IFN5bWFudGVjIERMUCAtIFNlbmQg
Tm90ZSB0byBJbmNpZGVudCIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJzZGxwX19zZW5kX25vdGVf
dG9faW5jaWRlbnQiLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiZGVzY3JpcHRpb24iOiBu
dWxsLCAidXVpZCI6IG51bGwsICJhY3Rpb25zIjogW119LCB7IndvcmtmbG93X2lkIjogOSwgIm5h
bWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2VuZCB0aGlzIG5vdGUgdG8gRExQIEluY2lk
ZW50IiwgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfc3ltYW50ZWNfZGxwX19zZW5kX3Ro
aXNfbm90ZV90b19kbHBfaW5jaWRlbnQiLCAib2JqZWN0X3R5cGUiOiAibm90ZSIsICJkZXNjcmlw
dGlvbiI6IG51bGwsICJ1dWlkIjogbnVsbCwgImFjdGlvbnMiOiBbXX0sIHsid29ya2Zsb3dfaWQi
OiAxNiwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2V0IEluY2lkZW50IFN0YXR1
cyB0byBDbG9zZWQiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAic2RscF9zZXRfaW5jaWRlbnRfc3Rh
dHVzIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImRlc2NyaXB0aW9uIjogbnVsbCwgInV1
aWQiOiBudWxsLCAiYWN0aW9ucyI6IFtdfV19XX0=
"""
    )