# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_symantec_dlp"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_symantec_dlp package"""
    reload_params = {"package": u"fn_symantec_dlp",
                    "incident_fields": [u"sdlp_incident_id", u"sdlp_incident_url"], 
                    "action_fields": [u"sdlp_note_to_be_sent"], 
                    "function_params": [u"sdlp_update_payload"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_symantec_dlp"], 
                    "functions": [u"fn_symantec_dlp_update_incident"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"sdlp_send_note_to_incident", u"sdlp_set_incident_status"], 
                    "actions": [u"Example: Symantec DLP - Send a note to a DLP Incident", u"Example: Symantec DLP - Update DLP when this Incident is closed "], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     sdlp_incident_id
    #     sdlp_incident_url
    #   Action fields:
    #     sdlp_note_to_be_sent
    #   Function inputs:
    #     sdlp_update_payload
    #   Message Destinations:
    #     fn_symantec_dlp
    #   Functions:
    #     fn_symantec_dlp_update_incident
    #   Workflows:
    #     sdlp_send_note_to_incident
    #     sdlp_set_incident_status
    #   Rules:
    #     Example: Symantec DLP - Send a note to a DLP Incident
    #     Example: Symantec DLP - Update DLP when this Incident is closed 


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjFmNDRkZjU0LTJkMmQt
NGRmOS05NTgzLTQ2MTk0N2Q3NGRjMSIsICJkZXNjcmlwdGlvbiI6ICJBbiBleGFtcGxlIHdvcmtm
bG93IHdoaWNoIGNhbiBiZSB1c2VkIHRvIHNlbmQgYSBOb3RlIHRvIGEgRExQIEluY2lkZW50LiBU
aGlzIHdvcmtmbG93IGdldHMgaXRzIG5vdGUgdGV4dCBmcm9tIGFuIGFzc29jaWF0ZWQgUnVsZSB3
aGljaCBoYXMgYW4gYWN0aXZpdHkgZmllbGQuIElmIG5vIHZhbHVlIGlzIGdpdmVuIHdpdGggdGhl
IGFjdGl2aXR5IGZpZWxkIHRoZW4gaXQgc2VuZHMgYSBkZWZhdWx0IHBpZWNlIG9mIHRleHQuIiwg
Im9iamVjdF90eXBlIjogImluY2lkZW50IiwgImV4cG9ydF9rZXkiOiAic2RscF9zZW5kX25vdGVf
dG9faW5jaWRlbnQiLCAid29ya2Zsb3dfaWQiOiAyOCwgImxhc3RfbW9kaWZpZWRfYnkiOiAiYWxm
cmVkQHdheW5lY29ycC5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIx
LjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cu
b21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3
dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8v
cmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hl
bWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rl
c3RcIj48cHJvY2VzcyBpZD1cInNkbHBfc2VuZF9ub3RlX3RvX2luY2lkZW50XCIgaXNFeGVjdXRh
YmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZW5kIE5vdGUgdG8g
SW5jaWRlbnRcIj48ZG9jdW1lbnRhdGlvbj5BbiBleGFtcGxlIHdvcmtmbG93IHdoaWNoIGNhbiBi
ZSB1c2VkIHRvIHNlbmQgYSBOb3RlIHRvIGEgRExQIEluY2lkZW50LiBUaGlzIHdvcmtmbG93IGdl
dHMgaXRzIG5vdGUgdGV4dCBmcm9tIGFuIGFzc29jaWF0ZWQgUnVsZSB3aGljaCBoYXMgYW4gYWN0
aXZpdHkgZmllbGQuIElmIG5vIHZhbHVlIGlzIGdpdmVuIHdpdGggdGhlIGFjdGl2aXR5IGZpZWxk
IHRoZW4gaXQgc2VuZHMgYSBkZWZhdWx0IHBpZWNlIG9mIHRleHQuPC9kb2N1bWVudGF0aW9uPjxz
dGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVlbmNlRmxv
d18wNGs4MnRrPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwiU2Vydmlj
ZVRhc2tfMGdqZ2VjYlwiIG5hbWU9XCJTeW1hbnRlYyBETFA6IFVwZGF0ZSBJbmNpZGVudFwiIHJl
c2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpm
dW5jdGlvbiB1dWlkPVwiODk2MmY3MTUtNjExNC00ZThmLWEyNDctMjljNDA2MjNiOThjXCI+e1wi
aW5wdXRzXCI6e30sXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcbiMjIyBEZWZpbmUgcHJlLXByb2Nlc3NpbmcgZnVuY3Rp
b25zICMjI1xcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcbmRlZiBk
aWN0X3RvX2pzb25fc3RyKGQpOlxcbiAgXFxcIlxcXCJcXFwiRnVuY3Rpb24gdGhhdCBjb252ZXJ0
cyBhIGRpY3Rpb25hcnkgaW50byBhIEpTT04gc3RyaW5nc2VsZi5cXG4gICAgIFN1cHBvcnRzIGJh
c2VzdHJpbmcsIGJvb2wgYW5kIGludC5cXG4gICAgIElmIHRoZSB2YWx1ZSBpcyBOb25lLCBpdCBz
ZXRzIGl0IHRvIEZhbHNlXFxcIlxcXCJcXFwiXFxuXFxuICBqc29uX3N0ciA9ICdcXFwieyB7MH0g
fVxcXCInXFxuICBqc29uX2VudHJ5ID0gJ1xcXCJ7MH1cXFwiOnsxfSdcXG4gIGpzb25fZW50cnlf
c3RyID0gJ1xcXCJ7MH1cXFwiOlxcXCJ7MX1cXFwiJ1xcbiAgZW50cmllcyA9IFtdIFxcbiAgXFxu
ICBmb3IgZW50cnkgaW4gZDpcXG4gICAga2V5ID0gZW50cnlcXG4gICAgdmFsdWUgPSBkW2VudHJ5
XVxcbiAgICBcXG4gICAgICBcXG4gICAgaWYgdmFsdWUgaXMgTm9uZTpcXG4gICAgICB2YWx1ZSA9
IEZhbHNlXFxuICAgICAgXFxuICAgIFxcbiAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBiYXNlc3Ry
aW5nKTpcXG4gICAgICBlbnRyaWVzLmFwcGVuZChqc29uX2VudHJ5X3N0ci5mb3JtYXQoa2V5LCB2
YWx1ZSkpXFxuICAgIFxcbiAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGJvb2wpOlxcbiAgICAg
IHZhbHVlID0gJ3RydWUnIGlmIHZhbHVlID09IFRydWUgZWxzZSAnZmFsc2UnXFxuICAgICAgZW50
cmllcy5hcHBlbmQoanNvbl9lbnRyeS5mb3JtYXQoa2V5LCB2YWx1ZSkpXFxuICAgIFxcbiAgICBl
bHNlOlxcbiAgICAgIGVudHJpZXMuYXBwZW5kKGpzb25fZW50cnkuZm9ybWF0KGtleSwgdmFsdWUp
KVxcbiAgXFxuICByZXR1cm4gJ3snICsgJywnLmpvaW4oZW50cmllcykgKyAnfSdcXG5cXG5mcm9t
IGphdmEudXRpbCBpbXBvcnQgRGF0ZVxcblxcbiMgUHJlcGFyZSB0aGUgcGF5bG9hZCB3aGljaCB3
aWxsIGJlIHNlbnQgdG8gRExQIGFzIGFuIHVwZGF0ZSByZXF1ZXN0XFxucGF5bG9hZCA9IHtcXG5c
XFwibm90ZVxcXCI6IHVcXFwiW3t9XXt9XFxcIi5mb3JtYXQoRGF0ZSgpLCBydWxlLnByb3BlcnRp
ZXMuc2RscF9ub3RlX3RvX2JlX3NlbnQgb3IgXFxcIkRlZmF1bHQgTm90ZSBmcm9tIFJlc2lsaWVu
dFxcXCIpLFxcblxcXCJpbmNpZGVudF9pZFxcXCI6IGluY2lkZW50LnByb3BlcnRpZXMuc2RscF9p
bmNpZGVudF9pZFxcbn1cXG5cXG5cXG5pbnB1dHMuc2RscF91cGRhdGVfcGF5bG9hZCA9IGRpY3Rf
dG9fanNvbl9zdHIocGF5bG9hZClcIn08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVs
ZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMDRrODJ0azwvaW5jb21pbmc+PG91dGdvaW5n
PlNlcXVlbmNlRmxvd18xZTJiYmhpPC9vdXRnb2luZz48L3NlcnZpY2VUYXNrPjxzZXF1ZW5jZUZs
b3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMDRrODJ0a1wiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1
YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzBnamdlY2JcIi8+PGVuZEV2ZW50IGlkPVwi
RW5kRXZlbnRfMWR2bmZodFwiPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMWUyYmJoaTwvaW5jb21p
bmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzFlMmJiaGlcIiBz
b3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wZ2pnZWNiXCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRfMWR2
bmZodFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRl
eHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29j
aWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRf
MTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PHRleHRBbm5v
dGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMGJ3b2p5M1wiPjx0ZXh0PklucHV0czogVGhlIFNE
TFAgVXBkYXRlIFBheWxvYWQgdGFrZXMga2V5OnZhbHVlIHBhaXJzIHdoaWNoIHJlcHJlc2VudCB3
aGljaCBwYXJ0cyBvZiB0aGUgaW5jaWRlbnQgd2Ugd2FudCB0byB1cGRhdGUuPC90ZXh0PjwvdGV4
dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMHEzd3M0elwiIHNvdXJj
ZVJlZj1cIlNlcnZpY2VUYXNrXzBnamdlY2JcIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8w
YndvankzXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFjcGNwOXlcIj48
dGV4dD5UaGUgcmVzdWx0cyBvZiB0aGUgQVBJIGNhbGwgYXJlIG5vdCByZXR1cm5lZCB0byB0aGUg
UG9zdC1Qcm9jZXNzaW5nIHNjcmlwdCBhcyBhbGwgdGhlIGluZm9ybWF0aW9uIHdlIHNlbmQgdG8g
RExQIGlzIGZvdW5kIGluIHRoZSBJbnB1dHMgcGFydCBvZiB0aGUgcGF5bG9hZC48L3RleHQ+PC90
ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8wZjNzd3I3XCIgc291
cmNlUmVmPVwiU2VydmljZVRhc2tfMGdqZ2VjYlwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9u
XzFjcGNwOXlcIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3Jh
bV8xXCI+PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQ
TU5QbGFuZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1
NWFzeG1cIiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0
PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFi
ZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwi
MjIzXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1O
U2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5u
b3RhdGlvbl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwi
MTAwXCIgeD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1O
RWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9u
XzFzZXVqNDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6
UG9pbnRcIiB5PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJv
bWdkYzpQb2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hh
cGUgYnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18wZ2pnZWNiXCIgaWQ9XCJTZXJ2aWNlVGFza18w
Z2pnZWNiX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1c
IjQwOFwiIHk9XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBt
bkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMDRrODJ0a1wiIGlkPVwiU2VxdWVuY2VGbG93XzA0azgy
dGtfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDA4XCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIzMDNcIiB5PVwiMTg0LjVcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5k
RXZlbnRfMWR2bmZodFwiIGlkPVwiRW5kRXZlbnRfMWR2bmZodF9kaVwiPjxvbWdkYzpCb3VuZHMg
aGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjc0NFwiIHk9XCIxODhcIi8+PGJwbW5kaTpC
UE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI3NjJc
IiB5PVwiMjI3XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5k
aTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xZTJiYmhpXCIgaWQ9XCJTZXF1
ZW5jZUZsb3dfMWUyYmJoaV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNTA4XCIgeHNpOnR5cGU9
XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI3NDRcIiB4c2k6
dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjYyNlwiIHk9XCIxODQuNVwiLz48
L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBt
bkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8wYndvankzXCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8w
YndvankzX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4NlwiIHdpZHRoPVwiMTQwXCIgeD1c
IjIzNFwiIHk9XCIzNFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1u
RWxlbWVudD1cIkFzc29jaWF0aW9uXzBxM3dzNHpcIiBpZD1cIkFzc29jaWF0aW9uXzBxM3dzNHpf
ZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQxNFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMTcwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMzU1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIxMjBcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVs
ZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xY3BjcDl5XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xY3Bj
cDl5X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI3NVwiIHdpZHRoPVwiMjIyXCIgeD1cIjU5
NVwiIHk9XCIzOVwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxl
bWVudD1cIkFzc29jaWF0aW9uXzBmM3N3cjdcIiBpZD1cIkFzc29jaWF0aW9uXzBmM3N3cjdfZGlc
Ij48b21nZGk6d2F5cG9pbnQgeD1cIjUwOFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MTgwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNjM1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIxMTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRp
OkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93X2lkIjogInNkbHBfc2VuZF9u
b3RlX3RvX2luY2lkZW50IiwgInZlcnNpb24iOiAyfSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1
NzE3NjY3NDExNjQsICJjcmVhdG9yX2lkIjogImFsZnJlZEB3YXluZWNvcnAuY29tIiwgImFjdGlv
bnMiOiBbXSwgInByb2dyYW1tYXRpY19uYW1lIjogInNkbHBfc2VuZF9ub3RlX3RvX2luY2lkZW50
IiwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2VuZCBOb3RlIHRvIEluY2lkZW50
In0sIHsidXVpZCI6ICI2OGFmNTAwZi1mYjBhLTQ5MGEtYjQzOC01ZjkwMDI0ZGZlMWUiLCAiZGVz
Y3JpcHRpb24iOiAiQW4gZXhhbXBsZSB3b3JrZmxvdyB3aGljaCBpcyB1c2VkIHRvIHVwZGF0ZSBh
IERMUCBJbmNpZGVudHMgU3RhdHVzIHRvIENsb3NlZC4iLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRl
bnQiLCAiZXhwb3J0X2tleSI6ICJzZGxwX3NldF9pbmNpZGVudF9zdGF0dXMiLCAid29ya2Zsb3df
aWQiOiAxNiwgImxhc3RfbW9kaWZpZWRfYnkiOiAiYWxmcmVkQHdheW5lY29ycC5jb20iLCAiY29u
dGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/
PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1
MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIw
MTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEw
MDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1
MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwi
IHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNp
PVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1l
c3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cInNkbHBf
c2V0X2luY2lkZW50X3N0YXR1c1wiIGlzRXhlY3V0YWJsZT1cInRydWVcIiBuYW1lPVwiRXhhbXBs
ZTogU3ltYW50ZWMgRExQIC0gU2V0IEluY2lkZW50IFN0YXR1cyB0byBDbG9zZWRcIj48ZG9jdW1l
bnRhdGlvbj5BbiBleGFtcGxlIHdvcmtmbG93IHdoaWNoIGlzIHVzZWQgdG8gdXBkYXRlIGEgRExQ
IEluY2lkZW50cyBTdGF0dXMgdG8gQ2xvc2VkLjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBp
ZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMGR6eXh2Yjwv
b3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzFmYnkz
M21cIiBuYW1lPVwiU3ltYW50ZWMgRExQOiBVcGRhdGUgSW5jaWRlbnRcIiByZXNpbGllbnQ6dHlw
ZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVp
ZD1cIjg5NjJmNzE1LTYxMTQtNGU4Zi1hMjQ3LTI5YzQwNjIzYjk4Y1wiPntcImlucHV0c1wiOnt9
LFwicG9zdF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwicD1hXCIsXCJwcmVfcHJvY2Vzc2luZ19zY3Jp
cHRcIjpcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcbiMjIyBEZWZp
bmUgcHJlLXByb2Nlc3NpbmcgZnVuY3Rpb25zICMjI1xcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjI1xcbmRlZiBkaWN0X3RvX2pzb25fc3RyKGQpOlxcbiAgXFxcIlxcXCJc
XFwiRnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBhIGRpY3Rpb25hcnkgaW50byBhIEpTT04gc3RyaW5n
c2VsZi5cXG4gICAgIFN1cHBvcnRzIGJhc2VzdHJpbmcsIGJvb2wgYW5kIGludC5cXG4gICAgIElm
IHRoZSB2YWx1ZSBpcyBOb25lLCBpdCBzZXRzIGl0IHRvIEZhbHNlXFxcIlxcXCJcXFwiXFxuXFxu
ICBqc29uX3N0ciA9ICdcXFwieyB7MH0gfVxcXCInXFxuICBqc29uX2VudHJ5ID0gJ1xcXCJ7MH1c
XFwiOnsxfSdcXG4gIGpzb25fZW50cnlfc3RyID0gJ1xcXCJ7MH1cXFwiOlxcXCJ7MX1cXFwiJ1xc
biAgZW50cmllcyA9IFtdIFxcbiAgXFxuICBmb3IgZW50cnkgaW4gZDpcXG4gICAga2V5ID0gZW50
cnlcXG4gICAgdmFsdWUgPSBkW2VudHJ5XVxcbiAgICBcXG4gICAgICBcXG4gICAgaWYgdmFsdWUg
aXMgTm9uZTpcXG4gICAgICB2YWx1ZSA9IEZhbHNlXFxuICAgICAgXFxuICAgIFxcbiAgICBpZiBp
c2luc3RhbmNlKHZhbHVlLCBiYXNlc3RyaW5nKTpcXG4gICAgICBlbnRyaWVzLmFwcGVuZChqc29u
X2VudHJ5X3N0ci5mb3JtYXQoa2V5LCB2YWx1ZSkpXFxuICAgIFxcbiAgICBlbGlmIGlzaW5zdGFu
Y2UodmFsdWUsIGJvb2wpOlxcbiAgICAgIHZhbHVlID0gJ3RydWUnIGlmIHZhbHVlID09IFRydWUg
ZWxzZSAnZmFsc2UnXFxuICAgICAgZW50cmllcy5hcHBlbmQoanNvbl9lbnRyeS5mb3JtYXQoa2V5
LCB2YWx1ZSkpXFxuICAgIFxcbiAgICBlbHNlOlxcbiAgICAgIGVudHJpZXMuYXBwZW5kKGpzb25f
ZW50cnkuZm9ybWF0KGtleSwgdmFsdWUpKVxcbiAgXFxuICByZXR1cm4gJ3snICsgJywnLmpvaW4o
ZW50cmllcykgKyAnfSdcXG5cXG5wYXlsb2FkID0ge1xcblxcXCJzdGF0dXNcXFwiOiBcXFwiQ2xv
c2VkXFxcIixcXG5cXFwiaW5jaWRlbnRfaWRcXFwiOiBpbmNpZGVudC5wcm9wZXJ0aWVzLnNkbHBf
aW5jaWRlbnRfaWRcXG59XFxuXFxuXFxuXFxuXFxuaW5wdXRzLnNkbHBfdXBkYXRlX3BheWxvYWQg
PSBkaWN0X3RvX2pzb25fc3RyKHBheWxvYWQpXCJ9PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRl
bnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzBkenl4dmI8L2luY29taW5nPjxv
dXRnb2luZz5TZXF1ZW5jZUZsb3dfMHZyZmJ5Nzwvb3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2Vx
dWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzBkenl4dmJcIiBzb3VyY2VSZWY9XCJTdGFydEV2
ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18xZmJ5MzNtXCIvPjxlbmRFdmVu
dCBpZD1cIkVuZEV2ZW50XzFjMnIyM2tcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzB2cmZieTc8
L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18wdnJm
Ynk3XCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMWZieTMzbVwiIHRhcmdldFJlZj1cIkVuZEV2
ZW50XzFjMnIyM2tcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5
dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9u
Pjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFy
dEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwv
cHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6
QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJT
dGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9
XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5k
aTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVt
ZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5
dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwi
IHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1l
bnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+
PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIy
MFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50
PVwiU2VydmljZVRhc2tfMWZieTMzbVwiIGlkPVwiU2VydmljZVRhc2tfMWZieTMzbV9kaVwiPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIzNzZcIiB5PVwiMTY2
XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2Vx
dWVuY2VGbG93XzBkenl4dmJcIiBpZD1cIlNlcXVlbmNlRmxvd18wZHp5eHZiX2RpXCI+PG9tZ2Rp
OndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48
b21nZGk6d2F5cG9pbnQgeD1cIjM3NlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2
XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1c
IjBcIiB4PVwiMjg3XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBN
TkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRFdmVudF8xYzJyMjNrXCIg
aWQ9XCJFbmRFdmVudF8xYzJyMjNrX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdp
ZHRoPVwiMzZcIiB4PVwiNjU5XCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjY3N1wiIHk9XCIyMjdcIi8+PC9i
cG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5F
bGVtZW50PVwiU2VxdWVuY2VGbG93XzB2cmZieTdcIiBpZD1cIlNlcXVlbmNlRmxvd18wdnJmYnk3
X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0NzZcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIg
eT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjY1OVwiIHhzaTp0eXBlPVwib21nZGM6UG9p
bnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwi
MTNcIiB3aWR0aD1cIjBcIiB4PVwiNTY3LjVcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJl
bD48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRpYWdy
YW0+PC9kZWZpbml0aW9ucz4iLCAid29ya2Zsb3dfaWQiOiAic2RscF9zZXRfaW5jaWRlbnRfc3Rh
dHVzIiwgInZlcnNpb24iOiAzfSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NzE2NTU2NDA4MTYs
ICJjcmVhdG9yX2lkIjogImFsZnJlZEB3YXluZWNvcnAuY29tIiwgImFjdGlvbnMiOiBbXSwgInBy
b2dyYW1tYXRpY19uYW1lIjogInNkbHBfc2V0X2luY2lkZW50X3N0YXR1cyIsICJuYW1lIjogIkV4
YW1wbGU6IFN5bWFudGVjIERMUCAtIFNldCBJbmNpZGVudCBTdGF0dXMgdG8gQ2xvc2VkIn1dLCAi
YWN0aW9ucyI6IFt7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50
ZWMgRExQIC0gU2VuZCBhIG5vdGUgdG8gYSBETFAgSW5jaWRlbnQiLCAidmlld19pdGVtcyI6IFt7
InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6ICJhY3Rpb25pbnZvY2F0aW9uIiwgInNob3df
bGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJjb250ZW50Ijog
IjMwOGM4ODgwLWNkYWQtNDEwYy05NjQwLTZkZDM2MTNmMTJmMiIsICJzdGVwX2xhYmVsIjogbnVs
bH1dLCAidHlwZSI6IDEsICJ3b3JrZmxvd3MiOiBbInNkbHBfc2VuZF9ub3RlX3RvX2luY2lkZW50
Il0sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwg
InV1aWQiOiAiNDRmNTBhNzgtNGI2Mi00OTY1LWEyM2YtODRjNjNmZDUyNmFlIiwgImF1dG9tYXRp
b25zIjogW10sICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IFN5bWFudGVjIERMUCAtIFNlbmQgYSBu
b3RlIHRvIGEgRExQIEluY2lkZW50IiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2
YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLnNk
bHBfaW5jaWRlbnRfaWQiLCAibWV0aG9kIjogImhhc19hX3ZhbHVlIiwgInZhbHVlIjogbnVsbH1d
LCAiaWQiOiA4MywgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW119LCB7ImxvZ2ljX3R5cGUiOiAi
YWxsIiwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gVXBkYXRlIERMUCB3aGVuIHRo
aXMgSW5jaWRlbnQgaXMgY2xvc2VkICIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMCwgIndv
cmtmbG93cyI6IFsic2RscF9zZXRfaW5jaWRlbnRfc3RhdHVzIl0sICJvYmplY3RfdHlwZSI6ICJp
bmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNDU2MmNmMTctNmFj
Ni00YTA5LWIyZWUtOTFkZDEyZmFiNjYyIiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5
IjogIkV4YW1wbGU6IFN5bWFudGVjIERMUCAtIFVwZGF0ZSBETFAgd2hlbiB0aGlzIEluY2lkZW50
IGlzIGNsb3NlZCAiLCAiY29uZGl0aW9ucyI6IFt7InR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9p
ZCI6IG51bGwsICJmaWVsZF9uYW1lIjogImluY2lkZW50LnBsYW5fc3RhdHVzIiwgIm1ldGhvZCI6
ICJlcXVhbHMiLCAidmFsdWUiOiAiQ2xvc2VkIn0sIHsidHlwZSI6IG51bGwsICJldmFsdWF0aW9u
X2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5zZGxwX2luY2lk
ZW50X2lkIiwgIm1ldGhvZCI6ICJoYXNfYV92YWx1ZSIsICJ2YWx1ZSI6IG51bGx9XSwgImlkIjog
NTYsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdfV0sICJsYXlvdXRzIjogW10sICJleHBvcnRf
Zm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiA1NCwgImluZHVzdHJpZXMiOiBudWxsLCAicGhhc2Vz
IjogW10sICJhY3Rpb25fb3JkZXIiOiBbXSwgImdlb3MiOiBudWxsLCAibG9jYWxlIjogbnVsbCwg
InNlcnZlcl92ZXJzaW9uIjogeyJtYWpvciI6IDMxLCAidmVyc2lvbiI6ICIzMS4wLjQyMzUiLCAi
YnVpbGRfbnVtYmVyIjogNDIzNSwgIm1pbm9yIjogMH0sICJ0aW1lZnJhbWVzIjogbnVsbCwgIndv
cmtzcGFjZXMiOiBbXSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAiZnVuY3Rpb25zIjogW3siZGlz
cGxheV9uYW1lIjogIlN5bWFudGVjIERMUDogVXBkYXRlIEluY2lkZW50IiwgImRlc2NyaXB0aW9u
IjogeyJjb250ZW50IjogIkEgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byB1cGRhdGUgdGhlIGRl
dGFpbHMgb2YgYSBTeW1hbnRlYyBETFAgSW5jaWRlbnQuIFRha2VzIDEgaW5wdXQgd2hpY2ggaXMg
YSBkaWN0aW9uYXJ5IG9mIHRoaW5ncyB0byBiZSBjaGFuZ2VkLiBUbyBlbmFibGUgdG8gdXBkYXRp
bmcgb2YgbXVsdGlwbGUgY3VzdG9tIGF0dHJpYnV0ZXMsIHByb3ZpZGUgYSBsaXN0IG9yIGRpY3Rp
b25hcnkgb2YgYWxsIHRoZSBhdHRyaWJ1dGVzIHRvIGJlIGNoYW5nZWQgaW4gdGhlIGZvcm1hdDog
PGF0dHJpYnV0ZV9uYW1lPjogPG5ld192YWx1ZT4iLCAiZm9ybWF0IjogInRleHQifSwgImNyZWF0
b3IiOiB7ImRpc3BsYXlfbmFtZSI6ICJJbnRlZ3JhdGlvbnMgU2VydmVyIEEiLCAidHlwZSI6ICJ1
c2VyIiwgImlkIjogNDAsICJuYW1lIjogImludGVncmF0aW9uLXNlcnZlci5hbGZyZWRAd2F5bmVj
b3JwLmNvbSJ9LCAidmlld19pdGVtcyI6IFt7InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6
ICJfX2Z1bmN0aW9uIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmll
bGRfdXVpZCIsICJjb250ZW50IjogImIxNTg3MWViLWI0MzYtNDI2Ni1iMWJiLTgzNjhiNzQzOTcy
YiIsICJzdGVwX2xhYmVsIjogbnVsbH1dLCAiZXhwb3J0X2tleSI6ICJmbl9zeW1hbnRlY19kbHBf
dXBkYXRlX2luY2lkZW50IiwgInV1aWQiOiAiODk2MmY3MTUtNjExNC00ZThmLWEyNDctMjljNDA2
MjNiOThjIiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7ImRpc3BsYXlfbmFtZSI6ICJBbGZyZWQgUGVu
bnl3b3J0aCIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiAzOSwgIm5hbWUiOiAiYWxmcmVkQHdheW5l
Y29ycC5jb20ifSwgInZlcnNpb24iOiA1LCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiBu
dWxsLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJF
eGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZW5kIE5vdGUgdG8gSW5jaWRlbnQiLCAid29ya2Zsb3df
aWQiOiAyOCwgInByb2dyYW1tYXRpY19uYW1lIjogInNkbHBfc2VuZF9ub3RlX3RvX2luY2lkZW50
IiwgInV1aWQiOiBudWxsfSwgeyJkZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlwZSI6ICJp
bmNpZGVudCIsICJhY3Rpb25zIjogW10sICJuYW1lIjogIkV4YW1wbGU6IFN5bWFudGVjIERMUCAt
IFNlbmQgTm90ZSB0byBJbmNpZGVudE9MRCIsICJ3b3JrZmxvd19pZCI6IDE3LCAicHJvZ3JhbW1h
dGljX25hbWUiOiAic2RscF9fc2VuZF9ub3RlX3RvX2luY2lkZW50IiwgInV1aWQiOiBudWxsfSwg
eyJkZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlwZSI6ICJub3RlIiwgImFjdGlvbnMiOiBb
XSwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2VuZCB0aGlzIG5vdGUgdG8gRExQ
IEluY2lkZW50IiwgIndvcmtmbG93X2lkIjogOSwgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1w
bGVfc3ltYW50ZWNfZGxwX19zZW5kX3RoaXNfbm90ZV90b19kbHBfaW5jaWRlbnQiLCAidXVpZCI6
IG51bGx9LCB7ImRlc2NyaXB0aW9uIjogbnVsbCwgIm9iamVjdF90eXBlIjogImluY2lkZW50Iiwg
ImFjdGlvbnMiOiBbXSwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2V0IEluY2lk
ZW50IFN0YXR1cyB0byBDbG9zZWQiLCAid29ya2Zsb3dfaWQiOiAxNiwgInByb2dyYW1tYXRpY19u
YW1lIjogInNkbHBfc2V0X2luY2lkZW50X3N0YXR1cyIsICJ1dWlkIjogbnVsbH1dLCAibGFzdF9t
b2RpZmllZF90aW1lIjogMTU3MTY1NTUzOTEyOSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJmbl9z
eW1hbnRlY19kbHAiLCAiaWQiOiA0MywgIm5hbWUiOiAiZm5fc3ltYW50ZWNfZGxwX3VwZGF0ZV9p
bmNpZGVudCJ9XSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJp
bmNpZGVudF90eXBlcyI6IFt7ImNyZWF0ZV9kYXRlIjogMTU3MTg0MTM1NDg4OCwgImRlc2NyaXB0
aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJleHBvcnRfa2V5Ijog
IkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJpZCI6IDAsICJuYW1lIjogIkN1
c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJ1cGRhdGVfZGF0ZSI6IDE1NzE4NDEz
NTQ4ODgsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJl
bmFibGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxzZSwgInBhcmVudF9pZCI6IG51bGwsICJoaWRk
ZW4iOiBmYWxzZX1dLCAic2NyaXB0cyI6IFtdLCAidHlwZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGlu
YXRpb25zIjogW3sidXVpZCI6ICJkNzVjODU2MC02NGQyLTQ0Y2EtODdjZS00ZGI1MTBhM2M1ZDEi
LCAiZXhwb3J0X2tleSI6ICJmbl9zeW1hbnRlY19kbHAiLCAibmFtZSI6ICJTeW1hbnRlYyBETFAg
TWVzc2FnZSBEZXN0aW5hdGlvbiIsICJkZXN0aW5hdGlvbl90eXBlIjogMCwgInByb2dyYW1tYXRp
Y19uYW1lIjogImZuX3N5bWFudGVjX2RscCIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjog
WyJpbnRlZ3JhdGlvbi1zZXJ2ZXIuYWxmcmVkQHdheW5lY29ycC5jb20iXX1dLCAiaW5jaWRlbnRf
YXJ0aWZhY3RfdHlwZXMiOiBbXSwgInJvbGVzIjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRpb25z
IjogW10sICJ0eXBlX2lkIjogMCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJTeW1h
bnRlYyBETFAgSW5jaWRlbnQgSUQiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiAi
cHJvcGVydGllcyIsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogNDM3LCAicmVhZF9vbmx5Ijog
ZmFsc2UsICJ1dWlkIjogIjU1ZjM1ZTIyLTE2MTAtNDJiMC1hY2NjLWY2NTk3NGU4NmU0ZSIsICJj
aG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgInRvb2x0aXAiOiAiVGhlIElE
IG9mIGEgU3ltYW50ZWMgRExQIEluY2lkZW50IiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3Rl
eHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9zZGxw
X2luY2lkZW50X2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6
ICIiLCAibmFtZSI6ICJzZGxwX2luY2lkZW50X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRl
ZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlv
bnMiOiBbXSwgInR5cGVfaWQiOiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlN5
bWFudGVjIERMUCBJbmNpZGVudCBVUkwgIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4
IjogInByb3BlcnRpZXMiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDQzOCwgInJlYWRfb25s
eSI6IGZhbHNlLCAidXVpZCI6ICI0OTU5ODY5My0yYWMzLTQzYWYtYTI2Yi0wMTFjZGJlN2JkNGEi
LCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogInRleHRhcmVhIiwgInRvb2x0aXAiOiAi
IiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiB0cnVlLCAidGVtcGxhdGVzIjogW10s
ICJleHBvcnRfa2V5IjogImluY2lkZW50L3NkbHBfaW5jaWRlbnRfdXJsIiwgImhpZGVfbm90aWZp
Y2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJzZGxwX2luY2lkZW50
X3VybCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBm
YWxzZSwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogNiwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJzZGxwX25vdGVfdG9fYmVfc2VudCIsICJibGFu
a19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgImNoYW5nZWFibGUiOiB0
cnVlLCAiaWQiOiA0ODIsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiMzA4Yzg4ODAtY2Rh
ZC00MTBjLTk2NDAtNmRkMzYxM2YxMmYyIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6
ICJ0ZXh0IiwgInRvb2x0aXAiOiAiQSBBY3Rpdml0eSBGaWVsZCB0byB0YWtlIGEgdXNlciBlbnRl
cmVkIHBpZWNlIG9mIHRleHQgdG8gYmUgc2VudCB0byBETFAuIE9ubHkgcGxhaW50ZXh0IGNhbiBi
ZSBzZW50IiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRl
cyI6IFtdLCAiZXhwb3J0X2tleSI6ICJhY3Rpb25pbnZvY2F0aW9uL3NkbHBfbm90ZV90b19iZV9z
ZW50IiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFt
ZSI6ICJzZGxwX25vdGVfdG9fYmVfc2VudCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0
X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRpb25zIjog
W10sICJ0eXBlX2lkIjogMTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAic2RscF91
cGRhdGVfcGF5bG9hZCIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJj
aGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogNDcyLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjog
ImIxNTg3MWViLWI0MzYtNDI2Ni1iMWJiLTgzNjhiNzQzOTcyYiIsICJjaG9zZW4iOiBmYWxzZSwg
ImlucHV0X3R5cGUiOiAidGV4dGFyZWEiLCAidG9vbHRpcCI6ICJBIEpTT04tbGlrZSBvYmplY3Qg
d2hpY2ggY29udGFpbnMgdmFsdWVzIHRvIGJlIHVwZGF0ZWQgb24gYSBnaXZlbiBTeW1hbnRlYyBE
TFAgSW5jaWRlbnQiLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVt
cGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vc2RscF91cGRhdGVfcGF5bG9h
ZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUi
OiAic2RscF91cGRhdGVfcGF5bG9hZCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2No
b3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInJlcXVpcmVkIjogImFsd2F5cyIsICJ2YWx1ZXMiOiBb
XX1dLCAib3ZlcnJpZGVzIjogW10sICJleHBvcnRfZGF0ZSI6IDE1NzE4NDEzNTA1Njh9
"""
    )