# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_symantec_dlp"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_symantec_dlp package"""
    reload_params = {"package": u"fn_symantec_dlp",
                    "incident_fields": [u"sdlp_incident_id", u"sdlp_incident_url"], 
                    "action_fields": [u"sdlp_note_to_be_sent"], 
                    "function_params": [u"sdlp_update_payload"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_symantec_dlp"], 
                    "functions": [u"fn_symantec_dlp_update_incident"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"sdlp_send_note_to_incident", u"sdlp_set_incident_status"], 
                    "actions": [u"Example: Symantec DLP - Send a note to a DLP Incident", u"Example: Symantec DLP - Update DLP when this Incident is closed "], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     sdlp_incident_id
    #     sdlp_incident_url
    #   Action fields:
    #     sdlp_note_to_be_sent
    #   Function inputs:
    #     sdlp_update_payload
    #   Message Destinations:
    #     fn_symantec_dlp
    #   Functions:
    #     fn_symantec_dlp_update_incident
    #   Workflows:
    #     sdlp_send_note_to_incident
    #     sdlp_set_incident_status
    #   Rules:
    #     Example: Symantec DLP - Send a note to a DLP Incident
    #     Example: Symantec DLP - Update DLP when this Incident is closed 


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjY4YWY1MDBmLWZiMGEt
NDkwYS1iNDM4LTVmOTAwMjRkZmUxZSIsICJkZXNjcmlwdGlvbiI6ICJBbiBleGFtcGxlIHdvcmtm
bG93IHdoaWNoIGlzIHVzZWQgdG8gdXBkYXRlIGEgRExQIEluY2lkZW50cyBTdGF0dXMgdG8gQ2xv
c2VkLiIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJleHBvcnRfa2V5IjogInNkbHBfc2V0
X2luY2lkZW50X3N0YXR1cyIsICJ3b3JrZmxvd19pZCI6IDE2LCAibGFzdF9tb2RpZmllZF9ieSI6
ICJhbGZyZWRAd2F5bmVjb3JwLmNvbSIsICJjb250ZW50IjogeyJ4bWwiOiAiPD94bWwgdmVyc2lv
bj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRlZmluaXRpb25zIHhtbG5zPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTFwiIHhtbG5zOmJwbW5kaT1cImh0
dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvRElcIiB4bWxuczpvbWdkYz1cImh0
dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RDXCIgeG1sbnM6b21nZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9ESVwiIHhtbG5zOnJlc2lsaWVudD1cImh0
dHA6Ly9yZXNpbGllbnQuaWJtLmNvbS9icG1uXCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5v
cmcvMjAwMS9YTUxTY2hlbWFcIiB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hN
TFNjaGVtYS1pbnN0YW5jZVwiIHRhcmdldE5hbWVzcGFjZT1cImh0dHA6Ly93d3cuY2FtdW5kYS5v
cmcvdGVzdFwiPjxwcm9jZXNzIGlkPVwic2RscF9zZXRfaW5jaWRlbnRfc3RhdHVzXCIgaXNFeGVj
dXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZXQgSW5jaWRl
bnQgU3RhdHVzIHRvIENsb3NlZFwiPjxkb2N1bWVudGF0aW9uPkFuIGV4YW1wbGUgd29ya2Zsb3cg
d2hpY2ggaXMgdXNlZCB0byB1cGRhdGUgYSBETFAgSW5jaWRlbnRzIFN0YXR1cyB0byBDbG9zZWQu
PC9kb2N1bWVudGF0aW9uPjxzdGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91
dGdvaW5nPlNlcXVlbmNlRmxvd18wZHp5eHZiPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZp
Y2VUYXNrIGlkPVwiU2VydmljZVRhc2tfMWZieTMzbVwiIG5hbWU9XCJTeW1hbnRlYyBETFA6IFVw
ZGF0ZSBJbmNpZGVudFwiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxl
bWVudHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiODk2MmY3MTUtNjExNC00ZThmLWEyNDct
MjljNDA2MjNiOThjXCI+e1wiaW5wdXRzXCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6
XCJwPWFcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjXFxuIyMjIERlZmluZSBwcmUtcHJvY2Vzc2luZyBmdW5jdGlvbnMg
IyMjXFxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXFxuZGVmIGRpY3Rf
dG9fanNvbl9zdHIoZCk6XFxuICBcXFwiXFxcIlxcXCJGdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGEg
ZGljdGlvbmFyeSBpbnRvIGEgSlNPTiBzdHJpbmdzZWxmLlxcbiAgICAgU3VwcG9ydHMgYmFzZXN0
cmluZywgYm9vbCBhbmQgaW50LlxcbiAgICAgSWYgdGhlIHZhbHVlIGlzIE5vbmUsIGl0IHNldHMg
aXQgdG8gRmFsc2VcXFwiXFxcIlxcXCJcXG5cXG4gIGpzb25fc3RyID0gJ1xcXCJ7IHswfSB9XFxc
IidcXG4gIGpzb25fZW50cnkgPSAnXFxcInswfVxcXCI6ezF9J1xcbiAganNvbl9lbnRyeV9zdHIg
PSAnXFxcInswfVxcXCI6XFxcInsxfVxcXCInXFxuICBlbnRyaWVzID0gW10gXFxuICBcXG4gIGZv
ciBlbnRyeSBpbiBkOlxcbiAgICBrZXkgPSBlbnRyeVxcbiAgICB2YWx1ZSA9IGRbZW50cnldXFxu
ICAgIFxcbiAgICAgIFxcbiAgICBpZiB2YWx1ZSBpcyBOb25lOlxcbiAgICAgIHZhbHVlID0gRmFs
c2VcXG4gICAgICBcXG4gICAgXFxuICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGJhc2VzdHJpbmcp
OlxcbiAgICAgIGVudHJpZXMuYXBwZW5kKGpzb25fZW50cnlfc3RyLmZvcm1hdChrZXksIHZhbHVl
KSlcXG4gICAgXFxuICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYm9vbCk6XFxuICAgICAgdmFs
dWUgPSAndHJ1ZScgaWYgdmFsdWUgPT0gVHJ1ZSBlbHNlICdmYWxzZSdcXG4gICAgICBlbnRyaWVz
LmFwcGVuZChqc29uX2VudHJ5LmZvcm1hdChrZXksIHZhbHVlKSlcXG4gICAgXFxuICAgIGVsc2U6
XFxuICAgICAgZW50cmllcy5hcHBlbmQoanNvbl9lbnRyeS5mb3JtYXQoa2V5LCB2YWx1ZSkpXFxu
ICBcXG4gIHJldHVybiAneycgKyAnLCcuam9pbihlbnRyaWVzKSArICd9J1xcblxcbnBheWxvYWQg
PSB7XFxuXFxcInN0YXR1c1xcXCI6IFxcXCJDbG9zZWRcXFwiLFxcblxcXCJpbmNpZGVudF9pZFxc
XCI6IGluY2lkZW50LnByb3BlcnRpZXMuc2RscF9pbmNpZGVudF9pZFxcbn1cXG5cXG5cXG5cXG5c
XG5pbnB1dHMuc2RscF91cGRhdGVfcGF5bG9hZCA9IGRpY3RfdG9fanNvbl9zdHIocGF5bG9hZClc
In08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1
ZW5jZUZsb3dfMGR6eXh2YjwvaW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wdnJmYnk3
PC9vdXRnb2luZz48L3NlcnZpY2VUYXNrPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3df
MGR6eXh2YlwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNl
cnZpY2VUYXNrXzFmYnkzM21cIi8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMWMycjIza1wiPjxp
bmNvbWluZz5TZXF1ZW5jZUZsb3dfMHZyZmJ5NzwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVu
Y2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzB2cmZieTdcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFz
a18xZmJ5MzNtXCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRfMWMycjIza1wiLz48dGV4dEFubm90YXRp
b24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxv
dyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRp
b25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1c
IlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0g
aWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRl
ZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9
XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdk
YzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+
PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwi
IHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hh
cGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0
XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hh
cGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBp
ZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhz
aTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUz
XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18xZmJ5MzNtXCIgaWQ9
XCJTZXJ2aWNlVGFza18xZmJ5MzNtX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdp
ZHRoPVwiMTAwXCIgeD1cIjM3NlwiIHk9XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1u
ZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMGR6eXh2YlwiIGlkPVwiU2Vx
dWVuY2VGbG93XzBkenl4dmJfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMzc2XCIgeHNp
OnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIyODdcIiB5PVwiMTg0XCIvPjwv
YnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1u
RWxlbWVudD1cIkVuZEV2ZW50XzFjMnIyM2tcIiBpZD1cIkVuZEV2ZW50XzFjMnIyM2tfZGlcIj48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI2NTlcIiB5PVwiMTg4
XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1c
IjBcIiB4PVwiNjc3XCIgeT1cIjIyN1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBN
TlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMHZyZmJ5
N1wiIGlkPVwiU2VxdWVuY2VGbG93XzB2cmZieTdfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQ3
NlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4
PVwiNjU5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1O
TGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI1NjcuNVwi
IHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRp
OkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48L2RlZmluaXRpb25zPiIsICJ3b3JrZmxv
d19pZCI6ICJzZGxwX3NldF9pbmNpZGVudF9zdGF0dXMiLCAidmVyc2lvbiI6IDN9LCAibGFzdF9t
b2RpZmllZF90aW1lIjogMTU3MTY1NTY0MDgxNiwgImNyZWF0b3JfaWQiOiAiYWxmcmVkQHdheW5l
Y29ycC5jb20iLCAiYWN0aW9ucyI6IFtdLCAicHJvZ3JhbW1hdGljX25hbWUiOiAic2RscF9zZXRf
aW5jaWRlbnRfc3RhdHVzIiwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2V0IElu
Y2lkZW50IFN0YXR1cyB0byBDbG9zZWQifSwgeyJ1dWlkIjogIjFmNDRkZjU0LTJkMmQtNGRmOS05
NTgzLTQ2MTk0N2Q3NGRjMSIsICJkZXNjcmlwdGlvbiI6ICJBbiBleGFtcGxlIHdvcmtmbG93IHdo
aWNoIGNhbiBiZSB1c2VkIHRvIHNlbmQgYSBOb3RlIHRvIGEgRExQIEluY2lkZW50LiBUaGlzIHdv
cmtmbG93IGdldHMgaXRzIG5vdGUgdGV4dCBmcm9tIGFuIGFzc29jaWF0ZWQgUnVsZSB3aGljaCBo
YXMgYW4gYWN0aXZpdHkgZmllbGQuIElmIG5vIHZhbHVlIGlzIGdpdmVuIHdpdGggdGhlIGFjdGl2
aXR5IGZpZWxkIHRoZW4gaXQgc2VuZHMgYSBkZWZhdWx0IHBpZWNlIG9mIHRleHQuIiwgIm9iamVj
dF90eXBlIjogImluY2lkZW50IiwgImV4cG9ydF9rZXkiOiAic2RscF9zZW5kX25vdGVfdG9faW5j
aWRlbnQiLCAid29ya2Zsb3dfaWQiOiAyOCwgImxhc3RfbW9kaWZpZWRfYnkiOiAiYWxmcmVkQHdh
eW5lY29ycC5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBl
bmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9y
Zy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxp
ZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5z
dGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48
cHJvY2VzcyBpZD1cInNkbHBfc2VuZF9ub3RlX3RvX2luY2lkZW50XCIgaXNFeGVjdXRhYmxlPVwi
dHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZW5kIE5vdGUgdG8gSW5jaWRl
bnRcIj48ZG9jdW1lbnRhdGlvbj5BbiBleGFtcGxlIHdvcmtmbG93IHdoaWNoIGNhbiBiZSB1c2Vk
IHRvIHNlbmQgYSBOb3RlIHRvIGEgRExQIEluY2lkZW50LiBUaGlzIHdvcmtmbG93IGdldHMgaXRz
IG5vdGUgdGV4dCBmcm9tIGFuIGFzc29jaWF0ZWQgUnVsZSB3aGljaCBoYXMgYW4gYWN0aXZpdHkg
ZmllbGQuIElmIG5vIHZhbHVlIGlzIGdpdmVuIHdpdGggdGhlIGFjdGl2aXR5IGZpZWxkIHRoZW4g
aXQgc2VuZHMgYSBkZWZhdWx0IHBpZWNlIG9mIHRleHQuPC9kb2N1bWVudGF0aW9uPjxzdGFydEV2
ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wNGs4
MnRrPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwiU2VydmljZVRhc2tf
MGdqZ2VjYlwiIG5hbWU9XCJTeW1hbnRlYyBETFA6IFVwZGF0ZSBJbmNpZGVudFwiIHJlc2lsaWVu
dDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5jdGlv
biB1dWlkPVwiODk2MmY3MTUtNjExNC00ZThmLWEyNDctMjljNDA2MjNiOThjXCI+e1wiaW5wdXRz
XCI6e30sXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjI1xcbiMjIyBEZWZpbmUgcHJlLXByb2Nlc3NpbmcgZnVuY3Rpb25zICMj
I1xcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcbmRlZiBkaWN0X3Rv
X2pzb25fc3RyKGQpOlxcbiAgXFxcIlxcXCJcXFwiRnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBhIGRp
Y3Rpb25hcnkgaW50byBhIEpTT04gc3RyaW5nc2VsZi5cXG4gICAgIFN1cHBvcnRzIGJhc2VzdHJp
bmcsIGJvb2wgYW5kIGludC5cXG4gICAgIElmIHRoZSB2YWx1ZSBpcyBOb25lLCBpdCBzZXRzIGl0
IHRvIEZhbHNlXFxcIlxcXCJcXFwiXFxuXFxuICBqc29uX3N0ciA9ICdcXFwieyB7MH0gfVxcXCIn
XFxuICBqc29uX2VudHJ5ID0gJ1xcXCJ7MH1cXFwiOnsxfSdcXG4gIGpzb25fZW50cnlfc3RyID0g
J1xcXCJ7MH1cXFwiOlxcXCJ7MX1cXFwiJ1xcbiAganNvbl9lbnRyeV91bmljb2RlID0gdSdcXFwi
ezB9XFxcIjpcXFwiezF9XFxcIidcXG4gIGVudHJpZXMgPSBbXSBcXG4gIFxcbiAgZm9yIGVudHJ5
IGluIGQ6XFxuICAgIGtleSA9IGVudHJ5XFxuICAgIHZhbHVlID0gZFtlbnRyeV1cXG4gICAgXFxu
ICAgICAgXFxuICAgIGlmIHZhbHVlIGlzIE5vbmU6XFxuICAgICAgdmFsdWUgPSBGYWxzZVxcbiAg
ICAgIFxcbiAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCB1bmljb2RlKTpcXG4gICAgICBlbnRyaWVz
LmFwcGVuZChqc29uX2VudHJ5X3VuaWNvZGUuZm9ybWF0KGtleSwgdmFsdWUpKVxcbiAgICAgIFxc
biAgICBlbGlmIGlzaW5zdGFuY2UodmFsdWUsIGJhc2VzdHJpbmcpOlxcbiAgICAgIGVudHJpZXMu
YXBwZW5kKGpzb25fZW50cnlfc3RyLmZvcm1hdChrZXksIHZhbHVlKSlcXG4gICAgXFxuICAgIGVs
aWYgaXNpbnN0YW5jZSh2YWx1ZSwgYm9vbCk6XFxuICAgICAgdmFsdWUgPSAndHJ1ZScgaWYgdmFs
dWUgPT0gVHJ1ZSBlbHNlICdmYWxzZSdcXG4gICAgICBlbnRyaWVzLmFwcGVuZChqc29uX2VudHJ5
LmZvcm1hdChrZXksIHZhbHVlKSlcXG4gICAgXFxuICAgIGVsc2U6XFxuICAgICAgZW50cmllcy5h
cHBlbmQoanNvbl9lbnRyeS5mb3JtYXQoa2V5LCB2YWx1ZSkpXFxuICBcXG4gIHJldHVybiAneycg
KyAnLCcuam9pbihlbnRyaWVzKSArICd9J1xcblxcbmZyb20gamF2YS51dGlsIGltcG9ydCBEYXRl
XFxuXFxuIyBQcmVwYXJlIHRoZSBwYXlsb2FkIHdoaWNoIHdpbGwgYmUgc2VudCB0byBETFAgYXMg
YW4gdXBkYXRlIHJlcXVlc3RcXG5wYXlsb2FkID0ge1xcblxcXCJub3RlXFxcIjogdVxcXCJbe31d
e31cXFwiLmZvcm1hdChEYXRlKCksIHJ1bGUucHJvcGVydGllcy5zZGxwX25vdGVfdG9fYmVfc2Vu
dCBvciBcXFwiRGVmYXVsdCBOb3RlIGZyb20gUmVzaWxpZW50XFxcIiksXFxuXFxcImluY2lkZW50
X2lkXFxcIjogaW5jaWRlbnQucHJvcGVydGllcy5zZGxwX2luY2lkZW50X2lkXFxufVxcblxcblxc
bmlucHV0cy5zZGxwX3VwZGF0ZV9wYXlsb2FkID0gZGljdF90b19qc29uX3N0cihwYXlsb2FkKVwi
fTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVl
bmNlRmxvd18wNGs4MnRrPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzFlMmJiaGk8
L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18w
NGs4MnRrXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2Vy
dmljZVRhc2tfMGdqZ2VjYlwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8xZHZuZmh0XCI+PGlu
Y29taW5nPlNlcXVlbmNlRmxvd18xZTJiYmhpPC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5j
ZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMWUyYmJoaVwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNr
XzBnamdlY2JcIiB0YXJnZXRSZWY9XCJFbmRFdmVudF8xZHZuZmh0XCIvPjx0ZXh0QW5ub3RhdGlv
biBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93
IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlv
bl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwi
VGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3Rh
dGlvbl8wYndvankzXCI+PHRleHQ+SW5wdXRzOiBUaGUgU0RMUCBVcGRhdGUgUGF5bG9hZCB0YWtl
cyBrZXk6dmFsdWUgcGFpcnMgd2hpY2ggcmVwcmVzZW50IHdoaWNoIHBhcnRzIG9mIHRoZSBpbmNp
ZGVudCB3ZSB3YW50IHRvIHVwZGF0ZS48L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRp
b24gaWQ9XCJBc3NvY2lhdGlvbl8wcTN3czR6XCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMGdq
Z2VjYlwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzBid29qeTNcIi8+PHRleHRBbm5vdGF0
aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWNwY3A5eVwiPjx0ZXh0PlRoZSByZXN1bHRzIG9mIHRo
ZSBBUEkgY2FsbCBhcmUgbm90IHJldHVybmVkIHRvIHRoZSBQb3N0LVByb2Nlc3Npbmcgc2NyaXB0
IGFzIGFsbCB0aGUgaW5mb3JtYXRpb24gd2Ugc2VuZCB0byBETFAgaXMgZm91bmQgaW4gdGhlIElu
cHV0cyBwYXJ0IG9mIHRoZSBwYXlsb2FkLjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lh
dGlvbiBpZD1cIkFzc29jaWF0aW9uXzBmM3N3cjdcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18w
Z2pnZWNiXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWNwY3A5eVwiLz48L3Byb2Nlc3M+
PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFu
ZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQ
TU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVu
dF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4
PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRl
eHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0
XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNz
b2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3
YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9t
Z2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwi
Lz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZp
Y2VUYXNrXzBnamdlY2JcIiBpZD1cIlNlcnZpY2VUYXNrXzBnamdlY2JfZGlcIj48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiNDA4XCIgeT1cIjE2NlwiLz48L2Jw
bW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxv
d18wNGs4MnRrXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMDRrODJ0a19kaVwiPjxvbWdkaTp3YXlwb2lu
dCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndh
eXBvaW50IHg9XCI0MDhcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBt
bmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1c
IjMwM1wiIHk9XCIxODQuNVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRFdmVudF8xZHZuZmh0XCIgaWQ9XCJF
bmRFdmVudF8xZHZuZmh0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwi
MzZcIiB4PVwiNzQ0XCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjc2MlwiIHk9XCIyMjdcIi8+PC9icG1uZGk6
QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50
PVwiU2VxdWVuY2VGbG93XzFlMmJiaGlcIiBpZD1cIlNlcXVlbmNlRmxvd18xZTJiYmhpX2RpXCI+
PG9tZ2RpOndheXBvaW50IHg9XCI1MDhcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIw
NlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjc0NFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3
aWR0aD1cIjBcIiB4PVwiNjI2XCIgeT1cIjE4NC41XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2Jw
bW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0
aW9uXzBid29qeTNcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzBid29qeTNfZGlcIj48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjg2XCIgd2lkdGg9XCIxNDBcIiB4PVwiMjM0XCIgeT1cIjM0XCIvPjwvYnBt
bmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25f
MHEzd3M0elwiIGlkPVwiQXNzb2NpYXRpb25fMHEzd3M0el9kaVwiPjxvbWdkaTp3YXlwb2ludCB4
PVwiNDE0XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNzBcIi8+PG9tZ2RpOndheXBv
aW50IHg9XCIzNTVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjEyMFwiLz48L2JwbW5k
aTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9u
XzFjcGNwOXlcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFjcGNwOXlfZGlcIj48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjc1XCIgd2lkdGg9XCIyMjJcIiB4PVwiNTk1XCIgeT1cIjM5XCIvPjwvYnBtbmRp
OkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMGYz
c3dyN1wiIGlkPVwiQXNzb2NpYXRpb25fMGYzc3dyN19kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwi
NTA4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODBcIi8+PG9tZ2RpOndheXBvaW50
IHg9XCI2MzVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjExNFwiLz48L2JwbW5kaTpC
UE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRpYWdyYW0+PC9kZWZpbml0
aW9ucz4iLCAid29ya2Zsb3dfaWQiOiAic2RscF9zZW5kX25vdGVfdG9faW5jaWRlbnQiLCAidmVy
c2lvbiI6IDR9LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU3MTkwOTI3NTE3NSwgImNyZWF0b3Jf
aWQiOiAiYWxmcmVkQHdheW5lY29ycC5jb20iLCAiYWN0aW9ucyI6IFtdLCAicHJvZ3JhbW1hdGlj
X25hbWUiOiAic2RscF9zZW5kX25vdGVfdG9faW5jaWRlbnQiLCAibmFtZSI6ICJFeGFtcGxlOiBT
eW1hbnRlYyBETFAgLSBTZW5kIE5vdGUgdG8gSW5jaWRlbnQifV0sICJhY3Rpb25zIjogW3sibG9n
aWNfdHlwZSI6ICJhbGwiLCAibmFtZSI6ICJFeGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZW5kIGEg
bm90ZSB0byBhIERMUCBJbmNpZGVudCIsICJ2aWV3X2l0ZW1zIjogW3sic2hvd19pZiI6IG51bGws
ICJmaWVsZF90eXBlIjogImFjdGlvbmludm9jYXRpb24iLCAic2hvd19saW5rX2hlYWRlciI6IGZh
bHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiMzA4Yzg4ODAtY2RhZC00
MTBjLTk2NDAtNmRkMzYxM2YxMmYyIiwgInN0ZXBfbGFiZWwiOiBudWxsfV0sICJ0eXBlIjogMSwg
IndvcmtmbG93cyI6IFsic2RscF9zZW5kX25vdGVfdG9faW5jaWRlbnQiXSwgIm9iamVjdF90eXBl
IjogImluY2lkZW50IiwgInRpbWVvdXRfc2Vjb25kcyI6IDg2NDAwLCAidXVpZCI6ICI0NGY1MGE3
OC00YjYyLTQ5NjUtYTIzZi04NGM2M2ZkNTI2YWUiLCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9y
dF9rZXkiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2VuZCBhIG5vdGUgdG8gYSBETFAgSW5j
aWRlbnQiLCAiY29uZGl0aW9ucyI6IFt7InR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51
bGwsICJmaWVsZF9uYW1lIjogImluY2lkZW50LnByb3BlcnRpZXMuc2RscF9pbmNpZGVudF9pZCIs
ICJtZXRob2QiOiAiaGFzX2FfdmFsdWUiLCAidmFsdWUiOiBudWxsfV0sICJpZCI6IDgzLCAibWVz
c2FnZV9kZXN0aW5hdGlvbnMiOiBbXX0sIHsibG9naWNfdHlwZSI6ICJhbGwiLCAibmFtZSI6ICJF
eGFtcGxlOiBTeW1hbnRlYyBETFAgLSBVcGRhdGUgRExQIHdoZW4gdGhpcyBJbmNpZGVudCBpcyBj
bG9zZWQgIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAwLCAid29ya2Zsb3dzIjogWyJzZGxw
X3NldF9pbmNpZGVudF9zdGF0dXMiXSwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgInRpbWVv
dXRfc2Vjb25kcyI6IDg2NDAwLCAidXVpZCI6ICI0NTYyY2YxNy02YWM2LTRhMDktYjJlZS05MWRk
MTJmYWI2NjIiLCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogU3lt
YW50ZWMgRExQIC0gVXBkYXRlIERMUCB3aGVuIHRoaXMgSW5jaWRlbnQgaXMgY2xvc2VkICIsICJj
b25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZpZWxk
X25hbWUiOiAiaW5jaWRlbnQucGxhbl9zdGF0dXMiLCAibWV0aG9kIjogImVxdWFscyIsICJ2YWx1
ZSI6ICJDbG9zZWQifSwgeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmll
bGRfbmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLnNkbHBfaW5jaWRlbnRfaWQiLCAibWV0aG9k
IjogImhhc19hX3ZhbHVlIiwgInZhbHVlIjogbnVsbH1dLCAiaWQiOiA1NiwgIm1lc3NhZ2VfZGVz
dGluYXRpb25zIjogW119XSwgImxheW91dHMiOiBbXSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6
IDIsICJpZCI6IDg3LCAiaW5kdXN0cmllcyI6IG51bGwsICJwaGFzZXMiOiBbXSwgImFjdGlvbl9v
cmRlciI6IFtdLCAiZ2VvcyI6IG51bGwsICJsb2NhbGUiOiBudWxsLCAic2VydmVyX3ZlcnNpb24i
OiB7Im1ham9yIjogMzEsICJ2ZXJzaW9uIjogIjMxLjAuNDIzNSIsICJidWlsZF9udW1iZXIiOiA0
MjM1LCAibWlub3IiOiAwfSwgInRpbWVmcmFtZXMiOiBudWxsLCAid29ya3NwYWNlcyI6IFtdLCAi
YXV0b21hdGljX3Rhc2tzIjogW10sICJmdW5jdGlvbnMiOiBbeyJkaXNwbGF5X25hbWUiOiAiU3lt
YW50ZWMgRExQOiBVcGRhdGUgSW5jaWRlbnQiLCAiZGVzY3JpcHRpb24iOiB7ImNvbnRlbnQiOiAi
QSBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIHVwZGF0ZSB0aGUgZGV0YWlscyBvZiBhIFN5bWFu
dGVjIERMUCBJbmNpZGVudC4gVGFrZXMgMSBpbnB1dCB3aGljaCBpcyBhIGRpY3Rpb25hcnkgb2Yg
dGhpbmdzIHRvIGJlIGNoYW5nZWQuIFRvIGVuYWJsZSB0byB1cGRhdGluZyBvZiBtdWx0aXBsZSBj
dXN0b20gYXR0cmlidXRlcywgcHJvdmlkZSBhIGxpc3Qgb3IgZGljdGlvbmFyeSBvZiBhbGwgdGhl
IGF0dHJpYnV0ZXMgdG8gYmUgY2hhbmdlZCBpbiB0aGUgZm9ybWF0OiA8YXR0cmlidXRlX25hbWU+
OiA8bmV3X3ZhbHVlPiIsICJmb3JtYXQiOiAidGV4dCJ9LCAiY3JlYXRvciI6IHsiZGlzcGxheV9u
YW1lIjogIkludGVncmF0aW9ucyBTZXJ2ZXIgQSIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiA0MCwg
Im5hbWUiOiAiaW50ZWdyYXRpb24tc2VydmVyLmFsZnJlZEB3YXluZWNvcnAuY29tIn0sICJ2aWV3
X2l0ZW1zIjogW3sic2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAi
c2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRl
bnQiOiAiYjE1ODcxZWItYjQzNi00MjY2LWIxYmItODM2OGI3NDM5NzJiIiwgInN0ZXBfbGFiZWwi
OiBudWxsfV0sICJleHBvcnRfa2V5IjogImZuX3N5bWFudGVjX2RscF91cGRhdGVfaW5jaWRlbnQi
LCAidXVpZCI6ICI4OTYyZjcxNS02MTE0LTRlOGYtYTI0Ny0yOWM0MDYyM2I5OGMiLCAibGFzdF9t
b2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIkFsZnJlZCBQZW5ueXdvcnRoIiwgInR5cGUi
OiAidXNlciIsICJpZCI6IDM5LCAibmFtZSI6ICJhbGZyZWRAd2F5bmVjb3JwLmNvbSJ9LCAidmVy
c2lvbiI6IDUsICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlw
ZSI6ICJpbmNpZGVudCIsICJhY3Rpb25zIjogW10sICJuYW1lIjogIkV4YW1wbGU6IFN5bWFudGVj
IERMUCAtIFNlbmQgTm90ZSB0byBJbmNpZGVudCIsICJ3b3JrZmxvd19pZCI6IDI4LCAicHJvZ3Jh
bW1hdGljX25hbWUiOiAic2RscF9zZW5kX25vdGVfdG9faW5jaWRlbnQiLCAidXVpZCI6IG51bGx9
LCB7ImRlc2NyaXB0aW9uIjogbnVsbCwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImFjdGlv
bnMiOiBbXSwgIm5hbWUiOiAiRXhhbXBsZTogU3ltYW50ZWMgRExQIC0gU2VuZCBOb3RlIHRvIElu
Y2lkZW50T0xEIiwgIndvcmtmbG93X2lkIjogMTcsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJzZGxw
X19zZW5kX25vdGVfdG9faW5jaWRlbnQiLCAidXVpZCI6IG51bGx9LCB7ImRlc2NyaXB0aW9uIjog
bnVsbCwgIm9iamVjdF90eXBlIjogIm5vdGUiLCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFt
cGxlOiBTeW1hbnRlYyBETFAgLSBTZW5kIHRoaXMgbm90ZSB0byBETFAgSW5jaWRlbnQiLCAid29y
a2Zsb3dfaWQiOiA5LCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9zeW1hbnRlY19kbHBf
X3NlbmRfdGhpc19ub3RlX3RvX2RscF9pbmNpZGVudCIsICJ1dWlkIjogbnVsbH0sIHsiZGVzY3Jp
cHRpb24iOiBudWxsLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiYWN0aW9ucyI6IFtdLCAi
bmFtZSI6ICJFeGFtcGxlOiBTeW1hbnRlYyBETFAgLSBTZXQgSW5jaWRlbnQgU3RhdHVzIHRvIENs
b3NlZCIsICJ3b3JrZmxvd19pZCI6IDE2LCAicHJvZ3JhbW1hdGljX25hbWUiOiAic2RscF9zZXRf
aW5jaWRlbnRfc3RhdHVzIiwgInV1aWQiOiBudWxsfV0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAx
NTcxNjU1NTM5MTI5LCAiZGVzdGluYXRpb25faGFuZGxlIjogImZuX3N5bWFudGVjX2RscCIsICJp
ZCI6IDQzLCAibmFtZSI6ICJmbl9zeW1hbnRlY19kbHBfdXBkYXRlX2luY2lkZW50In1dLCAibm90
aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjog
W3siY3JlYXRlX2RhdGUiOiAxNTcyMDAyNjc3Nzg0LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXph
dGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQ
YWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNr
YWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRlIjogMTU3MjAwMjY3Nzc4NCwgInV1aWQiOiAi
YmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwg
InN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJz
Y3JpcHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlk
IjogImQ3NWM4NTYwLTY0ZDItNDRjYS04N2NlLTRkYjUxMGEzYzVkMSIsICJleHBvcnRfa2V5Ijog
ImZuX3N5bWFudGVjX2RscCIsICJuYW1lIjogIlN5bWFudGVjIERMUCBNZXNzYWdlIERlc3RpbmF0
aW9uIiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZm5fc3lt
YW50ZWNfZGxwIiwgImV4cGVjdF9hY2siOiB0cnVlLCAidXNlcnMiOiBbImludGVncmF0aW9uLXNl
cnZlci5hbGZyZWRAd2F5bmVjb3JwLmNvbSJdfV0sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6
IFtdLCAicm9sZXMiOiBbXSwgImZpZWxkcyI6IFt7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQi
OiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlN5bWFudGVjIERMUCBJbmNpZGVu
dCBVUkwgIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAi
Y2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDQzOCwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6
ICI0OTU5ODY5My0yYWMzLTQzYWYtYTI2Yi0wMTFjZGJlN2JkNGEiLCAiY2hvc2VuIjogZmFsc2Us
ICJpbnB1dF90eXBlIjogInRleHRhcmVhIiwgInRvb2x0aXAiOiAiIiwgImludGVybmFsIjogZmFs
c2UsICJyaWNoX3RleHQiOiB0cnVlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogImlu
Y2lkZW50L3NkbHBfaW5jaWRlbnRfdXJsIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJw
bGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJzZGxwX2luY2lkZW50X3VybCIsICJkZXByZWNhdGVk
IjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtd
fSwgeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9
LCAidGV4dCI6ICJTeW1hbnRlYyBETFAgSW5jaWRlbnQgSUQiLCAiYmxhbmtfb3B0aW9uIjogZmFs
c2UsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogNDM3
LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjU1ZjM1ZTIyLTE2MTAtNDJiMC1hY2NjLWY2
NTk3NGU4NmU0ZSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgInRv
b2x0aXAiOiAiVGhlIElEIG9mIGEgU3ltYW50ZWMgRExQIEluY2lkZW50IiwgImludGVybmFsIjog
ZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6
ICJpbmNpZGVudC9zZGxwX2luY2lkZW50X2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2Us
ICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJzZGxwX2luY2lkZW50X2lkIiwgImRlcHJlY2F0
ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjog
W119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiA2LCAib3BlcmF0aW9uX3Blcm1zIjog
e30sICJ0ZXh0IjogInNkbHBfbm90ZV90b19iZV9zZW50IiwgImJsYW5rX29wdGlvbiI6IGZhbHNl
LCAicHJlZml4IjogInByb3BlcnRpZXMiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDQ4Miwg
InJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIzMDhjODg4MC1jZGFkLTQxMGMtOTY0MC02ZGQz
NjEzZjEyZjIiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogInRleHQiLCAidG9vbHRp
cCI6ICJBIEFjdGl2aXR5IEZpZWxkIHRvIHRha2UgYSB1c2VyIGVudGVyZWQgcGllY2Ugb2YgdGV4
dCB0byBiZSBzZW50IHRvIERMUC4gT25seSBwbGFpbnRleHQgY2FuIGJlIHNlbnQiLCAiaW50ZXJu
YWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRf
a2V5IjogImFjdGlvbmludm9jYXRpb24vc2RscF9ub3RlX3RvX2JlX3NlbnQiLCAiaGlkZV9ub3Rp
ZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJuYW1lIjogInNkbHBfbm90ZV90
b19iZV9zZW50IiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZl
ciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAx
MSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJzZGxwX3VwZGF0ZV9wYXlsb2FkIiwg
ImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVl
LCAiaWQiOiA0NzIsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiYjE1ODcxZWItYjQzNi00
MjY2LWIxYmItODM2OGI3NDM5NzJiIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJ0
ZXh0YXJlYSIsICJ0b29sdGlwIjogIkEgSlNPTi1saWtlIG9iamVjdCB3aGljaCBjb250YWlucyB2
YWx1ZXMgdG8gYmUgdXBkYXRlZCBvbiBhIGdpdmVuIFN5bWFudGVjIERMUCBJbmNpZGVudCIsICJp
bnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4
cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9zZGxwX3VwZGF0ZV9wYXlsb2FkIiwgImhpZGVfbm90aWZp
Y2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJzZGxwX3VwZGF0ZV9w
YXlsb2FkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6
IGZhbHNlLCAicmVxdWlyZWQiOiAiYWx3YXlzIiwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMi
OiBbXSwgImV4cG9ydF9kYXRlIjogMTU3MTk0MjI0MDg1NH0=
"""
    )