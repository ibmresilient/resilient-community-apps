{"action_order": [], "actions": [], "apps": [], "automatic_tasks": [], "export_date": 1671635297555, "export_format_version": 2, "export_type": null, "fields": [{"export_key": "incident/internal_customizations_field", "id": 0, "input_type": "text", "internal": true, "name": "internal_customizations_field", "read_only": true, "text": "Customizations Field (internal)", "type_id": 0, "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa1"}], "functions": [], "geos": null, "groups": null, "id": 45, "inbound_destinations": [], "inbound_mailboxes": null, "incident_artifact_types": [], "incident_types": [{"update_date": 1671635295525, "create_date": 1671635295525, "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa0", "description": "Customization Packages (internal)", "export_key": "Customization Packages (internal)", "name": "Customization Packages (internal)", "enabled": false, "system": false, "parent_id": null, "hidden": false, "id": 0}], "industries": null, "layouts": [], "locale": null, "message_destinations": [], "notifications": null, "overrides": null, "phases": [], "playbooks": [], "regulators": null, "roles": [], "scripts": [{"actions": [], "created_date": 1670166249553, "description": "This script converts a json object into a hierarchical display of rich text and adds the rich text to an incident's rich text (custom) field or an incident note. A workflow property is used to share the json to convert and identify parameters used on how to perform the conversion.\nTypically, a function will create workflow property and this script will run after that function to perform the conversion.\n\nFeatures:\n\n* Display the hierarchical nature of json, presenting the json keys (sorted if specified) as bold labels\n* Provide links to found URLs\n* Create either an incident note or add results to an incident (custom) rich text field.", "enabled": false, "export_key": "Convert JSON to rich text v1.3", "id": 209, "language": "python3", "last_modified_by": "a@example.com", "last_modified_time": 1671635282460, "name": "Convert JSON to rich text v1.3", "object_type": "incident", "playbook_handle": null, "programmatic_name": "convert_json_to_rich_text_13", "script_text": "# (c) Copyright IBM Corp. 2010, 2022. All Rights Reserved.\nVERSION = 1.3\n\"\"\"\n  This script converts a json object into a hierarchical display of rich text and adds the rich text to an incident's rich text (custom) field or an incident note.\n  A workflow property is used to define the json to convert and identify parameters used on how to perform the conversion.\n  Typically, a function will create workflow property and this script will run after that function to perform the conversion.\n  Features:\n    * Display the hierarchical nature of json, presenting the json keys as bold labels\n    * Provide links to found URLs\n    * Create either an incident note or add results to an incident (custom) rich text field.\n  \n  In order to use this script, define a workflow property called: convert_json_to_rich_text, to define the json and parameters to use for the conversion.\n  Workflow properties can be added using a command similar to this:\n  workflow.addProperty('convert_json_to_rich_text', {\n    \"version\": 1.3,\n    \"header\": \"Artifact scan results for: {}\".format(artifact.value),\n    \"padding\": 10,\n    \"separator\": u\"<br />\",\n    \"sort\": True,\n    \"json\": results.content,\n    \"json_omit_list\": [\"omit\"],\n    \"incident_field\": None\n  })\n  \n  Format of workflow.property.convert_json_to_rich_text:\n  { \n    \"version\": 1.3, [this is for future compatibility]\n    \"header\": str, [header line to add to converted json produced or None. Ex: Results from scanning artifact: xxx. The header may contain rich text tags]\n    \"padding\": 10, [padding for nested json elements, or defaults to 10]\n    \"separator\": u\"<br />\"|list such as ['<span>','</span>'], [html separator between json keys and lists or defaults to html break: '<br />'. \n                                                If a list, then the data is brackets by the pair specified]\n    \"sort\": True|False, [sort the json keys at each level when displayed]\n    \"json\": json, [required json to convert]\n    \"json_omit_list\": [list of json keys to exclude or None]\n    \"incident_field\": \"<incident_field>\" [indicates a builtin rich text incident field, such as 'description' \n                                          or a custom rich text field in the format: 'properties.<field>'. default: create an incident note]\n  }\n\n  For playbooks, use playbook.addProperty() with the same format as workflow.addProperty()\n\n  Playbooks can also use playbook.functions.results.convert_json_to_rich_text using the standard function output which contains the 'content' json element.\n  When using playbook.functions.results.convert_json_to_rich_text with standard function results, all the defaults for padding, separator, etc. are used.\n\"\"\"\n\nimport re\n\n# needed for python 3\ntry:\n    unicode(\"abc\") # fails in py3\n    py2 = True\nexcept:\n    unicode = str\n    py2 = False\n\n\nrc = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+#\\?]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n\nclass ConvertJson:\n    \"\"\"Class to hold the conversion parameters and perform the conversion\"\"\"\n\n    def __init__(self, omit_keys=[], padding=10, separator=u\"<br />\", sort_keys=False):\n        self.omit_keys = omit_keys\n        self.padding = padding\n        self.separator = separator\n        self.sort_keys = sort_keys\n\n\n    def format_link(self, item):\n        \"\"\"[summary]\n          Find embedded urls (http(s)) and add html anchor tags to display as links\n          Args:\n              item ([string])\n\n          Returns:\n              [str]: None|original text if no links|text with html links\n        \"\"\"\n        formatted_item = item\n        if py2:\n            num_type = bool(item and isinstance(item, (int, long, bool, float)))\n        else:\n            num_type = bool(item and isinstance(item, (int, bool, float)))\n\n        if item and not num_type:\n            list = rc.findall(item)\n            if list:\n                for link in list:\n                    formatted_item = formatted_item.replace(link, u\"<a target='blank' href='{0}'>{0}</a>\".format(link))\n\n        return formatted_item\n\n    def expand_list(self, list_value, is_list=False):\n        \"\"\"[summary]\n          convert items to html, adding indents to nested dictionaries.\n          Args:\n              list_value ([dict|list]): json element\n\n          Returns:\n              [str]: html converted code\n        \"\"\"\n        if not isinstance(list_value, list):\n            return self.format_link(list_value)\n        elif not list_value:\n            return u\"None<br>\"\n\n        try:\n            items_list = []  # this will ensure list starts on second line of key label\n            for item in list_value:\n                if isinstance(item, dict):\n                    result = self.convert_json_to_rich_text(item)\n                    if is_list:\n                        items_list.append(u\"<li>{}</li>\".format(result))\n                    else:\n                        items_list.append(result)\n                elif isinstance(item, list):\n                    items_list.append(self.expand_list(item, is_list=True))\n                elif is_list:\n                    items_list.append(u\"<li>{}</li>\".format(self.format_link(unicode(item))))\n                else:\n                    items_list.append(self.format_link(unicode(item)))\n\n            expand_list_result = self.add_separator(self.separator if not is_list else u\"\",\n                                                    items_list,\n                                                    is_list=is_list)\n\n            if is_list:\n                return u\"<ul>{}</ul>\".format(expand_list_result)\n            else:\n                return u\"<div style='padding:5px'>{}</div>\".format(expand_list_result)\n        except Exception as err:\n            return str(err)\n\n    def convert_json_to_rich_text(self, sub_dict):\n        \"\"\"[summary]\n          Walk dictionary tree and convert to html for better display\n          Args:\n              sub_dict ([type]): [description]\n\n          Returns:\n              [type]: [description]\n        \"\"\"\n        notes = []\n        if sub_dict and isinstance(sub_dict, (list, dict)):\n            if isinstance(sub_dict, list):\n                expanded_list = self.expand_list(sub_dict, is_list=True)\n                notes.append(self.add_separator(self.separator, expanded_list))\n            else:\n                keys = sorted (sub_dict.keys()) if self.sort_keys else sub_dict.keys()\n\n                for key in keys:\n                    if key not in self.omit_keys:\n                        value = sub_dict[key]\n                        is_list = isinstance(value, list)\n                        item_list = [u\"<strong>{0}</strong>: \".format(key)]\n                        if isinstance(value, dict):\n                            convert_result = self.convert_json_to_rich_text(value)\n                            if convert_result:\n                                item_list.append(u\"<div style='padding:{}px'>{}</div>\".format(self.padding, convert_result))\n                            else:\n                                item_list.append(u\"None<br>\")\n                        else:\n                            item_list.append(self.expand_list(value, is_list=is_list))\n\n                        notes.append(self.add_separator(self.separator, u\"\".join(make_unicode(v) for v in item_list), is_list=is_list))\n\n        result_notes = u\"\".join(notes)\n        if isinstance(self.separator, list):\n            return result_notes\n        else:\n            return result_notes.replace(\n                u\"</div>{0}\".format(self.separator), u\"</div>\").replace(\n                u\"{0}</div>\".format(self.separator), u\"</div>\"\n            )  # tighten up result\n\n    def add_separator(self, separator, items, is_list=False):\n        \"\"\"\n        apply the separator to the data\n        :param separator: None, str or list such as ['<span>', '</span>']\n        :param items: str or list to add separator\n        :return: text with separator applied\n        \"\"\"\n        _items = items\n\n        if not _items:\n            return \"<br>\"\n\n        if not isinstance(_items, list):\n            _items = [_items]\n\n        if isinstance(separator, list):\n            return u\"\".join([u\"{}{}{}\".format(separator[0], item, separator[1]) for item in _items])\n\n        return u\"{}{}\".format(separator.join(_items), separator if not is_list else u\"\")\n\ndef make_unicode(value):\n    if value is None:\n        return 'None'\n\n    return unicode(value)\n\ndef get_results(property_name):\n    if playbook and playbook.functions.results[property_name] is not None:\n        return playbook.functions.results[property_name]\n    elif playbook and playbook.properties[property_name] is not None:\n        return playbook.properties[property_name]\n    elif workflow and workflow.properties[property_name] is not None:\n        return workflow.properties[property_name]\n\n    return None\n\ndef get_properties(property_name):\n    \"\"\"\n    Logic to collect the json and parameters from a workflow property.\n    Args:\n      property_name: workflow property to reference\n    Returns:\n      padding, separator, header, json_omit_list, incident_field, json, sort_keys\n    \"\"\"\n    result_properties = get_results(property_name)\n    if not result_properties:\n        helper.fail(\"Playbook/workflow property not found: {}\".format(property_name))\n\n    padding = int(result_properties.get(\"padding\", 10))\n    separator = result_properties.get(\"separator\", u\"<br />\")\n    if isinstance(separator, list) and len(separator) != 2:\n        helper.fail(\"list of separators should be specified as a pair such as ['<div>', '</div>']: {}\".format(separator))\n\n    header = result_properties.get(\"header\")\n    sort_keys = bool(result_properties.get(\"sort\", False))\n    json_omit_list = result_properties.get(\"json_omit_list\")\n    if not json_omit_list:\n        json_omit_list = []\n    incident_field = result_properties.get(\"incident_field\")\n    \n    # workflow formatted content is 'json'. Standard functions is 'content'\n    json = result_properties.get(\"json\") if result_properties.get(\"json\") else result_properties.get(\"content\")\n    json_err = None\n    # is there an issue we need handle now?\n    if not json and \\\n        result_properties.get(\"success\") == False and result_properties.get(\"reason\"):\n        json_err = result_properties.get(\"reason\")\n    \n    return padding, separator, header, json_omit_list, incident_field, json, json_err, sort_keys\n\n\n## S T A R T\npadding, separator, header, json_omit_list, incident_field, json, json_err, sort_keys = get_properties('convert_json_to_rich_text')\nif json_err:\n    result = \"Result error: {}\".format(json_err)\nelse:\n    if header:\n        if isinstance(separator, list):\n            hdr = u\"{0}{1}{2}\".format(separator[0], header, separator[1])\n        else:\n            hdr = u\"{0}{1}\".format(header, separator)\n    else:\n        hdr = u\"\"\n\n    convert = ConvertJson(omit_keys=json_omit_list, padding=padding, separator=separator, sort_keys=sort_keys)\n    converted_json = convert.convert_json_to_rich_text(json)\n    result = u\"{}{}\".format(hdr, converted_json if converted_json else \"\\nNone\")\n\nrich_text_note = helper.createRichText(result)\nif incident_field:\n    incident[incident_field] = rich_text_note\nelse:\n    incident.addNote(rich_text_note)\n", "tags": [], "uuid": "64d3e6da-8b56-4d19-9ce8-a75586f71dad"}], "server_version": {"build_number": 7899, "major": 45, "minor": 0, "version": "45.0.7899"}, "tags": [], "task_order": [], "timeframes": null, "types": [], "workflows": [], "workspaces": []}