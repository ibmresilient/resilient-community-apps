{"action_order": [], "actions": [], "automatic_tasks": [], "export_date": 1598628324315, "export_format_version": 2, "fields": [{"export_key": "incident/internal_customizations_field", "id": 0, "input_type": "text", "internal": true, "name": "internal_customizations_field", "read_only": true, "text": "Customizations Field (internal)", "type_id": 0, "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa1"}], "functions": [], "geos": null, "groups": null, "id": 57, "inbound_mailboxes": null, "incident_artifact_types": [], "incident_types": [{"update_date": 1598628322946, "create_date": 1598628322946, "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa0", "description": "Customization Packages (internal)", "export_key": "Customization Packages (internal)", "name": "Customization Packages (internal)", "enabled": false, "system": false, "parent_id": null, "hidden": false, "id": 0}], "industries": null, "layouts": [], "locale": null, "message_destinations": [], "notifications": null, "overrides": [], "phases": [], "regulators": null, "roles": [], "scripts": [{"actions": [], "creator_id": "a@example.com", "description": "This script converts a json object into a hierarchical display of rich text and adds the rich text to an incident's rich text (custom) field or an incident note. A workflow property is used to share the json to convert and identify parameters used on how to perform the conversion.\nTypically, a function will create workflow property and this script will run after that function to perform the conversion.\n  Features:\n    * Display the hierarchical nature of json, presenting the json keys (sorted if specified) as bold labels\n    * Provide links to found URLs\n    * Create either an incident note or add results to an incident (custom) rich text field.", "export_key": "Convert json to rich text", "id": 8, "language": "python", "last_modified_by": "a@example.com", "last_modified_time": 1598628286895, "name": "Convert json to rich text", "object_type": "incident", "script_text": "# (c) Copyright IBM Corp. 2010, 2020. All Rights Reserved.\nVERSION = 1.0\n\"\"\"\n  This script converts a json object into a hierarchical display of rich text and adds the rich text to an incident's rich text (custom) field or an incident note.\n  A workflow property is used to share the json to convert and identify parameters used on how to perform the conversion.\n  Typically, a function will create workflow property and this script will run after that function to perform the conversion.\n  Features:\n    * Display the hierarchical nature of json, presenting the json keys as bold labels\n    * Provide links to found URLs\n    * Create either an incident note or add results to an incident (custom) rich text field.\n  \n  In order to use this script, define a workflow property called: convert_json_to_rich_text, to define the json and parameters to use for the conversion.\n  Workflow properties can be added using a command similar to this:\n  workflow.addProperty('convert_json_to_rich_text', { \n    \"version\": 1.0,\n    \"header\": \"Artifact scan results for 12.34.221.1\",\n    \"padding\": 10,\n    \"separator\": u\"<br>\",\n    \"sort\": True,\n    \"json\": { \"some\": \"json\", \"omit\": \"this\", \"list\": [\"a\", \"b\", \"c\"] },\n    \"json_omit_list\": [\"omit\"],\n    \"incident_field\": None\n  })\n  \n  Format of workflow.property.convert_json_to_rich_text:\n  { \n    \"version\": 1.0, [this is for future compatibility]\n    \"header\": str, [header line to add to converted json produced or None. Ex: Results from scanning artifact: xxx. The header may contain rich text tags]\n    \"padding\": 10, [padding for nested json elements, or defaults to 10]\n    \"separator\": u\"<br>\", [html separator between json keys and lists or defaults to html break: '<br>']\n    \"sort\": True|False, [sort the json keys at each level when displayed]\n    \"json\": json, [required json to convert]\n    \"json_omit_list\": [list of json keys to exclude or None]\n    \"incident_field\": \"<incident_field>\" [indicates a builtin rich text incident field, such as 'description' \n                                          or a custom rich text field in the format: 'properties.<field>'. default: create an incident note]\n  }\n\"\"\"\n\nimport re\n\n\nrc = re.compile('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+#]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n\nclass ConvertJson:\n  \"\"\"Class to hold the conversion parameters and perform the conversion\"\"\"\n  \n  def __init__(self, omit_keys=[], padding=10, separator=u\"<br>\", sort_keys=False):\n    self.omit_keys = omit_keys\n    self.padding = padding\n    self.separator = separator\n    self.sort_keys = sort_keys\n\n\n  def format_link(self, item):\n    \"\"\"[summary]\n      Find embedded urls (http(s)) and add html anchor tags to display as links\n      Args:\n          item ([string])\n\n      Returns:\n          [str]: None|original text if no links|text with html links\n    \"\"\"\n    formatted_item = item\n    if item and not isinstance(item, int) and not isinstance(item, bool):\n        list = rc.findall(item)\n        if list:\n            for link in list:\n                formatted_item = formatted_item.replace(link, \"<a target='blank' href='{0}'>{0}</a>\".format(link))\n\n    return formatted_item\n\n  def expand_list(self, list_value, is_list=False):\n    \"\"\"[summary]\n      convert items to html, adding indents to nested dictionaries.\n      Args:\n          list_value ([dict|list]): json element\n\n      Returns:\n          [str]: html converted code\n    \"\"\"\n    if not isinstance(list_value, list):\n      return self.format_link(list_value)\n    elif list_value:\n      try:\n        items = []  # this will ensure list starts on second line of key label\n        for item in list_value:\n          if isinstance(item, dict):\n            result = self.convert_json_to_rich_text(item)\n            if is_list:\n              items.append(\"<div style='padding:{}px'>{}</div>\".format(self.padding, result))\n            else:\n              items.append(result)\n          elif isinstance(item, list):\n            items.append(\"<div style='padding:5px'>{}</div>\".format(self.expand_list(item, is_list=True)))\n          else:\n            items.append(self.format_link(str(item)))\n        return \"<div style='padding:5px'>{}</div>\".format(self.separator.join(items))\n      except Exception as err:\n          return str(err)\n\n  def convert_json_to_rich_text(self, sub_dict):\n    \"\"\"[summary]\n      Walk dictionary tree and convert to html for better display\n      Args:\n          sub_dict ([type]): [description]\n\n      Returns:\n          [type]: [description]\n    \"\"\"\n    notes = []\n    loop_separator = \"\"  # first time through no separator\n    keys = sorted (sub_dict.keys()) if self.sort_keys else sub_dict.keys()\n\n    for key in keys:\n      value = sub_dict[key]\n\n      if key not in self.omit_keys:\n        if isinstance(value, dict):\n          result = self.convert_json_to_rich_text(value)\n          notes.append(u\"{}<b>{}</b>: <div style='padding:{}px'>{}</div>\".format(loop_separator, key, self.padding, result))\n        else:\n          notes.append(u\"{}<b>{}</b>: {}\".format(loop_separator, key, self.expand_list(value, is_list=isinstance(value, list))))\n          \n      loop_separator = self.separator # subsequent times, add in separator\n\n    result = u\"\".join(notes)\n    return result.replace(u\"</div>{0}\".format(separator), \"</div>\")  # tighten up result\n\ndef get_properties(property_name):\n  \"\"\"\n  Logic to collect the json and parameters from a workflow property.\n  Args:\n    property_name: workflow property to reference\n  Returns:\n    padding, separator, header, json_omit_list, incident_field, json, sort_keys\n  \"\"\"\n  if not workflow.properties.get(property_name):\n    helper.fail(\"workflow.properties.{} undefined\".format(property_name))\n  if not workflow.properties[property_name].get('json'):\n    helper.fail(\"workflow.properties.{}.json undefined\".format(property_name))\n\n  padding = workflow.properties[property_name].get(\"padding\", 10)\n  separator = workflow.properties[property_name].get(\"separator\", u\"<br>\")\n  header = workflow.properties[property_name].get(\"header\")\n  json_omit_list = workflow.properties[property_name].get(\"json_omit_list\")\n  if not json_omit_list:\n    json_omit_list = []\n  incident_field = workflow.properties[property_name].get(\"incident_field\")\n  json = workflow.properties[property_name].get(\"json\")\n  if not isinstance(json, dict):\n    helper.fail(\"json element is not formatted correctly: {}\".format(json))\n  sort_keys = workflow.properties[property_name].get(\"sort\", False)\n\n  return padding, separator, header, json_omit_list, incident_field, json, sort_keys\n\n\n## S T A R T\npadding, separator, header, json_omit_list, incident_field, json, sort_keys = get_properties('convert_json_to_rich_text')\n\nif header:\n  hdr = u\"{0}{1}\".format(header, separator)\nelse:\n  hdr = u\"\"\n\nconvert = ConvertJson(omit_keys=json_omit_list, padding=padding, separator=separator, sort_keys=sort_keys)\nconverted_json = convert.convert_json_to_rich_text(json)\nresult = u\"{}{}\".format(hdr, converted_json)\n\nrich_text_note = helper.createRichText(result)\nif incident_field:\n  incident[incident_field] = rich_text_note\nelse:\n  incident.addNote(rich_text_note)\n", "tags": [], "uuid": "f7276ff0-1770-4058-9e89-40ee79c6e41b"}], "server_version": {"build_number": 32, "major": 35, "minor": 2, "version": "35.2.32"}, "tags": [], "task_order": [], "timeframes": null, "types": [], "workflows": [], "workspaces": []}