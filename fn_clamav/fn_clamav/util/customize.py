# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_clamav"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_clamav package"""
    reload_params = {"package": u"fn_clamav",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"base64content", u"file_name"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_clamav"], 
                    "functions": [u"clamav_scan_stream"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_clamav_scan_attachment"], 
                    "actions": [u"Example: ClamAV scan attachment"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     base64content
    #     file_name
    #   Message Destinations:
    #     fn_clamav
    #   Functions:
    #     clamav_scan_stream
    #   Workflows:
    #     example_clamav_scan_attachment
    #   Rules:
    #     Example: ClamAV scan attachment


    yield ImportDefinition(u"""
eyJsb2NhbGUiOiBudWxsLCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiAiQW4gZXhhbXBs
ZSB3b3JrZmxvdyB0byBzdHJlYW0gY29udGVudHMgb2YgYW4gYXR0YWNobWVudCB0byBDbGFtQVYg
dG8gc2NhbiBmb3IgdmlydXNlcy4iLCAid29ya2Zsb3dfaWQiOiAyNiwgIm9iamVjdF90eXBlIjog
ImF0dGFjaG1lbnQiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX2NsYW1hdl9zY2FuX2F0dGFjaG1l
bnQiLCAidXVpZCI6ICI5ZTE3M2UxMC1hZWViLTRlYjctOGVmOS0wNDVmYTM5ZjkzMmMiLCAibGFz
dF9tb2RpZmllZF9ieSI6ICJhQGEuY29tIiwgImNvbnRlbnQiOiB7InhtbCI6ICI8P3htbCB2ZXJz
aW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwi
aHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwi
aHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0
dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwi
aHR0cDovL3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEv
WE1MU2NoZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRh
Lm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9XCJleGFtcGxlX2NsYW1hdl9zY2FuX2F0dGFjaG1lbnRc
IiBpc0V4ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IENsYW1BViBzY2FuIGF0dGFj
aG1lbnRcIj48ZG9jdW1lbnRhdGlvbj5BbiBleGFtcGxlIHdvcmtmbG93IHRvIHN0cmVhbSBjb250
ZW50cyBvZiBhbiBhdHRhY2htZW50IHRvIENsYW1BViB0byBzY2FuIGZvciB2aXJ1c2VzLjwvZG9j
dW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2lu
Zz5TZXF1ZW5jZUZsb3dfMWw1eWY0Yzwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFz
ayBpZD1cIlNlcnZpY2VUYXNrXzE0dHRzcWVcIiBuYW1lPVwiVXRpbGl0aWVzOiBBdHRhY2htZW50
IHRvIEJhc2U2NFwiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVu
dHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiM2E0YjY2YzQtMDQ2NS00OTYwLThiYmYtZmEz
ZWJkYzU4YzVhXCI+e1wiaW5wdXRzXCI6e30sXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMg
UmVxdWlyZWQgaW5wdXRzIGFyZTogdGhlIGluY2lkZW50IGlkIGFuZCBhdHRhY2htZW50IGlkXFxu
aW5wdXRzLmluY2lkZW50X2lkID0gaW5jaWRlbnQuaWRcXG5pbnB1dHMuYXR0YWNobWVudF9pZCA9
IGF0dGFjaG1lbnQuaWRcXG5cXG4jIElmIHRoaXMgaXMgYSBcXFwidGFzayBhdHRhY2htZW50XFxc
IiB0aGVuIHdlIHdpbGwgYWRkaXRpb25hbGx5IGhhdmUgYSB0YXNrLWlkXFxuaWYgdGFzayBpcyBu
b3QgTm9uZTpcXG4gIGlucHV0cy50YXNrX2lkID0gdGFzay5pZFwiLFwicmVzdWx0X25hbWVcIjpc
ImF0dGFjaG1lbnRfY29udGVudFwifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxl
bWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xbDV5ZjRjPC9pbmNvbWluZz48b3V0Z29pbmc+
U2VxdWVuY2VGbG93XzB6eDIzMnM8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxv
dyBpZD1cIlNlcXVlbmNlRmxvd18xbDV5ZjRjXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVh
c3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMTR0dHNxZVwiLz48c2VydmljZVRhc2sgaWQ9
XCJTZXJ2aWNlVGFza18xa3FrYnAzXCIgbmFtZT1cIkNsYW1BViBzY2FuIHN0cmVhbVwiIHJlc2ls
aWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5j
dGlvbiB1dWlkPVwiZTliNjhmMWMtYjQ4Zi00MWMyLTg0ZjEtNjgwMTQyYTBkOGQ1XCI+e1wiaW5w
dXRzXCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCIjIyAgQ0xBTUFWIC0gY2xhbWF2
X3NjYW5fc3RyZWFtIHNjcmlwdCAjI1xcbiMgRXhhbXBsZSByZXN1bHRzOlxcblxcXCJcXFwiXFxc
IlxcbiMgVmlydXMgZm91bmRcXG5SZXN1bHQ6ICAgIHtcXG4gICAgICAgICAgICBcXFwiZmlsZV9u
YW1lXFxcIjogXFxcImVpY2FyLnR4dFxcXCIsXFxuICAgICAgICAgICAgXFxcInJlc3BvbnNlXFxc
Ijoge1xcXCJzdHJlYW1cXFwiOiBbXFxcIkZPVU5EXFxcIiwgXFxcIkVpY2FyLVRlc3QtU2lnbmF0
dXJlXFxcIl19LFxcbiAgICAgICAgICAgfVxcbiMgTm8gdmlydXMgZGV0ZWN0ZWRcXG5SZXN1bHQ6
ICAgIHtcXG4gICAgICAgICAgICBcXFwiZmlsZV9uYW1lXFxcIjogXFxcInRlc3QudHh0XFxcIixc
XG4gICAgICAgICAgICBcXFwicmVzcG9uc2VcXFwiOiB7XFxcInN0cmVhbVxcXCI6IFtcXFwiT0tc
XFwiLCAnJ119LFxcbiAgICAgICAgICAgfVxcbiMgR290IGFuIGVycm9yXFxuUmVzdWx0OiAgICB7
XFxuICAgICAgICAgICAgXFxcImZpbGVfbmFtZVxcXCI6IFxcXCJ0ZXN0LnR4dFxcXCIsXFxuICAg
ICAgICAgICAgXFxcInJlc3BvbnNlXFxcIjoge1xcXCJzdHJlYW1cXFwiOiBbXFxcIkVSUk9SXFxc
IiwgJyZsdDtyZWFzb24mZ3Q7J119LFxcbiAgICAgICAgICAgfVxcblxcXCJcXFwiXFxcIlxcbiMg
UHJvY2Vzc2luZ1xcbnJlc3BvbnNlID0gcmVzdWx0cy5yZXNwb25zZVxcbmZpbGVfbmFtZSA9IHJl
c3VsdHMuZmlsZV9uYW1lXFxucXVlcnlfZXhlY3V0aW9uX3RpbWUgPSByZXN1bHRzLnF1ZXJ5X2V4
ZWN1dGlvbl90aW1lXFxuXFxuaWYgcmVzcG9uc2UgaXMgbm90IE5vbmU6XFxuICAgIGlmIHJlc3Bv
bnNlLnN0cmVhbVswXSA9PSBcXFwiRk9VTkRcXFwiOlxcbiAgICAgICAgbm90ZVRleHQgPSBcXFwi
Q2xhbUFWIGludGVncmF0aW9uOiBBIHNjYW4gZm9yIGF0dGFjaG1lbnQgJmx0O2ImZ3Q7ezB9Jmx0
Oy9iJmd0OyBkZXRlY3RlZCBhIHZpcnVzIHdpdGggc2lnbmF0dXJlICZsdDtiJmd0O3sxfSZsdDsv
YiZndDsuXFxcIiBcXFxcXFxuICAgICAgICAgICAgICAgICAgIFxcXCJcXFwiLmZvcm1hdChmaWxl
X25hbWUsIHJlc3BvbnNlLnN0cmVhbVsxXSlcXG4gICAgZWxpZiByZXNwb25zZS5zdHJlYW1bMF0g
PT0gXFxcIk9LXFxcIjpcXG4gICAgICAgIG5vdGVUZXh0ID0gXFxcIkNsYW1BViBpbnRlZ3JhdGlv
bjogQSBzY2FuIGZvciBhdHRhY2htZW50ICZsdDtiJmd0O3swfSZsdDsvYiZndDsgZGlkIG5vdCBk
ZXRlY3QgYW55IHZpcnVzLlxcXCIuZm9ybWF0KGZpbGVfbmFtZSlcXG4gICAgZWxpZiByZXNwb25z
ZS5zdHJlYW1bMF0gPT0gXFxcIkVSUk9SXFxcIjpcXG4gICAgICAgIG5vdGVUZXh0ID0gXFxcIkNs
YW1BViBpbnRlZ3JhdGlvbjogQSBzY2FuIGZvciBhdHRhY2htZW50ICZsdDtiJmd0O3swfSZsdDsv
YiZndDsgdGhyZXcgYW4gZXJyb3JcXFwiLmZvcm1hdChmaWxlX25hbWUpXFxuaW5jaWRlbnQuYWRk
Tm90ZShoZWxwZXIuY3JlYXRlUmljaFRleHQobm90ZVRleHQpKVwiLFwicHJlX3Byb2Nlc3Npbmdf
c2NyaXB0XCI6XCIjIFRoZSBpbnB1dCBpcyB0aGUgYmFzZTY0LWVuY29kZWQgY29udGVudCB0aGF0
IHdhcyByZWFkIGluIGEgcHJldmlvdXMgY29tcG9uZW50XFxuIyBUaGF0IG9iamVjdCBoYXMgcHJv
cGVydGllczpcXG4jICAtIGZpbGVuYW1lXFxuIyAgLSBjb250ZW50X3R5cGVcXG4jICAtIHNpemVc
XG4jICAtIGNyZWF0ZWRcXG4jICAtIGNvbnRlbnQgKHRoZSBiYXNlNjQtZW5jb2RlZCBkYXRhKVxc
biMgT25seSBuZWVkIHRvIHVzZSB0aGUgY29udGVudCBhbmQgZmlsZW5tYW1lIHByb3BlcnRpZXMg
aGVyZS5cXG5pbnB1dHMuYmFzZTY0Y29udGVudCA9IHdvcmtmbG93LnByb3BlcnRpZXMuYXR0YWNo
bWVudF9jb250ZW50LmNvbnRlbnRcXG5pbnB1dHMuZmlsZV9uYW1lID0gd29ya2Zsb3cucHJvcGVy
dGllcy5hdHRhY2htZW50X2NvbnRlbnQuZmlsZW5hbWVcIn08L3Jlc2lsaWVudDpmdW5jdGlvbj48
L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHp4MjMyczwvaW5jb21p
bmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzB6eDIzMnNc
IiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xNHR0c3FlXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRh
c2tfMWtxa2JwM1wiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0
XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+
PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PHRl
eHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWo0cmw1ZlwiPjx0ZXh0PklucHV0IHRv
IHRoZSBDbGFtQVYgc2NhbiBzdHJlYW0gZnVuY3Rpb24gaXMgYmFzZTY0LWVuY29kZWQgY29udGVu
dC5cdTAwYTAgVGhpcyBpcyByZWFkIGZyb20gYW4gYXR0YWNobWVudC48L3RleHQ+PC90ZXh0QW5u
b3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8wczN0cmpzXCIgc291cmNlUmVm
PVwiU2VydmljZVRhc2tfMTR0dHNxZVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFqNHJs
NWZcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMHYwdHMwM1wiPjx0ZXh0
PlN0cmVhbSB0aGUgZmlsZSBjb250ZW50IHRvIFNjYW5BViB0byBzY2FuIGZvciB2aXJ1c2VzLjwv
dGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzEyeWs4
ZWtcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xa3FrYnAzXCIgdGFyZ2V0UmVmPVwiVGV4dEFu
bm90YXRpb25fMHYwdHMwM1wiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQ
TU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwi
IGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5k
cyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBtbmRp
OkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE1
N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBt
bmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1c
IlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIg
d2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBt
bmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNz
b2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5cGU9
XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6
dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRp
OkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzE0dHRzcWVcIiBpZD1cIlNlcnZp
Y2VUYXNrXzE0dHRzcWVfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIx
MDBcIiB4PVwiMjY2XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1O
RWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xbDV5ZjRjXCIgaWQ9XCJTZXF1ZW5jZUZs
b3dfMWw1eWY0Y19kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyNjZcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjIzMlwiIHk9XCIxODRcIi8+PC9icG1uZGk6
QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50
PVwiU2VydmljZVRhc2tfMWtxa2JwM1wiIGlkPVwiU2VydmljZVRhc2tfMWtxa2JwM19kaVwiPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCI0NjBcIiB5PVwiMTY2
XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2Vx
dWVuY2VGbG93XzB6eDIzMnNcIiBpZD1cIlNlcXVlbmNlRmxvd18wengyMzJzX2RpXCI+PG9tZ2Rp
OndheXBvaW50IHg9XCIzNjZcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48
b21nZGk6d2F5cG9pbnQgeD1cIjQ2MFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2
XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1c
IjBcIiB4PVwiNDEzXCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBN
TkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xajRy
bDVmXCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xajRybDVmX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWln
aHQ9XCI4MFwiIHdpZHRoPVwiMTYxXCIgeD1cIjE4NFwiIHk9XCIyN1wiLz48L2JwbW5kaTpCUE1O
U2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzBzM3RyanNc
IiBpZD1cIkFzc29jaWF0aW9uXzBzM3RyanNfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjMwMVwi
IHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTY2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwi
MjgwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxMDdcIi8+PC9icG1uZGk6QlBNTkVk
Z2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8wdjB0czAz
XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8wdjB0czAzX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCI0N1wiIHdpZHRoPVwiMTgwXCIgeD1cIjUwMVwiIHk9XCIzMlwiLz48L2JwbW5kaTpCUE1OU2hh
cGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzEyeWs4ZWtcIiBp
ZD1cIkFzc29jaWF0aW9uXzEyeWs4ZWtfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjUzMlwiIHhz
aTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTY2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNTc5
XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCI3OVwiLz48L2JwbW5kaTpCUE1ORWRnZT48
L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAi
d29ya2Zsb3dfaWQiOiAiZXhhbXBsZV9jbGFtYXZfc2Nhbl9hdHRhY2htZW50IiwgInZlcnNpb24i
OiAxMH0sICJjcmVhdG9yX2lkIjogImFAYS5jb20iLCAiYWN0aW9ucyI6IFtdLCAibGFzdF9tb2Rp
ZmllZF90aW1lIjogMTU0NDU0OTMxMDg4MiwgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVf
Y2xhbWF2X3NjYW5fYXR0YWNobWVudCIsICJuYW1lIjogIkV4YW1wbGU6IENsYW1BViBzY2FuIGF0
dGFjaG1lbnQifV0sICJhY3Rpb25zIjogW3sib2JqZWN0X3R5cGUiOiAiYXR0YWNobWVudCIsICJ0
eXBlIjogMSwgIm5hbWUiOiAiRXhhbXBsZTogQ2xhbUFWIHNjYW4gYXR0YWNobWVudCIsICJ2aWV3
X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgIndvcmtmbG93cyI6IFsiZXhh
bXBsZV9jbGFtYXZfc2Nhbl9hdHRhY2htZW50Il0sICJsb2dpY190eXBlIjogImFsbCIsICJleHBv
cnRfa2V5IjogIkV4YW1wbGU6IENsYW1BViBzY2FuIGF0dGFjaG1lbnQiLCAidXVpZCI6ICI5YWVh
M2QxMy1jMzM1LTQ4NTMtOWNiOS01ZTEwYTY1NjE4MDgiLCAiYXV0b21hdGlvbnMiOiBbXSwgImNv
bmRpdGlvbnMiOiBbXSwgImlkIjogMjksICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdfV0sICJs
YXlvdXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiA1LCAiaW5kdXN0
cmllcyI6IG51bGwsICJmdW5jdGlvbnMiOiBbeyJkaXNwbGF5X25hbWUiOiAiQ2xhbUFWIHNjYW4g
c3RyZWFtIiwgImRlc2NyaXB0aW9uIjogeyJjb250ZW50IjogIkZ1bmN0aW9uIHRvIHNlbmQgYSBj
b250ZW50cyBvZiBhIGZpbGUgYXMgYSBkYXRhLXN0cmVhbSB0byBDbGFtQVYgdG8gc2NhbiBmb3Ig
dmlydXNlcy4iLCAiZm9ybWF0IjogInRleHQifSwgImNyZWF0b3IiOiB7InR5cGUiOiAidXNlciIs
ICJkaXNwbGF5X25hbWUiOiAiUmVzaWxpZW50IFN5c2FkbWluIiwgImlkIjogNCwgIm5hbWUiOiAi
YUBhLmNvbSJ9LCAidmlld19pdGVtcyI6IFt7InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6
ICJfX2Z1bmN0aW9uIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmll
bGRfdXVpZCIsICJjb250ZW50IjogImVhYmJiNzFlLTMzNGItNDc2NS1iMTQzLTNkYzM0MjdiYTI3
MyIsICJzdGVwX2xhYmVsIjogbnVsbH0sIHsic2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjog
Il9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVs
ZF91dWlkIiwgImNvbnRlbnQiOiAiMGM0OTNlOTktMTEzNS00YmVhLTk3MDktM2FhZmJjNDkyMzk5
IiwgInN0ZXBfbGFiZWwiOiBudWxsfV0sICJleHBvcnRfa2V5IjogImNsYW1hdl9zY2FuX3N0cmVh
bSIsICJ1dWlkIjogImU5YjY4ZjFjLWI0OGYtNDFjMi04NGYxLTY4MDE0MmEwZDhkNSIsICJsYXN0
X21vZGlmaWVkX2J5IjogeyJ0eXBlIjogInVzZXIiLCAiZGlzcGxheV9uYW1lIjogIlJlc2lsaWVu
dCBTeXNhZG1pbiIsICJpZCI6IDQsICJuYW1lIjogImFAYS5jb20ifSwgInZlcnNpb24iOiAxOCwg
IndvcmtmbG93cyI6IFt7InByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfY2xhbWF2X3NjYW5f
YXR0YWNobWVudCIsICJkZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlwZSI6ICJhdHRhY2ht
ZW50IiwgImFjdGlvbnMiOiBbXSwgIm5hbWUiOiAiRXhhbXBsZTogQ2xhbUFWIHNjYW4gYXR0YWNo
bWVudCIsICJ3b3JrZmxvd19pZCI6IDI2LCAidXVpZCI6IG51bGx9XSwgImxhc3RfbW9kaWZpZWRf
dGltZSI6IDE1NDQ0NzE3NTAwNDIsICJkZXN0aW5hdGlvbl9oYW5kbGUiOiAiZm5fY2xhbWF2Iiwg
ImlkIjogMSwgIm5hbWUiOiAiY2xhbWF2X3NjYW5fc3RyZWFtIn1dLCAiYWN0aW9uX29yZGVyIjog
W10sICJnZW9zIjogbnVsbCwgInRhc2tfb3JkZXIiOiBbXSwgInR5cGVzIjogW10sICJ0aW1lZnJh
bWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAicGhh
c2VzIjogW10sICJub3RpZmljYXRpb25zIjogbnVsbCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiaW5j
aWRlbnRfdHlwZXMiOiBbeyJjcmVhdGVfZGF0ZSI6IDE1NDQ1NTA1NzcwMzAsICJkZXNjcmlwdGlv
biI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJD
dXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiaWQiOiAwLCAibmFtZSI6ICJDdXN0
b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAidXBkYXRlX2RhdGUiOiAxNTQ0NTUwNTc3
MDMwLCAidXVpZCI6ICJiZmVlYzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZW5h
YmxlZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVu
IjogZmFsc2V9XSwgInNjcmlwdHMiOiBbXSwgInNlcnZlcl92ZXJzaW9uIjogeyJtYWpvciI6IDMx
LCAidmVyc2lvbiI6ICIzMS4wLjAiLCAiYnVpbGRfbnVtYmVyIjogMCwgIm1pbm9yIjogMH0sICJt
ZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7InByb2dyYW1tYXRpY19uYW1lIjogImZuX2NsYW1hdiIs
ICJuYW1lIjogImZuX2NsYW1hdiIsICJleHBvcnRfa2V5IjogImZuX2NsYW1hdiIsICJ1dWlkIjog
IjJmNTM3ODY1LWMwNjEtNGE3MS1hMjI2LTU5MjdjMjc2YTFjZSIsICJleHBlY3RfYWNrIjogdHJ1
ZSwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAidXNlcnMiOiBbImFAYS5jb20iXX1dLCAiaW5jaWRl
bnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgInJvbGVzIjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRp
b25zIjogW10sICJ0eXBlX2lkIjogMCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJT
aW11bGF0aW9uIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5n
ZWFibGUiOiB0cnVlLCAiaWQiOiAxMTEsICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2Yw
ZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1
dF90eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBh
IHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9u
bHkuIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6
IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmlj
YXRpb24iOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgImRlcHJlY2F0ZWQiOiBmYWxz
ZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9w
ZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4
dCI6ICJiYXNlNjRjb250ZW50IiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVs
bCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAyOTcsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1
aWQiOiAiZWFiYmI3MWUtMzM0Yi00NzY1LWIxNDMtM2RjMzQyN2JhMjczIiwgImNob3NlbiI6IGZh
bHNlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInRvb2x0aXAiOiAiIiwgImludGVybmFsIjogZmFs
c2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJf
X2Z1bmN0aW9uL2Jhc2U2NGNvbnRlbnQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBs
YWNlaG9sZGVyIjogIiIsICJuYW1lIjogImJhc2U2NGNvbnRlbnQiLCAiZGVwcmVjYXRlZCI6IGZh
bHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsi
b3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDExLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0
ZXh0IjogImZpbGVfbmFtZSIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGws
ICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjg2LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlk
IjogIjBjNDkzZTk5LTExMzUtNGJlYS05NzA5LTNhYWZiYzQ5MjM5OSIsICJjaG9zZW4iOiBmYWxz
ZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjogIiIsICJpbnRlcm5hbCI6IGZhbHNl
LCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19m
dW5jdGlvbi9maWxlX25hbWUiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9s
ZGVyIjogIiIsICJuYW1lIjogImZpbGVfbmFtZSIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZh
dWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMi
OiBbXSwgImV4cG9ydF9kYXRlIjogMTU0NDU1MDAxMDk2M30=
"""
    )