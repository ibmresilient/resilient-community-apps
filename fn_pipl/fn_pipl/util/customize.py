# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_pipl"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_pipl package"""
    reload_params = {"package": u"fn_pipl",
                    "incident_fields": [], 
                    "action_fields": [u"pipl_artifact_type"], 
                    "function_params": [u"pipl_artifact_type", u"pipl_artifact_value"], 
                    "datatables": [u"pipl_person_data"], 
                    "message_destinations": [u"fn_pipl"], 
                    "functions": [u"pipl_search_function"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [u"Create Artifact from Pipl Data"], 
                    "workflows": [u"example_pipl_search_function"], 
                    "actions": [u"Example: Create an Artifact from Pipl data", u"Example: Pipl search function"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     pipl_artifact_type
    #   Function inputs:
    #     pipl_artifact_type
    #     pipl_artifact_value
    #   DataTables:
    #     pipl_person_data
    #   Message Destinations:
    #     fn_pipl
    #   Functions:
    #     pipl_search_function
    #   Scripts:
    #     Create Artifact from Pipl Data
    #   Workflows:
    #     example_pipl_search_function
    #   Rules:
    #     Example: Create an Artifact from Pipl data
    #     Example: Pipl search function


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjA2MzY0NDk2LWZmMjgt
NGU0OS1iOTc1LTgyNTYyMzc4ZjRjNSIsICJkZXNjcmlwdGlvbiI6ICJFbnJpY2hlcyB5b3VyIGxl
YWRzIChuYW1lLCBlbWFpbCBhZGRyZXNzLCBwaG9uZSBudW1iZXIsIG9yIHNvY2lhbCBtZWRpYSB1
c2VybmFtZSkgd2l0aCBQaXBsIGFuZCBnZXRzIHRoZWlyIHBlcnNvbmFsLCBwcm9mZXNzaW9uYWws
IGRlbW9ncmFwaGljLCBhbmQgY29udGFjdCBpbmZvcm1hdGlvbi4iLCAib2JqZWN0X3R5cGUiOiAi
YXJ0aWZhY3QiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3BpcGxfc2VhcmNoX2Z1bmN0aW9uIiwg
IndvcmtmbG93X2lkIjogNDIsICJsYXN0X21vZGlmaWVkX2J5IjogImFAYS5jb20iLCAiY29udGVu
dCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/Pjxk
ZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQv
TU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAw
NTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUy
NC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQv
RElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHht
bG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwi
aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3Bh
Y2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVf
cGlwbF9zZWFyY2hfZnVuY3Rpb25cIiBpc0V4ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1w
bGU6IFBpcGwgc2VhcmNoXCI+PGRvY3VtZW50YXRpb24+RW5yaWNoZXMgeW91ciBsZWFkcyAobmFt
ZSwgZW1haWwgYWRkcmVzcywgcGhvbmUgbnVtYmVyLCBvciBzb2NpYWwgbWVkaWEgdXNlcm5hbWUp
IHdpdGggUGlwbCBhbmQgZ2V0cyB0aGVpciBwZXJzb25hbCwgcHJvZmVzc2lvbmFsLCBkZW1vZ3Jh
cGhpYywgYW5kIGNvbnRhY3QgaW5mb3JtYXRpb24uPC9kb2N1bWVudGF0aW9uPjxzdGFydEV2ZW50
IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18xZzV2NXRn
PC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwiU2VydmljZVRhc2tfMHBq
ZWc5aFwiIG5hbWU9XCJQaXBsIHNlYXJjaCBmdW5jdGlvblwiIHJlc2lsaWVudDp0eXBlPVwiZnVu
Y3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiODAz
ZGY0NzQtMmRmMC00Y2YyLTg4ODItY2YyYzUxOWNjYTc2XCI+e1wiaW5wdXRzXCI6e30sXCJwb3N0
X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJmcm9tIGphdmEudXRpbCBpbXBvcnQgRGF0ZVxcblxcbmRl
ZiBhZGRfcm93X3RvX3BpcGxfZGF0YXRhYmxlKGRiX3RpbWVzdGFtcCwgZGJfYXJ0aWZhY3RfdmFs
dWUsIGRiX21hdGNoX25vLCBkYl9wcm9wZXJ0eSwgZGJfdmFsdWUsIGRiX21hdGNoLCBkYl9pbmZl
cnJlZCk6XFxuICBwaXBsX3BlcnNvbl9kYXRhID0gaW5jaWRlbnQuYWRkUm93KFxcXCJwaXBsX3Bl
cnNvbl9kYXRhXFxcIilcXG4gIHBpcGxfcGVyc29uX2RhdGEucGlwbF90aW1lc3RhbXAgPSBkYl90
aW1lc3RhbXBcXG4gIHBpcGxfcGVyc29uX2RhdGEucGlwbF9hcnRpZmFjdF92YWx1ZSA9IGRiX2Fy
dGlmYWN0X3ZhbHVlXFxuICBwaXBsX3BlcnNvbl9kYXRhLnBpcGxfcG9zc2libGVfbWF0Y2hfbm8g
PSBkYl9tYXRjaF9ub1xcbiAgcGlwbF9wZXJzb25fZGF0YS5waXBsX3Byb3BlcnR5ID0gZGJfcHJv
cGVydHlcXG4gIHBpcGxfcGVyc29uX2RhdGEucGlwbF92YWx1ZSA9IGRiX3ZhbHVlXFxuICBwaXBs
X3BlcnNvbl9kYXRhLnBpcGxfbWF0Y2ggPSBkYl9tYXRjaFxcbiAgcGlwbF9wZXJzb25fZGF0YS5w
aXBsX2luZmVycmVkID0gZGJfaW5mZXJyZWRcXG5cXG5pZiByZXN1bHRzLnN1Y2Nlc3M6XFxuICAj
IFNhdmUgdGhlIGpzb24gcmVzdWx0IGFzIGFuIE5vdGVcXG4gIG5vdGVUZXh0ID0gXFxcIlxcXCJc
XFwiUGlwbCBEYXRhIEFQSSByZXNwb25zZSBmb3IgYXJ0aWZhY3RfdmFsdWUge30gcmV0dXJuZWQg
e306ICZsdDticiZndDsmbHQ7YnImZ3Q7e31cXFwiXFxcIlxcXCIuZm9ybWF0KGFydGlmYWN0LnZh
bHVlLCByZXN1bHRzLnBpcGxfcmVzcG9uc2UsIHJlc3VsdHMucmF3X2RhdGEpXFxuICBpbmNpZGVu
dC5hZGROb3RlKGhlbHBlci5jcmVhdGVSaWNoVGV4dChub3RlVGV4dCkpXFxuICBcXG4gICMgQ3Jl
YXRlIGEgZGF0YXRhYmxlIGZyb20gcGlwbCByZXNwb25zZVxcbiAgcG9zc2libGVfcGVyc29uX2Nv
dW50ZXIgPSAwXFxuICBmb3IgcGVyc29uIGluIHJlc3VsdHMucGVyc29uX2xpc3Q6XFxuICAgIFxc
biAgICAjIGdlbmVyYXRlIHJlc3VsdF9pZCBhbmQgdGltZXN0YW1wXFxuICAgIHBvc3NpYmxlX3Bl
cnNvbl9jb3VudGVyICs9IDFcXG4gICAgbm93ID0gRGF0ZSgpXFxuICAgIFxcbiAgICAjIDAtMS4g
VGhlIGxldmVsIG9mIGNvbmZpZGVuY2Ugd2UgaGF2ZSB0aGF0IHRoaXMgaXMgdGhlIHBlcnNvbiB5
b3VcdTIwMTlyZSBsb29raW5nIGZvci5cXG4gICAgbWF0Y2ggPSBzdHIocGVyc29uLmdldChcXFwi
QG1hdGNoXFxcIiwgXFxcIlxcXCIpKVxcbiAgICBcXG4gICAgIyBXaGV0aGVyIHRoaXMgcGVyc29u
IGlzIG1hZGUgdXAgc29sZWx5IGZyb20gZGF0YSBpbmZlcnJlZCBieSBzdGF0aXN0aWNhbCBhbmFs
eXNpcyBmcm9tIHlvdXIgc2VhcmNoIHF1ZXJ5LiBcXG4gICAgIyBZb3UgY2FuIGNvbnRyb2wgaW5m
ZXJlbmNlIHVzaW5nIHRoZSBtaW5pbXVtX3Byb2JhYmlsaXR5IHBhcmFtZXRlciwgYW5kIGluZmVy
ZW5jZSBvZiBwZXJzb25zIHVzaW5nIHRoZSBpbmZlcl9wZXJzb25zIHBhcmFtZXRlci5cXG4gICAg
aW5mZXJyZWQgPSBzdHIocGVyc29uLmdldChcXFwiQGluZmVycmVkXFxcIiwgXFxcIlxcXCIpKVxc
biAgICBcXG4gICAgIyBQZXJzb24gZGF0YVxcbiAgICBuYW1lcyA9IHBlcnNvbi5nZXQoXFxcIm5h
bWVzXFxcIiwgW10pXFxuICAgIGZvciBuYW1lIGluIG5hbWVzOlxcbiAgICAgIGFkZF9yb3dfdG9f
cGlwbF9kYXRhdGFibGUobm93LCBhcnRpZmFjdC52YWx1ZSwgcG9zc2libGVfcGVyc29uX2NvdW50
ZXIsIFxcXCJuYW1lXFxcIiwgbmFtZS5nZXQoXFxcImRpc3BsYXlcXFwiLCBcXFwiXFxcIiksIG1h
dGNoLCBpbmZlcnJlZClcXG4gICAgXFxuICAgIGVtYWlscyA9IHBlcnNvbi5nZXQoXFxcImVtYWls
c1xcXCIsIFtdKVxcbiAgICBmb3IgZW1haWwgaW4gZW1haWxzOlxcbiAgICAgIGFkZF9yb3dfdG9f
cGlwbF9kYXRhdGFibGUobm93LCBhcnRpZmFjdC52YWx1ZSwgcG9zc2libGVfcGVyc29uX2NvdW50
ZXIsIFxcXCJlbWFpbCBhZGRyZXNzXFxcIiwgZW1haWwuZ2V0KFxcXCJhZGRyZXNzXFxcIiwgXFxc
IlxcXCIpLCBtYXRjaCwgaW5mZXJyZWQpXFxuICAgICAgYWRkX3Jvd190b19waXBsX2RhdGF0YWJs
ZShub3csIGFydGlmYWN0LnZhbHVlLCBwb3NzaWJsZV9wZXJzb25fY291bnRlciwgXFxcImFkZHJl
c3NfbWQ1XFxcIiwgZW1haWwuZ2V0KFxcXCJhZGRyZXNzX21kNVxcXCIsIFxcXCJcXFwiKSwgbWF0
Y2gsIGluZmVycmVkKVxcbiAgICBcXG4gICAgdXNlcm5hbWVzID0gcGVyc29uLmdldChcXFwidXNl
cm5hbWVzXFxcIiwgW10pXFxuICAgIGZvciB1c3JuYW1lIGluIHVzZXJuYW1lczpcXG4gICAgICBh
ZGRfcm93X3RvX3BpcGxfZGF0YXRhYmxlKG5vdywgYXJ0aWZhY3QudmFsdWUsIHBvc3NpYmxlX3Bl
cnNvbl9jb3VudGVyLCBcXFwidXNlcm5hbWVcXFwiLCB1c3JuYW1lLmdldChcXFwiY29udGVudFxc
XCIsIFxcXCJcXFwiKSwgbWF0Y2gsIGluZmVycmVkKVxcbiAgICAgIFxcbiAgICBwaG9uZXMgPSBw
ZXJzb24uZ2V0KFxcXCJwaG9uZXNcXFwiLCBbXSlcXG4gICAgZm9yIHBob25lIGluIHBob25lczpc
XG4gICAgICBhZGRfcm93X3RvX3BpcGxfZGF0YXRhYmxlKG5vdywgYXJ0aWZhY3QudmFsdWUsIHBv
c3NpYmxlX3BlcnNvbl9jb3VudGVyLCBcXFwicGhvbmVcXFwiLCBwaG9uZS5nZXQoXFxcImRpc3Bs
YXlfaW50ZXJuYXRpb25hbFxcXCIsIFxcXCJcXFwiKSwgbWF0Y2gsIGluZmVycmVkKVxcbiAgICAg
IFxcbiAgICBnZW5kZXIgPSBwZXJzb24uZ2V0KFxcXCJnZW5kZXJcXFwiKVxcbiAgICBpZiBnZW5k
ZXI6XFxuICAgICAgYWRkX3Jvd190b19waXBsX2RhdGF0YWJsZShub3csIGFydGlmYWN0LnZhbHVl
LCBwb3NzaWJsZV9wZXJzb25fY291bnRlciwgXFxcImdlbmRlclxcXCIsIGdlbmRlci5nZXQoXFxc
ImNvbnRlbnRcXFwiLCBcXFwiXFxcIiksIG1hdGNoLCBpbmZlcnJlZClcXG4gICAgXFxuICAgIGRv
YiA9IHBlcnNvbi5nZXQoXFxcImRvYlxcXCIpXFxuICAgIGlmIGRvYjpcXG4gICAgICBhZGRfcm93
X3RvX3BpcGxfZGF0YXRhYmxlKG5vdywgYXJ0aWZhY3QudmFsdWUsIHBvc3NpYmxlX3BlcnNvbl9j
b3VudGVyLCBcXFwiZG9iXFxcIiwgZG9iLmdldChcXFwiZGlzcGxheVxcXCIsIFxcXCJcXFwiKSwg
bWF0Y2gsIGluZmVycmVkKVxcbiAgICBcXG4gICAgYWRkcmVzc2VzID0gcGVyc29uLmdldChcXFwi
YWRkcmVzc2VzXFxcIiwgW10pXFxuICAgIGZvciBhZGRyZXNzIGluIGFkZHJlc3NlczpcXG4gICAg
ICBhZGRfcm93X3RvX3BpcGxfZGF0YXRhYmxlKG5vdywgYXJ0aWZhY3QudmFsdWUsIHBvc3NpYmxl
X3BlcnNvbl9jb3VudGVyLCBcXFwiYWRkcmVzc1xcXCIsIGFkZHJlc3MuZ2V0KFxcXCJkaXNwbGF5
XFxcIiwgXFxcIlxcXCIpLCBtYXRjaCwgaW5mZXJyZWQpXFxuICAgICAgXFxuICAgIGpvYnMgPSBw
ZXJzb24uZ2V0KFxcXCJqb2JzXFxcIiwgW10pXFxuICAgIGZvciBqb2IgaW4gam9iczpcXG4gICAg
ICBhZGRfcm93X3RvX3BpcGxfZGF0YXRhYmxlKG5vdywgYXJ0aWZhY3QudmFsdWUsIHBvc3NpYmxl
X3BlcnNvbl9jb3VudGVyLCBcXFwiam9iXFxcIiwgam9iLmdldChcXFwiZGlzcGxheVxcXCIsIFxc
XCJcXFwiKSwgbWF0Y2gsIGluZmVycmVkKVxcbiAgICBcXG4gICAgZWR1Y2F0aW9ucyA9IHBlcnNv
bi5nZXQoXFxcImVkdWNhdGlvbnNcXFwiLCBbXSlcXG4gICAgZm9yIGVkdSBpbiBlZHVjYXRpb25z
OlxcbiAgICAgIGFkZF9yb3dfdG9fcGlwbF9kYXRhdGFibGUobm93LCBhcnRpZmFjdC52YWx1ZSwg
cG9zc2libGVfcGVyc29uX2NvdW50ZXIsIFxcXCJlZHVjYXRpb25cXFwiLCBlZHUuZ2V0KFxcXCJk
aXNwbGF5XFxcIiwgXFxcIlxcXCIpLCBtYXRjaCwgaW5mZXJyZWQpXFxuICAgICAgXFxuICAgIHVz
ZXJfaWRzID0gcGVyc29uLmdldChcXFwidXNlcl9pZHNcXFwiLCBbXSlcXG4gICAgZm9yIHVzcl9p
ZCBpbiB1c2VyX2lkczpcXG4gICAgICBhZGRfcm93X3RvX3BpcGxfZGF0YXRhYmxlKG5vdywgYXJ0
aWZhY3QudmFsdWUsIHBvc3NpYmxlX3BlcnNvbl9jb3VudGVyLCBcXFwidXNlcl9pZFxcXCIsIHVz
cl9pZC5nZXQoXFxcImNvbnRlbnRcXFwiLCBcXFwiXFxcIiksIG1hdGNoLCBpbmZlcnJlZClcXG4g
ICAgICBcXG4gICAgaW1hZ2VzID0gcGVyc29uLmdldChcXFwiaW1hZ2VzXFxcIiwgW10pXFxuICAg
IGZvciBpbWFnZSBpbiBpbWFnZXM6XFxuICAgICAgaW1hZ2VfdXJsID0gXFxcIlxcXCJcXFwiJmx0
O2EgaHJlZj0nezB9JyZndDt7MH0mbHQ7L2EmZ3Q7XFxcIlxcXCJcXFwiLmZvcm1hdChpbWFnZS5n
ZXQoXFxcInVybFxcXCIsIFxcXCJcXFwiKSkgaWYgaW1hZ2UuZ2V0KFxcXCJ1cmxcXFwiLCBcXFwi
XFxcIikgZWxzZSBcXFwiXFxcIlxcbiAgICAgIGFkZF9yb3dfdG9fcGlwbF9kYXRhdGFibGUobm93
LCBhcnRpZmFjdC52YWx1ZSwgcG9zc2libGVfcGVyc29uX2NvdW50ZXIsIFxcXCJpbWFnZVxcXCIs
IGltYWdlX3VybCwgbWF0Y2gsIGluZmVycmVkKVxcbiAgICAgIFxcbiAgICB1cmxzID0gcGVyc29u
LmdldChcXFwidXJsc1xcXCIsIFtdKVxcbiAgICBmb3IgdXJsIGluIHVybHM6XFxuICAgICAgdXJs
X3VybCA9IFxcXCJcXFwiXFxcIiZsdDthIGhyZWY9J3swfScmZ3Q7ezB9Jmx0Oy9hJmd0O1xcXCJc
XFwiXFxcIi5mb3JtYXQodXJsLmdldChcXFwidXJsXFxcIiwgXFxcIlxcXCIpKSBpZiB1cmwuZ2V0
KFxcXCJ1cmxcXFwiLCBcXFwiXFxcIikgZWxzZSBcXFwiXFxcIlxcbiAgICAgIGFkZF9yb3dfdG9f
cGlwbF9kYXRhdGFibGUobm93LCBhcnRpZmFjdC52YWx1ZSwgcG9zc2libGVfcGVyc29uX2NvdW50
ZXIsIFxcXCJ1cmxcXFwiLCB1cmxfdXJsLCBtYXRjaCwgaW5mZXJyZWQpXCIsXCJwcmVfcHJvY2Vz
c2luZ19zY3JpcHRcIjpcIiMgUmVxdWlyZWQgaW5wdXRzIGFyZTogdGhlIGFydGlmYWN0X3R5cGUg
YW5kIGFydGlmYWN0X3ZhbHVlXFxuaW5wdXRzLnBpcGxfYXJ0aWZhY3RfdHlwZSA9IGFydGlmYWN0
LnR5cGVcXG5pbnB1dHMucGlwbF9hcnRpZmFjdF92YWx1ZSA9IGFydGlmYWN0LnZhbHVlXCIsXCJy
ZXN1bHRfbmFtZVwiOlwiXCJ9PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVtZW50
cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzFnNXY1dGc8L2luY29taW5nPjxvdXRnb2luZz5TZXF1
ZW5jZUZsb3dfMTEzYTBibjwvb3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlk
PVwiU2VxdWVuY2VGbG93XzFnNXY1dGdcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1c
IiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18wcGplZzloXCIvPjxlbmRFdmVudCBpZD1cIkVuZEV2
ZW50XzA2emx4cWFcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzExM2EwYm48L2luY29taW5nPjwv
ZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xMTNhMGJuXCIgc291cmNl
UmVmPVwiU2VydmljZVRhc2tfMHBqZWc5aFwiIHRhcmdldFJlZj1cIkVuZEV2ZW50XzA2emx4cWFc
Ii8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0
YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlv
biBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFz
eG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBt
bmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJw
bW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNo
YXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1
NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIx
NjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwi
MFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+
PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFu
bm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdk
YzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+
PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lh
dGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBv
aW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6
d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwv
YnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRh
c2tfMHBqZWc5aFwiIGlkPVwiU2VydmljZVRhc2tfMHBqZWc5aF9kaVwiPjxvbWdkYzpCb3VuZHMg
aGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIzMTNcIiB5PVwiMTY2XCIvPjwvYnBtbmRp
OkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzFn
NXY1dGdcIiBpZD1cIlNlcXVlbmNlRmxvd18xZzV2NXRnX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9
XCIxOThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9p
bnQgeD1cIjMxM1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6
QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiMjU1
LjVcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48YnBt
bmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50XzA2emx4cWFcIiBpZD1cIkVuZEV2
ZW50XzA2emx4cWFfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwi
IHg9XCI1MjZcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVp
Z2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNTQ0XCIgeT1cIjIyN1wiLz48L2JwbW5kaTpCUE1O
TGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJT
ZXF1ZW5jZUZsb3dfMTEzYTBiblwiIGlkPVwiU2VxdWVuY2VGbG93XzExM2EwYm5fZGlcIj48b21n
ZGk6d2F5cG9pbnQgeD1cIjQxM1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIv
PjxvbWdkaTp3YXlwb2ludCB4PVwiNTI2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIy
MDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRo
PVwiMFwiIHg9XCI0NjkuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRp
OkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48L2RlZmlu
aXRpb25zPiIsICJ3b3JrZmxvd19pZCI6ICJleGFtcGxlX3BpcGxfc2VhcmNoX2Z1bmN0aW9uIiwg
InZlcnNpb24iOiAzOH0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQxNjUyMjIzMDkwLCAiY3Jl
YXRvcl9pZCI6ICJhQGEuY29tIiwgImFjdGlvbnMiOiBbXSwgInByb2dyYW1tYXRpY19uYW1lIjog
ImV4YW1wbGVfcGlwbF9zZWFyY2hfZnVuY3Rpb24iLCAibmFtZSI6ICJFeGFtcGxlOiBQaXBsIHNl
YXJjaCJ9XSwgImFjdGlvbnMiOiBbeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkV4YW1w
bGU6IENyZWF0ZSBhbiBBcnRpZmFjdCBmcm9tIFBpcGwgZGF0YSIsICJ2aWV3X2l0ZW1zIjogW3si
c2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogImFjdGlvbmludm9jYXRpb24iLCAic2hvd19s
aW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAi
Yzc2YzdjNjQtNTZiZC00YWNmLThlOTctMmM4YWVjMTlmYWRiIiwgInN0ZXBfbGFiZWwiOiBudWxs
fV0sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFtdLCAib2JqZWN0X3R5cGUiOiAicGlwbF9wZXJz
b25fZGF0YSIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNjkxYTcwZDItNDA3
MS00MmNjLTg0MDUtOGYyOWI5N2E2ZjMyIiwgImF1dG9tYXRpb25zIjogW3sic2NyaXB0c190b19y
dW4iOiAiQ3JlYXRlIEFydGlmYWN0IGZyb20gUGlwbCBEYXRhIiwgInR5cGUiOiAicnVuX3Njcmlw
dCIsICJ2YWx1ZSI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogQ3JlYXRlIGFuIEFy
dGlmYWN0IGZyb20gUGlwbCBkYXRhIiwgImNvbmRpdGlvbnMiOiBbXSwgImlkIjogNjQsICJtZXNz
YWdlX2Rlc3RpbmF0aW9ucyI6IFtdfSwgeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkV4
YW1wbGU6IFBpcGwgc2VhcmNoIGZ1bmN0aW9uIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAx
LCAid29ya2Zsb3dzIjogWyJleGFtcGxlX3BpcGxfc2VhcmNoX2Z1bmN0aW9uIl0sICJvYmplY3Rf
dHlwZSI6ICJhcnRpZmFjdCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiMjY3
YjEyYzctOGRjZC00OTY1LTk0Y2EtNDgzZjY0YTFhNTBiIiwgImF1dG9tYXRpb25zIjogW10sICJl
eHBvcnRfa2V5IjogIkV4YW1wbGU6IFBpcGwgc2VhcmNoIGZ1bmN0aW9uIiwgImNvbmRpdGlvbnMi
OiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJh
cnRpZmFjdC50eXBlIiwgIm1ldGhvZCI6ICJpbiIsICJ2YWx1ZSI6IFsiRW1haWwgU2VuZGVyIiwg
IkVtYWlsIFNlbmRlciBOYW1lIiwgIkVtYWlsIFJlY2lwaWVudCIsICJVc2VyIEFjY291bnQiLCAi
U3RyaW5nIl19XSwgImlkIjogNTgsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdfV0sICJsYXlv
dXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiAxNSwgImluZHVzdHJp
ZXMiOiBudWxsLCAicGhhc2VzIjogW10sICJhY3Rpb25fb3JkZXIiOiBbXSwgImdlb3MiOiBudWxs
LCAibG9jYWxlIjogbnVsbCwgInNlcnZlcl92ZXJzaW9uIjogeyJtYWpvciI6IDMxLCAidmVyc2lv
biI6ICIzMS4wLjQyNTQiLCAiYnVpbGRfbnVtYmVyIjogNDI1NCwgIm1pbm9yIjogMH0sICJ0aW1l
ZnJhbWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAi
ZnVuY3Rpb25zIjogW3siZGlzcGxheV9uYW1lIjogIlBpcGwgc2VhcmNoIGZ1bmN0aW9uIiwgImRl
c2NyaXB0aW9uIjogeyJjb250ZW50IjogIkZ1bmN0aW9uIGVucmljaGVzIHlvdXIgbGVhZHMgKG5h
bWUsIGVtYWlsIGFkZHJlc3MsIHBob25lIG51bWJlciwgb3Igc29jaWFsIG1lZGlhIHVzZXJuYW1l
KSB3aXRoIFBpcGwgYW5kIGdldHMgdGhlaXIgcGVyc29uYWwsIHByb2Zlc3Npb25hbCwgZGVtb2dy
YXBoaWMsIGFuZCBjb250YWN0IGluZm9ybWF0aW9uLiIsICJmb3JtYXQiOiAidGV4dCJ9LCAiY3Jl
YXRvciI6IHsiZGlzcGxheV9uYW1lIjogIlJlc2lsaWVudCBTeXNhZG1pbiIsICJ0eXBlIjogInVz
ZXIiLCAiaWQiOiAzLCAibmFtZSI6ICJhQGEuY29tIn0sICJ2aWV3X2l0ZW1zIjogW3sic2hvd19p
ZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hlYWRlciI6
IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiZTljMDE2ZTgtNDFm
Ni00NzkxLWE4YTItNGI2NWVjZDBiZDhiIiwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJzaG93X2lm
IjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjog
ZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICI5OTNlYjJlMy02NWYz
LTQyNGQtOWEzYS05YTM4OTIxODBmNzAiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9r
ZXkiOiAicGlwbF9zZWFyY2hfZnVuY3Rpb24iLCAidXVpZCI6ICI4MDNkZjQ3NC0yZGYwLTRjZjIt
ODg4Mi1jZjJjNTE5Y2NhNzYiLCAibGFzdF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjog
IlJlc2lsaWVudCBTeXNhZG1pbiIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiAzLCAibmFtZSI6ICJh
QGEuY29tIn0sICJ2ZXJzaW9uIjogNSwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0aW9uIjogbnVs
bCwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImFjdGlvbnMiOiBbXSwgIm5hbWUiOiAiRXhh
bXBsZTogUGlwbCBzZWFyY2giLCAid29ya2Zsb3dfaWQiOiA0MiwgInByb2dyYW1tYXRpY19uYW1l
IjogImV4YW1wbGVfcGlwbF9zZWFyY2hfZnVuY3Rpb24iLCAidXVpZCI6IG51bGx9XSwgImxhc3Rf
bW9kaWZpZWRfdGltZSI6IDE1NDE2NDAyNTczMzIsICJkZXN0aW5hdGlvbl9oYW5kbGUiOiAiZm5f
cGlwbCIsICJpZCI6IDM1LCAibmFtZSI6ICJwaXBsX3NlYXJjaF9mdW5jdGlvbiJ9XSwgIm5vdGlm
aWNhdGlvbnMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJpbmNpZGVudF90eXBlcyI6IFt7
ImNyZWF0ZV9kYXRlIjogMTU0MjAzMjEyNjkyNCwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRp
b24gUGFja2FnZXMgKGludGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24gUGFj
a2FnZXMgKGludGVybmFsKSIsICJpZCI6IDAsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2Fn
ZXMgKGludGVybmFsKSIsICJ1cGRhdGVfZGF0ZSI6IDE1NDIwMzIxMjY5MjQsICJ1dWlkIjogImJm
ZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJlbmFibGVkIjogZmFsc2UsICJz
eXN0ZW0iOiBmYWxzZSwgInBhcmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZX1dLCAic2Ny
aXB0cyI6IFt7InV1aWQiOiAiMGZlNGNjMjYtYTQyOC00MTAzLTg1NTQtN2QzMTY1NmQ2MGRmIiwg
Imxhbmd1YWdlIjogInB5dGhvbiIsICJvYmplY3RfdHlwZSI6ICJwaXBsX3BlcnNvbl9kYXRhIiwg
ImV4cG9ydF9rZXkiOiAiQ3JlYXRlIEFydGlmYWN0IGZyb20gUGlwbCBEYXRhIiwgImFjdGlvbnMi
OiBbXSwgIm5hbWUiOiAiQ3JlYXRlIEFydGlmYWN0IGZyb20gUGlwbCBEYXRhIiwgImNyZWF0b3Jf
aWQiOiAiYUBhLmNvbSIsICJsYXN0X21vZGlmaWVkX2J5IjogImFAYS5jb20iLCAibGFzdF9tb2Rp
ZmllZF90aW1lIjogMTU0MTY0ODUxMTM5NywgInNjcmlwdF90ZXh0IjogIiMgQ3JlYXRlIGFuIGFy
dGlmYWN0IGJhc2VkIGZyb20gYSBzZWxlY3RlZCByb3cgaW4gUGlwbCBwb3NzaWJsZSBwZXJzb24g
ZGF0YS5cblxuIyBhcnRpZmFjdCBkZXNjcmlwdGlvblxuYXJ0aWZhY3RfZGVzY3JpcHRpb24gPSBc
IlwiXCJDcmVhdGVkIGJ5IFBpcGwgRGF0YSByZXN1bHRzIGdlbmVyYXRlZCBmb3IgYXJ0aWZhY3Rf
dmFsdWUge31cIlwiXCIuZm9ybWF0KHJvdy5waXBsX2FydGlmYWN0X3ZhbHVlKVxuXG4jIGFydGlm
YWN0IHR5cGUgLSByZWFkIGl0IGZyb20gdGhlIG1lbnUgaXRlbSdzIGFjdGl2aXR5IGZpZWxkXG5h
cnRpZmFjdF90eXBlID0gcnVsZS5wcm9wZXJ0aWVzLnBpcGxfYXJ0aWZhY3RfdHlwZVxuXG4jIGFy
dGlmYWN0IHZhbHVlXG4jIHBpcGxfdmFsdWUgY29sdW1uIGluIFBpcCBwb3NzaWJsZSBwZXJzb24g
ZGF0YSBpcyBpbiB0aGlzIGZvcm1hdCB7dSdmb3JtYXQnOiB1J2h0bWwnLCB1J2NvbnRlbnQnOiB1
J3lvdXIgYXBpIGRhdGEnfSBcbnJpY2hfdGV4dF9waXBsX3ZhbHVlID0gcm93LnBpcGxfdmFsdWVc
bmFydGlmYWN0X3ZhbHVlID0gcmljaF90ZXh0X3BpcGxfdmFsdWUuZ2V0KFwiY29udGVudFwiKVxu
XG4jIGNyZWF0ZSBhbiBhcnRpZmFjdFxuaWYgYXJ0aWZhY3RfdmFsdWU6XG4gIGluY2lkZW50LmFk
ZEFydGlmYWN0KGFydGlmYWN0X3R5cGUsIGFydGlmYWN0X3ZhbHVlLCBhcnRpZmFjdF9kZXNjcmlw
dGlvbikiLCAiaWQiOiAyLCAiZGVzY3JpcHRpb24iOiAiU2NyaXB0IGNyZWF0ZXMgYW4gYXJ0aWZh
Y3QgYmFzZWQgZnJvbSBhIHNlbGVjdGVkIHJvdyBpbiBQaXBsIHBvc3NpYmxlIHBlcnNvbiBkYXRh
LiJ9XSwgInR5cGVzIjogW3siZGlzcGxheV9uYW1lIjogIlBpcGwgcGVyc29uIGRhdGEiLCAidXVp
ZCI6ICI1YTNlNTYwZC1mOWUwLTRlZDktYmYzMi0zMzdlYWI4ZTgzNGQiLCAidHlwZV9pZCI6IDgs
ICJmaWVsZHMiOiB7InBpcGxfaW5mZXJyZWQiOiB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQi
OiAxMDA0LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIkluZmVycmVkIiwgImJsYW5r
X29wdGlvbiI6IHRydWUsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6
IDI4MSwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIwMTgyYzhhMS1hNjE4LTRjMjQtOWI2
Mi01MjZlYzU1MGMwM2EiLCAiY2hvc2VuIjogdHJ1ZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0
b29sdGlwIjogIiIsICJ3aWR0aCI6IDQxLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6
IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogInBpcGxfcGVyc29uX2RhdGEv
cGlwbF9pbmZlcnJlZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIi
OiAiIiwgIm5hbWUiOiAicGlwbF9pbmZlcnJlZCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZh
dWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAib3JkZXIiOiA2fSwg
InBpcGxfdGltZXN0YW1wIjogeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMTAwNCwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJUaW1lc3RhbXAiLCAiYmxhbmtfb3B0aW9uIjog
dHJ1ZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjgyLCAicmVh
ZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogImMyNGNlYzEyLWY0YzgtNGY4NS05MzI0LTI1OTY3ZTA0
ZTdkYSIsICJjaG9zZW4iOiB0cnVlLCAiaW5wdXRfdHlwZSI6ICJkYXRldGltZXBpY2tlciIsICJ0
b29sdGlwIjogIiIsICJ3aWR0aCI6IDExNSwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQi
OiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJwaXBsX3BlcnNvbl9kYXRh
L3BpcGxfdGltZXN0YW1wIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRl
ciI6ICIiLCAibmFtZSI6ICJwaXBsX3RpbWVzdGFtcCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJk
ZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAib3JkZXIiOiAw
fSwgInBpcGxfcG9zc2libGVfbWF0Y2hfbm8iOiB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQi
OiAxMDA0LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlBvc3NpYmxlIHBlb3BsZSBt
YXRjaCBuby4iLCAiYmxhbmtfb3B0aW9uIjogdHJ1ZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2Vh
YmxlIjogdHJ1ZSwgImlkIjogMjgzLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjdmYjVj
YzhhLWJjNDEtNDZjYy1iNjc0LTFkMDgzNThlOGRjOSIsICJjaG9zZW4iOiB0cnVlLCAiaW5wdXRf
dHlwZSI6ICJ0ZXh0IiwgInRvb2x0aXAiOiAiIiwgIndpZHRoIjogNDUsICJpbnRlcm5hbCI6IGZh
bHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAi
cGlwbF9wZXJzb25fZGF0YS9waXBsX3Bvc3NpYmxlX21hdGNoX25vIiwgImhpZGVfbm90aWZpY2F0
aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJwaXBsX3Bvc3NpYmxlX21h
dGNoX25vIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6
IGZhbHNlLCAidmFsdWVzIjogW10sICJvcmRlciI6IDR9LCAicGlwbF9wcm9wZXJ0eSI6IHsib3Bl
cmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDEwMDQsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRl
eHQiOiAiUHJvcGVydHkiLCAiYmxhbmtfb3B0aW9uIjogdHJ1ZSwgInByZWZpeCI6IG51bGwsICJj
aGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjc4LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjog
ImFhNGNiNjg2LWU2YTItNDVmOS04ZWE2LTQ1OTg5MmI3Mjc2MyIsICJjaG9zZW4iOiB0cnVlLCAi
aW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInRvb2x0aXAiOiAiIiwgIndpZHRoIjogNTAsICJpbnRlcm5h
bCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9r
ZXkiOiAicGlwbF9wZXJzb25fZGF0YS9waXBsX3Byb3BlcnR5IiwgImhpZGVfbm90aWZpY2F0aW9u
IjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJwaXBsX3Byb3BlcnR5IiwgImRl
cHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFs
dWVzIjogW10sICJvcmRlciI6IDJ9LCAicGlwbF9tYXRjaCI6IHsib3BlcmF0aW9ucyI6IFtdLCAi
dHlwZV9pZCI6IDEwMDQsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiTWF0Y2giLCAi
Ymxhbmtfb3B0aW9uIjogdHJ1ZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwg
ImlkIjogMjgwLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjZhYzk1ZTZlLWZiMzUtNDMx
Zi1hNTk5LWRkZTVhMzc2Zjc4ZSIsICJjaG9zZW4iOiB0cnVlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0
IiwgInRvb2x0aXAiOiAiIiwgIndpZHRoIjogMzMsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90
ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAicGlwbF9wZXJzb25f
ZGF0YS9waXBsX21hdGNoIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRl
ciI6ICIiLCAibmFtZSI6ICJwaXBsX21hdGNoIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1
bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW10sICJvcmRlciI6IDV9LCAi
cGlwbF92YWx1ZSI6IHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDEwMDQsICJvcGVyYXRp
b25fcGVybXMiOiB7fSwgInRleHQiOiAiVmFsdWUiLCAiYmxhbmtfb3B0aW9uIjogdHJ1ZSwgInBy
ZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMjc5LCAicmVhZF9vbmx5Ijog
ZmFsc2UsICJ1dWlkIjogIjk5YzgwN2NiLTdmMmUtNDJiNS1hYzQ0LTAyYmNmZDNjOGI2OSIsICJj
aG9zZW4iOiB0cnVlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0YXJlYSIsICJ0b29sdGlwIjogIiIsICJ3
aWR0aCI6IDE2MywgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiB0cnVlLCAidGVtcGxh
dGVzIjogW10sICJleHBvcnRfa2V5IjogInBpcGxfcGVyc29uX2RhdGEvcGlwbF92YWx1ZSIsICJo
aWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAicGlw
bF92YWx1ZSIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIi
OiBmYWxzZSwgInZhbHVlcyI6IFtdLCAib3JkZXIiOiAzfSwgInBpcGxfYXJ0aWZhY3RfdmFsdWUi
OiB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMDA0LCAib3BlcmF0aW9uX3Blcm1zIjog
e30sICJ0ZXh0IjogIkFydGlmYWN0IHZhbHVlIiwgImJsYW5rX29wdGlvbiI6IHRydWUsICJwcmVm
aXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDI4NCwgInJlYWRfb25seSI6IGZh
bHNlLCAidXVpZCI6ICI5YjRiYWNjNS0zZDQwLTRiNzAtOTRhMC04Y2VjZDgxNDBiYjIiLCAiY2hv
c2VuIjogdHJ1ZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjogIiIsICJ3aWR0aCI6
IDE0NCwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6
IFtdLCAiZXhwb3J0X2tleSI6ICJwaXBsX3BlcnNvbl9kYXRhL3BpcGxfYXJ0aWZhY3RfdmFsdWUi
LCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJuYW1lIjog
InBpcGxfYXJ0aWZhY3RfdmFsdWUiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9z
ZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXSwgIm9yZGVyIjogMX19LCAicGFyZW50
X3R5cGVzIjogWyJpbmNpZGVudCJdLCAidHlwZV9uYW1lIjogInBpcGxfcGVyc29uX2RhdGEiLCAi
ZXhwb3J0X2tleSI6ICJwaXBsX3BlcnNvbl9kYXRhIiwgImZvcl9jdXN0b21fZmllbGRzIjogZmFs
c2UsICJhY3Rpb25zIjogW10sICJpZCI6IG51bGwsICJmb3JfYWN0aW9ucyI6IGZhbHNlLCAiZm9y
X25vdGlmaWNhdGlvbnMiOiBmYWxzZSwgInNjcmlwdHMiOiBbXSwgInByb3BlcnRpZXMiOiB7ImZv
cl93aG8iOiBbXSwgImNhbl9kZXN0cm95IjogZmFsc2UsICJjYW5fY3JlYXRlIjogZmFsc2V9fV0s
ICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7InV1aWQiOiAiY2M1YzVhZDgtY2QyNC00MGU4LWFk
N2EtNTQ2ZDNhZjNjZDIxIiwgImV4cG9ydF9rZXkiOiAiZm5fcGlwbCIsICJuYW1lIjogImZuX3Bp
cGwiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJmbl9waXBs
IiwgImV4cGVjdF9hY2siOiB0cnVlLCAidXNlcnMiOiBbImFAYS5jb20iXX1dLCAiaW5jaWRlbnRf
YXJ0aWZhY3RfdHlwZXMiOiBbXSwgInJvbGVzIjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRpb25z
IjogW10sICJ0eXBlX2lkIjogMCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJTaW11
bGF0aW9uIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFi
bGUiOiB0cnVlLCAiaWQiOiAzOCwgInJlYWRfb25seSI6IHRydWUsICJ1dWlkIjogImMzZjBlM2Vk
LTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5
cGUiOiAiYm9vbGVhbiIsICJ0b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lkZW50IGlzIGEgc2lt
dWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuICBUaGlzIGZpZWxkIGlzIHJlYWQtb25seS4i
LCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10s
ICJleHBvcnRfa2V5IjogImluY2lkZW50L2luY190cmFpbmluZyIsICJoaWRlX25vdGlmaWNhdGlv
biI6IGZhbHNlLCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAi
ZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0
aW9ucyI6IFtdLCAidHlwZV9pZCI6IDYsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAi
QXJ0aWZhY3QgdHlwZSIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6ICJwcm9wZXJ0
aWVzIiwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAyODUsICJyZWFkX29ubHkiOiBmYWxzZSwg
InV1aWQiOiAiYzc2YzdjNjQtNTZiZC00YWNmLThlOTctMmM4YWVjMTlmYWRiIiwgImNob3NlbiI6
IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJzZWxlY3QiLCAidG9vbHRpcCI6ICIiLCAiaW50ZXJuYWwi
OiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5
IjogImFjdGlvbmludm9jYXRpb24vcGlwbF9hcnRpZmFjdF90eXBlIiwgImhpZGVfbm90aWZpY2F0
aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJwaXBsX2FydGlmYWN0X3R5
cGUiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFs
c2UsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAidmFsdWVzIjogW3sidXVpZCI6ICI4OWUzNTk0My0y
ODFhLTQ4ZjktOTM5OC05Y2I5NmNjYTBmNWEiLCAiZGVmYXVsdCI6IHRydWUsICJlbmFibGVkIjog
dHJ1ZSwgInZhbHVlIjogMjUwLCAibGFiZWwiOiAiRW1haWwgUmVjaXBpZW50IiwgImhpZGRlbiI6
IGZhbHNlLCAicHJvcGVydGllcyI6IG51bGx9LCB7InV1aWQiOiAiYzRlNjk5OTAtOWM1Mi00MzVj
LTg3ZjgtZjlkMTBlMTMxMzkxIiwgImRlZmF1bHQiOiBmYWxzZSwgImVuYWJsZWQiOiB0cnVlLCAi
dmFsdWUiOiAyNTEsICJsYWJlbCI6ICJFbWFpbCBTZW5kZXIiLCAiaGlkZGVuIjogZmFsc2UsICJw
cm9wZXJ0aWVzIjogbnVsbH0sIHsidXVpZCI6ICI4MjFlYTlkZi1jNjkwLTRhZjItOGYyMi1kMzJh
OTgyMThiY2QiLCAiZGVmYXVsdCI6IGZhbHNlLCAiZW5hYmxlZCI6IHRydWUsICJ2YWx1ZSI6IDI1
MiwgImxhYmVsIjogIkVtYWlsIFNlbmRlciBOYW1lIiwgImhpZGRlbiI6IGZhbHNlLCAicHJvcGVy
dGllcyI6IG51bGx9LCB7InV1aWQiOiAiNDg4MjFjYmItOGFkOC00M2RlLWI5ZDYtOTNmN2IwNWNj
MmNjIiwgImRlZmF1bHQiOiBmYWxzZSwgImVuYWJsZWQiOiB0cnVlLCAidmFsdWUiOiAyNTMsICJs
YWJlbCI6ICJVc2VyIEFjY291bnQiLCAiaGlkZGVuIjogZmFsc2UsICJwcm9wZXJ0aWVzIjogbnVs
bH0sIHsidXVpZCI6ICJjNTUzZTMxMy1hZTBkLTRkYTYtODZhYy0zM2IxMWUxMjJkNTUiLCAiZGVm
YXVsdCI6IGZhbHNlLCAiZW5hYmxlZCI6IHRydWUsICJ2YWx1ZSI6IDI1NywgImxhYmVsIjogIk1h
bHdhcmUgTUQ1IEhhc2giLCAiaGlkZGVuIjogZmFsc2UsICJwcm9wZXJ0aWVzIjogbnVsbH1dfSwg
eyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwg
InRleHQiOiAicGlwbF9hcnRpZmFjdF92YWx1ZSIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInBy
ZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMzAyLCAicmVhZF9vbmx5Ijog
ZmFsc2UsICJ1dWlkIjogIjk5M2ViMmUzLTY1ZjMtNDI0ZC05YTNhLTlhMzg5MjE4MGY3MCIsICJj
aG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjogIiIsICJpbnRl
cm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9y
dF9rZXkiOiAiX19mdW5jdGlvbi9waXBsX2FydGlmYWN0X3ZhbHVlIiwgImhpZGVfbm90aWZpY2F0
aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJwaXBsX2FydGlmYWN0X3Zh
bHVlIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZh
bHNlLCAicmVxdWlyZWQiOiAiYWx3YXlzIiwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRpb25zIjog
W10sICJ0eXBlX2lkIjogMTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAicGlwbF9h
cnRpZmFjdF90eXBlIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNo
YW5nZWFibGUiOiB0cnVlLCAiaWQiOiAzMDEsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAi
ZTljMDE2ZTgtNDFmNi00NzkxLWE4YTItNGI2NWVjZDBiZDhiIiwgImNob3NlbiI6IGZhbHNlLCAi
aW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInRvb2x0aXAiOiAiIiwgImludGVybmFsIjogZmFsc2UsICJy
aWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0
aW9uL3BpcGxfYXJ0aWZhY3RfdHlwZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxh
Y2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAicGlwbF9hcnRpZmFjdF90eXBlIiwgImRlcHJlY2F0ZWQi
OiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAicmVxdWlyZWQiOiAi
YWx3YXlzIiwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjog
MTU0MTY1NDc0NDgxNX0=
"""
    )