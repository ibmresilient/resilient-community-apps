# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for rc-data-feed"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the rc-data-feed package"""
    reload_params = {"package": u"rc-data-feed",
                    "incident_fields": [], 
                    "action_fields": [u"data_feeder_maximum_incident_id", u"data_feeder_minimum_incident_id", u"query_api_method"], 
                    "function_params": [u"df_max_incident_id", u"df_min_incident_id", u"df_query_api_method"], 
                    "datatables": [], 
                    "message_destinations": [u"feed_data"], 
                    "functions": [u"data_feeder_sync_incidents"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"data_feeder_sync_incidents"], 
                    "actions": [u"Data Feeder: Artifact", u"Data Feeder: Attachment", u"Data Feeder: Incident", u"Data Feeder: Milestone", u"Data Feeder: Note", u"Data Feeder: Sync Incidents", u"Data Feeder: Task"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     data_feeder_maximum_incident_id
    #     data_feeder_minimum_incident_id
    #     query_api_method
    #   Function inputs:
    #     df_max_incident_id
    #     df_min_incident_id
    #     df_query_api_method
    #   Message Destinations:
    #     feed_data
    #   Functions:
    #     data_feeder_sync_incidents
    #   Workflows:
    #     data_feeder_sync_incidents
    #   Rules:
    #     Data Feeder: Artifact
    #     Data Feeder: Attachment
    #     Data Feeder: Incident
    #     Data Feeder: Milestone
    #     Data Feeder: Note
    #     Data Feeder: Sync Incidents
    #     Data Feeder: Task


    yield ImportDefinition(u"""
eyJpZCI6IDIsICJmaWVsZHMiOiBbeyJjaG9zZW4iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2Us
ICJ1dWlkIjogImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJvcGVyYXRp
b25zIjogW10sICJ2YWx1ZXMiOiBbXSwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAxMTUsICJu
YW1lIjogImluY190cmFpbmluZyIsICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAicHJlZml4IjogbnVs
bCwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNp
bXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHku
IiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAi
ZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAicmVhZF9vbmx5IjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZh
bHNlLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAidGVtcGxhdGVzIjog
W119LCB7ImNob3NlbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiY2M1MzJh
MjItZTkwZi00NmU0LTkxOWEtMGFkMTI5Njc5NmJmIiwgIm9wZXJhdGlvbnMiOiBbXSwgInZhbHVl
cyI6IFtdLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDE1NSwgIm5hbWUiOiAiZGF0YV9mZWVk
ZXJfbWluaW11bV9pbmNpZGVudF9pZCIsICJ0ZXh0IjogIk1pbmltdW0gSW5jaWRlbnQgSUQiLCAi
cHJlZml4IjogInByb3BlcnRpZXMiLCAidHlwZV9pZCI6IDYsICJ0b29sdGlwIjogIkVudGVyIElu
Y2lkZW50IElEIHRvIHN0YXJ0IHN5bmMgb3IgMCIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRf
dHlwZSI6ICJudW1iZXIiLCAicmVxdWlyZWQiOiAiYWx3YXlzIiwgImhpZGVfbm90aWZpY2F0aW9u
IjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlv
biI6IGZhbHNlLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJyZWFkX29ubHkiOiBmYWxzZSwgInJp
Y2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJhY3Rpb25pbnZvY2F0aW9uL2RhdGFfZmVl
ZGVyX21pbmltdW1faW5jaWRlbnRfaWQiLCAidGVtcGxhdGVzIjogW119LCB7ImNob3NlbiI6IGZh
bHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiN2VkM2FmMDMtZDNiMy00MWVkLWE3MjEt
OTcwNTQzNDYzNTk4IiwgIm9wZXJhdGlvbnMiOiBbXSwgInZhbHVlcyI6IFtdLCAiY2hhbmdlYWJs
ZSI6IHRydWUsICJpZCI6IDE1NiwgIm5hbWUiOiAicXVlcnlfYXBpX21ldGhvZCIsICJ0ZXh0Ijog
IlF1ZXJ5IEFQSSBNZXRob2QiLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAidHlwZV9pZCI6IDYs
ICJ0b29sdGlwIjogIlNwZWNpZnkgdHJ1ZSBpZiBlcnJvcnMgb2NjdXIgd2hlbiB1c2luZyB0aGUg
ZGVmYXVsdCBzZWFyY2ggY2FwYWJpbGl0eSIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlw
ZSI6ICJib29sZWFuIiwgInJlcXVpcmVkIjogImFsd2F5cyIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24i
OiB0cnVlLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJyZWFkX29ubHkiOiBmYWxzZSwgInJpY2hf
dGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJhY3Rpb25pbnZvY2F0aW9uL3F1ZXJ5X2FwaV9t
ZXRob2QiLCAidGVtcGxhdGVzIjogW119LCB7ImNob3NlbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBm
YWxzZSwgInV1aWQiOiAiM2UyZTkzZGUtNmJhNS00YWRmLWIwNDQtNjZhNDYwOWRkNzdkIiwgIm9w
ZXJhdGlvbnMiOiBbXSwgInZhbHVlcyI6IFtdLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDE1
NywgIm5hbWUiOiAiZGF0YV9mZWVkZXJfbWF4aW11bV9pbmNpZGVudF9pZCIsICJ0ZXh0IjogIk1h
eGltdW0gSW5jaWRlbnQgSUQiLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAidHlwZV9pZCI6IDYs
ICJ0b29sdGlwIjogIkVudGVyIEluY2lkZW50IElEIHRvIHN5bmMgdXAgdG8gb3IgMCB0byBpbmRp
Y2F0ZSBhbGwgaW5jaWRlbnRzIiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogIm51
bWJlciIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9
LCAicmVhZF9vbmx5IjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAi
YWN0aW9uaW52b2NhdGlvbi9kYXRhX2ZlZWRlcl9tYXhpbXVtX2luY2lkZW50X2lkIiwgInRlbXBs
YXRlcyI6IFtdfSwgeyJjaG9zZW4iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjog
ImU3ODIwZTQ0LTQwODctNGNlMi04NGFmLTBmZTkzNjMwYTAzYyIsICJvcGVyYXRpb25zIjogW10s
ICJ2YWx1ZXMiOiBbXSwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAxNTksICJuYW1lIjogImRm
X21heF9pbmNpZGVudF9pZCIsICJ0ZXh0IjogImRmX21heF9pbmNpZGVudF9pZCIsICJwcmVmaXgi
OiBudWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRpcCI6ICJFbnRlciBpbmNpZGVudCAjIGZvciB1
cHBlciByYW5nZSBvciAwIHRvIGluZGljYXRlIGFsbCBpbmNpZGVudHMiLCAicGxhY2Vob2xkZXIi
OiAiIiwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2Us
ICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNl
LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJyZWFkX29ubHkiOiBmYWxzZSwgInJpY2hfdGV4dCI6
IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2RmX21heF9pbmNpZGVudF9pZCIsICJ0
ZW1wbGF0ZXMiOiBbXX0sIHsiY2hvc2VuIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVp
ZCI6ICJiODBkMTFkNC05YzZiLTRjZDctOTUxYS00ZmU4YzU3MmM5ZWYiLCAib3BlcmF0aW9ucyI6
IFtdLCAidmFsdWVzIjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMTYwLCAibmFtZSI6
ICJkZl9taW5faW5jaWRlbnRfaWQiLCAidGV4dCI6ICJkZl9taW5faW5jaWRlbnRfaWQiLCAicHJl
Zml4IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRvb2x0aXAiOiAiRW50ZXIgYW4gaW5jaWRlbnQg
IyBvciAwIHRvIGluZGljYXRlIHRoZSBzdGFydCBvZiBhbGwgaW5jaWRlbnRzIiwgInBsYWNlaG9s
ZGVyIjogIiIsICJpbnB1dF90eXBlIjogIm51bWJlciIsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAi
aGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZh
bHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInJlYWRf
b25seSI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVuY3Rp
b24vZGZfbWluX2luY2lkZW50X2lkIiwgInRlbXBsYXRlcyI6IFtdfSwgeyJjaG9zZW4iOiBmYWxz
ZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogIjczMWU5NGZmLTgyMmYtNDhmMS04M2E5LWE3
ODM4MGZkNjM2YiIsICJvcGVyYXRpb25zIjogW10sICJ2YWx1ZXMiOiBbXSwgImNoYW5nZWFibGUi
OiB0cnVlLCAiaWQiOiAxNTgsICJuYW1lIjogImRmX3F1ZXJ5X2FwaV9tZXRob2QiLCAidGV4dCI6
ICJkZl9xdWVyeV9hcGlfbWV0aG9kIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0
b29sdGlwIjogIiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwg
InJlcXVpcmVkIjogImFsd2F5cyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiZGVmYXVs
dF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiB0cnVlLCAib3BlcmF0
aW9uX3Blcm1zIjoge30sICJyZWFkX29ubHkiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAi
ZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2RmX3F1ZXJ5X2FwaV9tZXRob2QiLCAidGVtcGxhdGVz
IjogW119XSwgInBoYXNlcyI6IFtdLCAib3ZlcnJpZGVzIjogW10sICJhY3Rpb25zIjogW3siaWQi
OiAyNywgIm5hbWUiOiAiRGF0YSBGZWVkZXI6IEFydGlmYWN0IiwgInR5cGUiOiAwLCAib2JqZWN0
X3R5cGUiOiAiYXJ0aWZhY3QiLCAiY29uZGl0aW9ucyI6IFtdLCAiYXV0b21hdGlvbnMiOiBbXSwg
Im1lc3NhZ2VfZGVzdGluYXRpb25zIjogWyJmZWVkX2RhdGEiXSwgIndvcmtmbG93cyI6IFtdLCAi
dmlld19pdGVtcyI6IFtdLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogIjNjNjI3
YWE4LTU4MTAtNDRhNC1hMjVkLWU1YThkYjE5YjZhNiIsICJleHBvcnRfa2V5IjogIkRhdGEgRmVl
ZGVyOiBBcnRpZmFjdCIsICJsb2dpY190eXBlIjogImFsbCJ9LCB7ImlkIjogMjgsICJuYW1lIjog
IkRhdGEgRmVlZGVyOiBBdHRhY2htZW50IiwgInR5cGUiOiAwLCAib2JqZWN0X3R5cGUiOiAiYXR0
YWNobWVudCIsICJjb25kaXRpb25zIjogW10sICJhdXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9k
ZXN0aW5hdGlvbnMiOiBbImZlZWRfZGF0YSJdLCAid29ya2Zsb3dzIjogW10sICJ2aWV3X2l0ZW1z
IjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiMmI2MjhiOGMtMWI1Mi00
ZTUxLWE1ZjMtYzMyM2Q3ZmYwMzdlIiwgImV4cG9ydF9rZXkiOiAiRGF0YSBGZWVkZXI6IEF0dGFj
aG1lbnQiLCAibG9naWNfdHlwZSI6ICJhbGwifSwgeyJpZCI6IDI5LCAibmFtZSI6ICJEYXRhIEZl
ZWRlcjogSW5jaWRlbnQiLCAidHlwZSI6IDAsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJj
b25kaXRpb25zIjogW10sICJhdXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMi
OiBbImZlZWRfZGF0YSJdLCAid29ya2Zsb3dzIjogW10sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1l
b3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNWJjMGI5OWItOGY4Ny00OGRlLTk3ZDktOTMz
M2YxMTM5ZDVkIiwgImV4cG9ydF9rZXkiOiAiRGF0YSBGZWVkZXI6IEluY2lkZW50IiwgImxvZ2lj
X3R5cGUiOiAiYWxsIn0sIHsiaWQiOiAzMCwgIm5hbWUiOiAiRGF0YSBGZWVkZXI6IE1pbGVzdG9u
ZSIsICJ0eXBlIjogMCwgIm9iamVjdF90eXBlIjogIm1pbGVzdG9uZSIsICJjb25kaXRpb25zIjog
W10sICJhdXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImZlZWRfZGF0
YSJdLCAid29ya2Zsb3dzIjogW10sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMi
OiA4NjQwMCwgInV1aWQiOiAiYzdmY2FmNTAtNDQwMi00YzYyLTk1NTItYzI2ZGY2ZTViZTliIiwg
ImV4cG9ydF9rZXkiOiAiRGF0YSBGZWVkZXI6IE1pbGVzdG9uZSIsICJsb2dpY190eXBlIjogImFs
bCJ9LCB7ImlkIjogMzEsICJuYW1lIjogIkRhdGEgRmVlZGVyOiBOb3RlIiwgInR5cGUiOiAwLCAi
b2JqZWN0X3R5cGUiOiAibm90ZSIsICJjb25kaXRpb25zIjogW10sICJhdXRvbWF0aW9ucyI6IFtd
LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImZlZWRfZGF0YSJdLCAid29ya2Zsb3dzIjogW10s
ICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNzgw
ZjJlYmUtOWFhYy00MWU5LTk4YWItNzA2ODhhYzlhZjdhIiwgImV4cG9ydF9rZXkiOiAiRGF0YSBG
ZWVkZXI6IE5vdGUiLCAibG9naWNfdHlwZSI6ICJhbGwifSwgeyJpZCI6IDMyLCAibmFtZSI6ICJE
YXRhIEZlZWRlcjogU3luYyBJbmNpZGVudHMiLCAidHlwZSI6IDEsICJvYmplY3RfdHlwZSI6ICJp
bmNpZGVudCIsICJjb25kaXRpb25zIjogW10sICJhdXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9k
ZXN0aW5hdGlvbnMiOiBbXSwgIndvcmtmbG93cyI6IFsiZGF0YV9mZWVkZXJfc3luY19pbmNpZGVu
dHMiXSwgInZpZXdfaXRlbXMiOiBbeyJzdGVwX2xhYmVsIjogbnVsbCwgInNob3dfaWYiOiBudWxs
LCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiYWN0aW9uaW52b2NhdGlv
biIsICJjb250ZW50IjogImNjNTMyYTIyLWU5MGYtNDZlNC05MTlhLTBhZDEyOTY3OTZiZiIsICJz
aG93X2xpbmtfaGVhZGVyIjogZmFsc2V9LCB7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19pZiI6
IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJhY3Rpb25pbnZv
Y2F0aW9uIiwgImNvbnRlbnQiOiAiM2UyZTkzZGUtNmJhNS00YWRmLWIwNDQtNjZhNDYwOWRkNzdk
IiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93
X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogImFjdGlv
bmludm9jYXRpb24iLCAiY29udGVudCI6ICI3ZWQzYWYwMy1kM2IzLTQxZWQtYTcyMS05NzA1NDM0
NjM1OTgiLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfV0sICJ0aW1lb3V0X3NlY29uZHMiOiA4
NjQwMCwgInV1aWQiOiAiMTc0YWJjMTgtZGM3Mi00MTMwLWE1YzgtNjQyMWZiNDQ5ZjEyIiwgImV4
cG9ydF9rZXkiOiAiRGF0YSBGZWVkZXI6IFN5bmMgSW5jaWRlbnRzIiwgImxvZ2ljX3R5cGUiOiAi
YWxsIn0sIHsiaWQiOiAzMywgIm5hbWUiOiAiRGF0YSBGZWVkZXI6IFRhc2siLCAidHlwZSI6IDAs
ICJvYmplY3RfdHlwZSI6ICJ0YXNrIiwgImNvbmRpdGlvbnMiOiBbXSwgImF1dG9tYXRpb25zIjog
W10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFsiZmVlZF9kYXRhIl0sICJ3b3JrZmxvd3MiOiBb
XSwgInZpZXdfaXRlbXMiOiBbXSwgInRpbWVvdXRfc2Vjb25kcyI6IDg2NDAwLCAidXVpZCI6ICJl
ZTBkOTJlZS1lNTNkLTRlYmQtYTI4Zi1kZjk1OWU5NDllZDciLCAiZXhwb3J0X2tleSI6ICJEYXRh
IEZlZWRlcjogVGFzayIsICJsb2dpY190eXBlIjogImFsbCJ9XSwgImxheW91dHMiOiBbXSwgIm5v
dGlmaWNhdGlvbnMiOiBudWxsLCAidGltZWZyYW1lcyI6IG51bGwsICJpbmR1c3RyaWVzIjogbnVs
bCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiZ2VvcyI6IG51bGwsICJmdW5jdGlvbnMiOiBbeyJpZCI6
IDEsICJuYW1lIjogImRhdGFfZmVlZGVyX3N5bmNfaW5jaWRlbnRzIiwgImRlc2NyaXB0aW9uIjog
eyJmb3JtYXQiOiAidGV4dCIsICJjb250ZW50IjogIlN5bmNocm9uaXplIEluY2lkZW50KHMpIGFu
ZCB0aGVpciBhc3NvY2lhdGVkIHRhc2tzLCBub3RlcywgYXR0YWNobWVudHMsIGFydGlmYWN0cywg
bWlsZXN0b25lcyBhbmQgYXNzb2NpYXRlZCBkYXRhdGFibGVzIn0sICJ1dWlkIjogIjdmZmVkNGU1
LTcyZmItNDE2Mi1iZGVmLTRlYTNlYmZhODlkZSIsICJ2ZXJzaW9uIjogMSwgImNyZWF0b3IiOiB7
ImlkIjogNSwgInR5cGUiOiAidXNlciIsICJuYW1lIjogImFAZXhhbXBsZS5jb20iLCAiZGlzcGxh
eV9uYW1lIjogImFibGUgYmFrZXIifSwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0aW9uIjogbnVs
bCwgInV1aWQiOiBudWxsLCAid29ya2Zsb3dfaWQiOiAxLCAibmFtZSI6ICJEYXRhIEZlZWRlcjog
U3luYyBJbmNpZGVudHMiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZGF0YV9mZWVkZXJfc3luY19p
bmNpZGVudHMiLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiYWN0aW9ucyI6IFtdfV0sICJk
aXNwbGF5X25hbWUiOiAiRGF0YSBGZWVkZXI6IFN5bmMgSW5jaWRlbnRzIiwgImRlc3RpbmF0aW9u
X2hhbmRsZSI6ICJmZWVkX2RhdGEiLCAiZXhwb3J0X2tleSI6ICJkYXRhX2ZlZWRlcl9zeW5jX2lu
Y2lkZW50cyIsICJsYXN0X21vZGlmaWVkX2J5IjogeyJpZCI6IDUsICJ0eXBlIjogInVzZXIiLCAi
bmFtZSI6ICJhQGV4YW1wbGUuY29tIiwgImRpc3BsYXlfbmFtZSI6ICJhYmxlIGJha2VyIn0sICJs
YXN0X21vZGlmaWVkX3RpbWUiOiAxNTU4MzU1OTA4Mzg1LCAidmlld19pdGVtcyI6IFt7InN0ZXBf
bGFiZWwiOiBudWxsLCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAi
ZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgImNvbnRlbnQiOiAiYjgwZDExZDQtOWM2Yi00Y2Q3
LTk1MWEtNGZlOGM1NzJjOWVmIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9s
YWJlbCI6IG51bGwsICJzaG93X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJm
aWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAiY29udGVudCI6ICJlNzgyMGU0NC00MDg3LTRjZTIt
ODRhZi0wZmU5MzYzMGEwM2MiLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xh
YmVsIjogbnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZp
ZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogIjczMWU5NGZmLTgyMmYtNDhmMS04
M2E5LWE3ODM4MGZkNjM2YiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XX1dLCAic2VydmVy
X3ZlcnNpb24iOiB7Im1ham9yIjogMzAsICJtaW5vciI6IDAsICJidWlsZF9udW1iZXIiOiAzNDM4
LCAidmVyc2lvbiI6ICIzMC4wLjM0MzgifSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJl
eHBvcnRfZGF0ZSI6IDE1NTgzNTcwNzc5NjAsICJpbmNpZGVudF90eXBlcyI6IFt7InVwZGF0ZV9k
YXRlIjogMTU1ODM1NzA3ODcwNSwgImNyZWF0ZV9kYXRlIjogMTU1ODM1NzA3ODcwNSwgInV1aWQi
OiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImRlc2NyaXB0aW9uIjog
IkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3Rv
bWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFj
a2FnZXMgKGludGVybmFsKSIsICJlbmFibGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxzZSwgInBh
cmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZSwgImlkIjogMH1dLCAiYXV0b21hdGljX3Rh
c2tzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7Im5hbWUiOiAiZmVlZF9kYXRhIiwg
InByb2dyYW1tYXRpY19uYW1lIjogImZlZWRfZGF0YSIsICJkZXN0aW5hdGlvbl90eXBlIjogMCwg
ImV4cGVjdF9hY2siOiB0cnVlLCAidXNlcnMiOiBbImFAZXhhbXBsZS5jb20iXSwgInV1aWQiOiAi
ZTA1MjgyZmItNmNmYy00NzA5LWFmODQtY2Q3MTQzODU4MWM4IiwgImV4cG9ydF9rZXkiOiAiZmVl
ZF9kYXRhIn1dLCAidGFza19vcmRlciI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJ0eXBlcyI6
IFtdLCAic2NyaXB0cyI6IFtdLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgIndvcmtm
bG93cyI6IFt7ImRlc2NyaXB0aW9uIjogIlN5bmNocm9uaXplIEluY2lkZW50KHMpIGFuZCB0aGVp
ciBhc3NvY2lhdGVkIHRhc2tzLCBub3RlcywgYXR0YWNobWVudHMsIGFydGlmYWN0cywgbWlsZXN0
b25lcyBhbmQgYXNzb2NpYXRlZCBkYXRhdGFibGVzIiwgInV1aWQiOiAiNDMzNzA2YTUtMmI2MS00
OGQ4LTliMTMtYjQyNDYyYTRlOTA5IiwgIndvcmtmbG93X2lkIjogMSwgIm5hbWUiOiAiRGF0YSBG
ZWVkZXI6IFN5bmMgSW5jaWRlbnRzIiwgInByb2dyYW1tYXRpY19uYW1lIjogImRhdGFfZmVlZGVy
X3N5bmNfaW5jaWRlbnRzIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImNyZWF0b3JfaWQi
OiAiYUBleGFtcGxlLmNvbSIsICJsYXN0X21vZGlmaWVkX2J5IjogImFAZXhhbXBsZS5jb20iLCAi
bGFzdF9tb2RpZmllZF90aW1lIjogMTU1ODM1NjUxMzkzNCwgImV4cG9ydF9rZXkiOiAiZGF0YV9m
ZWVkZXJfc3luY19pbmNpZGVudHMiLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImRhdGFfZmVlZGVyX3N5bmNfaW5jaWRlbnRzXCIgaXNFeGVj
dXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJEYXRhIEZlZWRlcjogU3luYyBJbmNpZGVudHNcIj48ZG9j
dW1lbnRhdGlvbj5TeW5jaHJvbml6ZSBJbmNpZGVudChzKSBhbmQgdGhlaXIgYXNzb2NpYXRlZCB0
YXNrcywgbm90ZXMsIGF0dGFjaG1lbnRzLCBhcnRpZmFjdHMsIG1pbGVzdG9uZXMgYW5kIGFzc29j
aWF0ZWQgZGF0YXRhYmxlczwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZl
bnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMWd2bG52Zzwvb3V0Z29pbmc+PC9z
dGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzB5b2Y3aGlcIiBuYW1lPVwi
RGF0YSBGZWVkZXI6IFN5bmMgSW5jaWRlbnRzXCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwi
PjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI3ZmZlZDRlNS03
MmZiLTQxNjItYmRlZi00ZWEzZWJmYTg5ZGVcIj57XCJpbnB1dHNcIjp7fSxcInByZV9wcm9jZXNz
aW5nX3NjcmlwdFwiOlwidHJ5OlxcbiAgaW5wdXRzLmRmX21pbl9pbmNpZGVudF9pZCA9IHJ1bGUu
cHJvcGVydGllcy5kYXRhX2ZlZWRlcl9taW5pbXVtX2luY2lkZW50X2lkXFxuICBpbnB1dHMuZGZf
bWF4X2luY2lkZW50X2lkID0gcnVsZS5wcm9wZXJ0aWVzLmRhdGFfZmVlZGVyX21heGltdW1faW5j
aWRlbnRfaWRcXG4gIGlucHV0cy5kZl9xdWVyeV9hcGlfbWV0aG9kID0gcnVsZS5wcm9wZXJ0aWVz
LnF1ZXJ5X2FwaV9tZXRob2RcXG5leGNlcHQ6XFxuICBoZWxwZXIuZmFpbChcXFwiVGhpcyB2ZXJz
aW9uIG9mIFJlc2lsaWVudCBjYW5ub3QgdXNlIHRoaXMgZnVuY3Rpb25cXFwiKVxcbiAgXCIsXCJy
ZXN1bHRfbmFtZVwiOlwiXCIsXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCIjIHsndmVyc2lv
bic6ICcxLjAnLCAnc3VjY2Vzcyc6IFRydWUsICdyZWFzb24nOiBOb25lLCAnY29udGVudCc6IHsn
bnVtX29mX3N5bmNfaW5jaWRlbnRzJzogMn0sICdyYXcnOiAne1xcXCJudW1fb2Zfc3luY19pbmNp
ZGVudHNcXFwiOiAyfScsICdpbnB1dHMnOiB7J2RmX21heF9pbmNpZGVudF9pZCc6IE5vbmUsICdk
Zl9taW5faW5jaWRlbnRfaWQnOiAwfSwgJ21ldHJpY3MnOiB7J3ZlcnNpb24nOiAnMS4wJywgJ3Bh
Y2thZ2UnOiAndW5rbm93bicsICdwYWNrYWdlX3ZlcnNpb24nOiAndW5rbm93bicsICdob3N0Jzog
J01hcmtzLU1CUC5maW9zLXJvdXRlci5ob21lJywgJ2V4ZWN1dGlvbl90aW1lX21zJzogMjA2Miwg
J3RpbWVzdGFtcCc6ICcyMDE5LTA1LTE0IDIxOjM3OjA1J319XFxuaW5jaWRlbnQuYWRkTm90ZShc
XFwiRGF0YSBGZWVkZXIgU3luY1xcXFxuTWluOiB7fSBNYXg6IHt9XFxcXG5JbmNpZGVudHMgU3lu
YydkOiB7fVxcXCIuZm9ybWF0KFxcbiAgICAgICByZXN1bHRzWydpbnB1dHMnXVsnZGZfbWluX2lu
Y2lkZW50X2lkJ10sIFxcbiAgICAgICByZXN1bHRzWydpbnB1dHMnXVsnZGZfbWF4X2luY2lkZW50
X2lkJ10sXFxuICAgICAgIHJlc3VsdHNbJ2NvbnRlbnQnXVsnbnVtX29mX3N5bmNfaW5jaWRlbnRz
J10pKVwifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5n
PlNlcXVlbmNlRmxvd18xZ3ZsbnZnPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzFn
N2Q2OTc8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNl
Rmxvd18xZ3ZsbnZnXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVm
PVwiU2VydmljZVRhc2tfMHlvZjdoaVwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8xdmd3MThm
XCI+PGluY29taW5nPlNlcXVlbmNlRmxvd18xZzdkNjk3PC9pbmNvbWluZz48L2VuZEV2ZW50Pjxz
ZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMWc3ZDY5N1wiIHNvdXJjZVJlZj1cIlNlcnZp
Y2VUYXNrXzB5b2Y3aGlcIiB0YXJnZXRSZWY9XCJFbmRFdmVudF8xdmd3MThmXCIvPjx0ZXh0QW5u
b3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdv
cmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3Nv
Y2lhdGlvbl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0
UmVmPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0
QW5ub3RhdGlvbl8wMzMzNGNiXCI+PHRleHQ+Q3JlYXRlcyBhbiBpbmNpZGVudCBub3RlIHdpdGgg
bnVtYmVyIG9mIGluY2lkZW50cyBzeW5jaHJvbml6ZWQ8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48
YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8wN3RidXprXCIgc291cmNlUmVmPVwiU2Vydmlj
ZVRhc2tfMHlvZjdoaVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzAzMzM0Y2JcIi8+PHRl
eHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWx2YnY2MlwiPjx0ZXh0PklucHV0IGZy
b20gUnVsZSBhY3Rpdml0eSBmaWVsZHM8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRp
b24gaWQ9XCJBc3NvY2lhdGlvbl8wbmlpendkXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMHlv
ZjdoaVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFsdmJ2NjJcIi8+PC9wcm9jZXNzPjxi
cG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1OUGxhbmUg
YnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5kaTpCUE1O
U2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0RXZlbnRf
MTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1c
IjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQTU5MYWJl
bD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0
QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2RpXCI+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1cIjI1NFwi
Lz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29j
aWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48b21nZGk6d2F5
cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIwXCIvPjxvbWdk
aTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyNTRcIi8+
PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTZXJ2aWNl
VGFza18weW9mN2hpXCIgaWQ9XCJTZXJ2aWNlVGFza18weW9mN2hpX2RpXCI+PG9tZ2RjOkJvdW5k
cyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjI5MVwiIHk9XCIxNjZcIi8+PC9icG1u
ZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3df
MWd2bG52Z1wiIGlkPVwiU2VxdWVuY2VGbG93XzFndmxudmdfZGlcIj48b21nZGk6d2F5cG9pbnQg
eD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlw
b2ludCB4PVwiMjkxXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5k
aTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIy
NDQuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMXZndzE4ZlwiIGlkPVwiRW5k
RXZlbnRfMXZndzE4Zl9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2
XCIgeD1cIjQ2OC41MjcxNjQ2ODU5MDgzXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjQ4Ni41MjcxNjQ2ODU5
MDgzXCIgeT1cIjIyN1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMWc3ZDY5N1wiIGlkPVwi
U2VxdWVuY2VGbG93XzFnN2Q2OTdfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjM5MVwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDY5XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI0MzBcIiB5PVwiMTg0XCIv
PjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBi
cG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzAzMzM0Y2JcIiBpZD1cIlRleHRBbm5vdGF0aW9u
XzAzMzM0Y2JfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjU5XCIgd2lkdGg9XCIxNzZcIiB4
PVwiMzg0XCIgeT1cIjY3XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJw
bW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMDd0YnV6a1wiIGlkPVwiQXNzb2NpYXRpb25fMDd0YnV6
a19kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMzg1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIxNzBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0MzhcIiB4c2k6dHlwZT1cIm9tZ2RjOlBv
aW50XCIgeT1cIjEyNlwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1u
RWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFsdmJ2NjJcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFs
dmJ2NjJfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjQ2XCIgd2lkdGg9XCIxMzNcIiB4PVwi
MTQ1XCIgeT1cIjgyXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5F
bGVtZW50PVwiQXNzb2NpYXRpb25fMG5paXp3ZFwiIGlkPVwiQXNzb2NpYXRpb25fMG5paXp3ZF9k
aVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMjk2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCIxNzFcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyNDFcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50
XCIgeT1cIjEyOFwiLz48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1u
ZGk6QlBNTkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAidmVyc2lvbiI6IDQsICJ3b3JrZmxvd19p
ZCI6ICJkYXRhX2ZlZWRlcl9zeW5jX2luY2lkZW50cyJ9LCAiYWN0aW9ucyI6IFtdfV0sICJyb2xl
cyI6IFtdLCAid29ya3NwYWNlcyI6IFtdfQ==
"""
    )