# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_phish_ai"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_phish_ai package"""
    reload_params = {"package": u"fn_phish_ai",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"artifact_value", u"phishai_scan_id"], 
                    "datatables": [], 
                    "message_destinations": [u"phish_ai_message_destination"], 
                    "functions": [u"phish_ai_get_report", u"phish_ai_scan_url"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_phishai_scan_url"], 
                    "actions": [u"Example: Phish.AI URL scan"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     artifact_value
    #     phishai_scan_id
    #   Message Destinations:
    #     phish_ai_message_destination
    #   Functions:
    #     phish_ai_get_report
    #     phish_ai_scan_url
    #   Workflows:
    #     example_phishai_scan_url
    #   Rules:
    #     Example: Phish.AI URL scan


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMCwgImJ1aWxkX251bWJl
ciI6IDQyNTQsICJ2ZXJzaW9uIjogIjMxLjAuNDI1NCJ9LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9u
IjogMiwgImlkIjogNDAsICJleHBvcnRfZGF0ZSI6IDE1NDUxNTI1NjE1MjMsICJmaWVsZHMiOiBb
eyJpZCI6IDM4LCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAidGV4dCI6ICJTaW11bGF0aW9uIiwg
InByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMCwgInRvb2x0aXAiOiAiV2hldGhlciB0aGUgaW5j
aWRlbnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVndWxhciBpbmNpZGVudC4gIFRoaXMgZmllbGQg
aXMgcmVhZC1vbmx5LiIsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjog
ImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJvcGVyYXRpb25zIjogW10s
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVhZF9vbmx5IjogdHJ1ZSwg
ImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogImlu
Y2lkZW50L2luY190cmFpbmluZyIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJlY2F0ZWQiOiBmYWxz
ZX0sIHsiaWQiOiA5NywgIm5hbWUiOiAiYXJ0aWZhY3RfdmFsdWUiLCAidGV4dCI6ICJhcnRpZmFj
dF92YWx1ZSIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRpcCI6ICIiLCAi
cGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4dCIsICJoaWRlX25vdGlmaWNhdGlv
biI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBm
YWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAi
YjA5ZTE4OTktNzQ1Mi00ZjRmLWJkZTEtMjNiMmZiY2NkOTA0IiwgIm9wZXJhdGlvbnMiOiBbXSwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwg
ImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9f
ZnVuY3Rpb24vYXJ0aWZhY3RfdmFsdWUiLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjog
ZmFsc2V9LCB7ImlkIjogMzgyLCAibmFtZSI6ICJwaGlzaGFpX3NjYW5faWQiLCAidGV4dCI6ICJw
aGlzaGFpX3NjYW5faWQiLCAicHJlZml4IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRvb2x0aXAi
OiAiIiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogInRleHQiLCAiaGlkZV9ub3Rp
ZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1
dWlkIjogImI2YWMyYWRiLTcxZjMtNGQzMy1hYjcxLWU2YTM2MjMxOTI2ZSIsICJvcGVyYXRpb25z
IjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVhZF9vbmx5Ijog
ZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tl
eSI6ICJfX2Z1bmN0aW9uL3BoaXNoYWlfc2Nhbl9pZCIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRlcHJl
Y2F0ZWQiOiBmYWxzZX1dLCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1NDUx
NTI2NTE4NzcsICJjcmVhdGVfZGF0ZSI6IDE1NDUxNTI2NTE4NzcsICJ1dWlkIjogImJmZWVjMmQ0
LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0
aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBh
Y2thZ2VzIChpbnRlcm5hbCkiLCAibmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRl
cm5hbCkiLCAiZW5hYmxlZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBu
dWxsLCAiaGlkZGVuIjogZmFsc2UsICJpZCI6IDB9XSwgInBoYXNlcyI6IFtdLCAiYXV0b21hdGlj
X3Rhc2tzIjogW10sICJvdmVycmlkZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3si
bmFtZSI6ICJQaGlzaCBBSSBNZXNzYWdlIERlc3RpbmF0aW9uIiwgInByb2dyYW1tYXRpY19uYW1l
IjogInBoaXNoX2FpX21lc3NhZ2VfZGVzdGluYXRpb24iLCAiZGVzdGluYXRpb25fdHlwZSI6IDAs
ICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJhZG1pbkBjbzNzeXMuY29tIl0sICJ1dWlk
IjogIjRjN2UxMGJkLTU4NjUtNDVlMS05MGJmLTBiNjBjY2Q3OTU2MyIsICJleHBvcnRfa2V5Ijog
InBoaXNoX2FpX21lc3NhZ2VfZGVzdGluYXRpb24ifV0sICJhY3Rpb25zIjogW3siaWQiOiAxMjYs
ICJuYW1lIjogIkV4YW1wbGU6IFBoaXNoLkFJIFVSTCBzY2FuIiwgInR5cGUiOiAxLCAib2JqZWN0
X3R5cGUiOiAiYXJ0aWZhY3QiLCAiY29uZGl0aW9ucyI6IFt7Im1ldGhvZCI6ICJlcXVhbHMiLCAi
ZmllbGRfbmFtZSI6ICJhcnRpZmFjdC50eXBlIiwgInZhbHVlIjogIlVSTCIsICJ0eXBlIjogbnVs
bCwgImV2YWx1YXRpb25faWQiOiBudWxsfV0sICJhdXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9k
ZXN0aW5hdGlvbnMiOiBbXSwgIndvcmtmbG93cyI6IFsiZXhhbXBsZV9waGlzaGFpX3NjYW5fdXJs
Il0sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAi
ZmU4YWUzOWItODhlMy00ZGMyLTliMTUtYzhmY2MyMTk0NjcwIiwgImV4cG9ydF9rZXkiOiAiRXhh
bXBsZTogUGhpc2guQUkgVVJMIHNjYW4iLCAibG9naWNfdHlwZSI6ICJhbGwifV0sICJsYXlvdXRz
IjogW10sICJub3RpZmljYXRpb25zIjogbnVsbCwgInRpbWVmcmFtZXMiOiBudWxsLCAibG9jYWxl
IjogbnVsbCwgImluZHVzdHJpZXMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJnZW9zIjog
bnVsbCwgInRhc2tfb3JkZXIiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAidHlwZXMiOiBbXSwg
InNjcmlwdHMiOiBbXSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJ3b3JrZmxvd3Mi
OiBbeyJ3b3JrZmxvd19pZCI6IDEwMCwgIm5hbWUiOiAiRXhhbXBsZTogUGhpc2guQUkgU2NhbiBV
UkwiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9waGlzaGFpX3NjYW5fdXJsIiwgIm9i
amVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2NyaXB0aW9uIjogIlNjYW5zIFVSTCB1c2luZyBQ
aGlzaC5BSSBhbmQgcmV0dXJucyBhIHJlcG9ydCBiYXNlZCBvbiB0aGUgcmVzdWx0cy4iLCAiY3Jl
YXRvcl9pZCI6ICJhZG1pbkBjbzNzeXMuY29tIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAiYWRtaW5A
Y28zc3lzLmNvbSIsICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQ1MTUyNDYzNDk5LCAiZXhwb3J0
X2tleSI6ICJleGFtcGxlX3BoaXNoYWlfc2Nhbl91cmwiLCAidXVpZCI6ICIwMTMxMWNhOC1iOWNj
LTRjMTQtYjliYy05ZWUxMTRkNDc0YjQiLCAiY29udGVudCI6IHsid29ya2Zsb3dfaWQiOiAiZXhh
bXBsZV9waGlzaGFpX3NjYW5fdXJsIiwgInhtbCI6ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5j
b2Rpbmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3Lm9tZy5vcmcv
c3BlYy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93d3cub21nLm9y
Zy9zcGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDovL3Jlc2lsaWVu
dC5pYm0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3Rh
bmNlXCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90ZXN0XCI+PHBy
b2Nlc3MgaWQ9XCJleGFtcGxlX3BoaXNoYWlfc2Nhbl91cmxcIiBpc0V4ZWN1dGFibGU9XCJ0cnVl
XCIgbmFtZT1cIkV4YW1wbGU6IFBoaXNoLkFJIFNjYW4gVVJMXCI+PGRvY3VtZW50YXRpb24+U2Nh
bnMgVVJMIHVzaW5nIFBoaXNoLkFJIGFuZCByZXR1cm5zIGEgcmVwb3J0IGJhc2VkIG9uIHRoZSBy
ZXN1bHRzLjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4
bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMWs1dzB0bjwvb3V0Z29pbmc+PC9zdGFydEV2ZW50
PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzAzbGxzYWJcIiBuYW1lPVwiUGhpc2guQUkg
U2NhbiBVUkxcIiByZXNpbGllbnQ6dHlwZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRz
PjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVpZD1cImVkMjNiOTA0LWZkMmUtNGQ3My1iNjQ1LWQ1ZmE0
ZmNiNGJhMFwiPntcImlucHV0c1wiOnt9LFwicG9zdF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiXFxc
IlxcXCJcXFwiXFxuRXhhbXBsZSByZXNwb25zZVxcblxcbnsgIFxcbiAgIFxcXCJjb250ZW50XFxc
Ijp7ICBcXG4gICAgICBcXFwidXJsXFxcIjpcXFwiaHR0cHM6Ly9zdGFydHVwNDE3LmdiLm5ldC9N
Mz9tZXMxPWFzZGZAYXNkZi5jb21cXFwiLFxcbiAgICAgIFxcXCJzY2FuX2lkXFxcIjpcXFwiZ0dC
U2FWdmxONXFjNVBjd3ZudVRcXFwiXFxuICAgfSxcXG4gICBcXFwiaW5wdXRzXFxcIjp7ICBcXG4g
ICAgICBcXFwiYXJ0aWZhY3RfdmFsdWVcXFwiOlxcXCJodHRwczovL3N0YXJ0dXA0MTcuZ2IubmV0
L00zP21lczE9YXNkZkBhc2RmLmNvbVxcXCJcXG4gICB9LFxcbiAgIFxcXCJydW5fdGltZVxcXCI6
XFxcIjAuNDQ2MTgxMDU4ODg0XFxcIlxcbn1cXG5cXFwiXFxcIlxcXCJcIixcInByZV9wcm9jZXNz
aW5nX3NjcmlwdFwiOlwiaW5wdXRzLmFydGlmYWN0X3ZhbHVlID0gYXJ0aWZhY3QudmFsdWVcIixc
InJlc3VsdF9uYW1lXCI6XCJwaGlzaGFpX3NjYW5fb3V0cHV0XCJ9PC9yZXNpbGllbnQ6ZnVuY3Rp
b24+PC9leHRlbnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzFrNXcwdG48L2lu
Y29taW5nPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMGhjbW1hczwvb3V0Z29pbmc+PC9zZXJ2aWNl
VGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzFrNXcwdG5cIiBzb3VyY2VSZWY9
XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18wM2xsc2FiXCIv
PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzEyMjlwbG9cIiBuYW1lPVwiUGhpc2guQUkg
R2V0IFJlcG9ydFwiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVu
dHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiMDFlNGUxMTUtMzMzYS00NWE0LTllMDEtZjQ3
MGFhYzU0ZDMzXCI+e1wiaW5wdXRzXCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJp
ZiByZXN1bHRzLmNvbnRlbnQ6XFxuICBub3RlID0gXFxcIlBoaXNoLkFJIHVybDogXFxcIiArIHJl
c3VsdHMuY29udGVudC51cmxcXG4gIG5vdGUgPSBub3RlICsgXFxcIiZsdDtici8mZ3Q7UGhpc2gu
QUkgdmVyZGljdDogXFxcIiArIHJlc3VsdHMuY29udGVudC52ZXJkaWN0XFxuICBub3RlID0gbm90
ZSArIFxcXCImbHQ7YnIvJmd0OyZsdDthIGhyZWY9XFxcXFxcXCJodHRwczovL2FwcC5waGlzaC5h
aS9pbmNpZGVudC97fVxcXFxcXFwiJmd0O1BoaXNoLkFJIHJlcG9ydCBsaW5rJmx0Oy9hJmd0O1xc
XCIuZm9ybWF0KHJlc3VsdHMuaW5wdXRzLnBoaXNoYWlfc2Nhbl9pZClcXG4gIGluY2lkZW50LmFk
ZE5vdGUoaGVscGVyLmNyZWF0ZVJpY2hUZXh0KG5vdGUpKVxcblxcblxcblxcXCJcXFwiXFxcIlxc
bkV4YW1wbGUgUmVzcG9uc2VcXG5cXG57ICBcXG4gICBcXFwiY29udGVudFxcXCI6eyAgXFxuICAg
ICAgXFxcInN0YXR1c1xcXCI6XFxcImNvbXBsZXRlZFxcXCIsXFxuICAgICAgXFxcImRvbWFpblxc
XCI6XFxcInN0YXJ0dXA0MTcuZ2IubmV0XFxcIixcXG4gICAgICBcXFwidXNlcl9hZ2VudFxcXCI6
XFxcIk1vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChL
SFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzY0LjAuMzI4Mi4xNDAgU2FmYXJpLzUzNy4zNlxcXCIs
XFxuICAgICAgXFxcInRhcmdldFxcXCI6XFxcIk1pY3Jvc29mdFxcXCIsXFxuICAgICAgXFxcInRp
dGxlXFxcIjpcXFwic2lnbl9pbl90b195b3VyX21pY3Jvc29mdF9hY2NvdW50XFxcIixcXG4gICAg
ICBcXFwidXJsXFxcIjpcXFwiaHR0cHM6Ly9zdGFydHVwNDE3LmdiLm5ldC9NMz9tZXMxPWFzZGZA
YXNkZi5jb21cXFwiLFxcbiAgICAgIFxcXCJ0aW1lXFxcIjpcXFwiMjAxOC0xMi0wNlQyMjozOToz
NC4yMTBaXFxcIixcXG4gICAgICBcXFwidmVyZGljdFxcXCI6XFxcIm1hbGljaW91c1xcXCIsXFxu
ICAgICAgXFxcInBsYW5cXFwiOlxcXCJmcmVlXFxcIixcXG4gICAgICBcXFwidGxkXFxcIjpcXFwi
bmV0XFxcIixcXG4gICAgICBcXFwiaXNvX2NvZGVcXFwiOlxcXCJVU1xcXCIsXFxuICAgICAgXFxc
ImZpcnN0X3NlZW5cXFwiOlxcXCIyMDE4LTEyLTA2VDE5OjE2OjIwLjgyNVpcXFwiLFxcbiAgICAg
IFxcXCJpcF9hZGRyZXNzXFxcIjpcXFwiMTA0LjI0LjEwNC4xMTZcXFwiLFxcbiAgICAgIFxcXCJh
c25cXFwiOjEzMzM1LFxcbiAgICAgIFxcXCJ1c2VyX2VtYWlsXFxcIjpcXFwiYXBpXFxcIixcXG4g
ICAgICBcXFwidXNlclxcXCI6XFxcImZyZWUtYXBpXFxcIlxcbiAgIH0sXFxuICAgXFxcImlucHV0
c1xcXCI6eyAgXFxuICAgICAgXFxcInBoaXNoYWlfc2Nhbl9pZFxcXCI6XFxcImdHQlNhVnZsTjVx
YzVQY3d2bnVUXFxcIlxcbiAgIH0sXFxuICAgXFxcInJ1bl90aW1lXFxcIjpcXFwiMC40MTkzNzI3
OTcwMTJcXFwiXFxufVxcblxcXCJcXFwiXFxcIlwiLFwicHJlX3Byb2Nlc3Npbmdfc2NyaXB0XCI6
XCJpbnB1dHMucGhpc2hhaV9zY2FuX2lkID0gd29ya2Zsb3cucHJvcGVydGllcy5waGlzaGFpX3Nj
YW5fb3V0cHV0W1xcXCJjb250ZW50XFxcIl1bXFxcInNjYW5faWRcXFwiXVwifTwvcmVzaWxpZW50
OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18waGNt
bWFzPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB4NHlhOXI8L291dGdvaW5nPjwv
c2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18waGNtbWFzXCIgc291
cmNlUmVmPVwiU2VydmljZVRhc2tfMDNsbHNhYlwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzEy
MjlwbG9cIi8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMGhyemNsMFwiPjxpbmNvbWluZz5TZXF1
ZW5jZUZsb3dfMHg0eWE5cjwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwi
U2VxdWVuY2VGbG93XzB4NHlhOXJcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xMjI5cGxvXCIg
dGFyZ2V0UmVmPVwiRW5kRXZlbnRfMGhyemNsMFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0
QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0
PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwi
IHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0
aW9uXzFreHhpeXRcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWltY2h1
N1wiPjx0ZXh0PklucHV0IFVSTDwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBp
ZD1cIkFzc29jaWF0aW9uXzFiYmYxdTdcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wM2xsc2Fi
XCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWltY2h1N1wiLz48dGV4dEFubm90YXRpb24g
aWQ9XCJUZXh0QW5ub3RhdGlvbl8wZGV2MGd1XCI+PHRleHQ+T3V0cHV0cyByZXBvcnQgZnJvbSBQ
aGlzaC5BSTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0
aW9uXzE0eGV4b3FcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xMjI5cGxvXCIgdGFyZ2V0UmVm
PVwiVGV4dEFubm90YXRpb25fMGRldjBndVwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3Jh
bSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVu
ZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVu
dD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwi
Lz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkw
XCIgeD1cIjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5T
aGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhp
eXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5T
aGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwi
IGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY5XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIx
NTNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRn
ZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzAzbGxzYWJcIiBp
ZD1cIlNlcnZpY2VUYXNrXzAzbGxzYWJfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIg
d2lkdGg9XCIxMDBcIiB4PVwiMjQ2XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJw
bW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xazV3MHRuXCIgaWQ9XCJT
ZXF1ZW5jZUZsb3dfMWs1dzB0bl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyNDZcIiB4
c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21n
ZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjIyMlwiIHk9XCIxODQuNVwi
Lz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUg
YnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18xMjI5cGxvXCIgaWQ9XCJTZXJ2aWNlVGFza18xMjI5
cGxvX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjQz
MS4zMjUxNTg5NDY0MTIzM1wiIHk9XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMGhjbW1hc1wiIGlkPVwiU2VxdWVu
Y2VGbG93XzBoY21tYXNfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjM0NlwiIHhzaTp0eXBlPVwi
b21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDMxXCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJv
dW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIzODguNVwiIHk9XCIxODRcIi8+PC9i
cG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5F
bGVtZW50PVwiRW5kRXZlbnRfMGhyemNsMFwiIGlkPVwiRW5kRXZlbnRfMGhyemNsMF9kaVwiPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjYwNS4zMjUxNTg5NDY0
MTIzXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjEzXCIgd2lkdGg9XCIwXCIgeD1cIjYyMy4zMjUxNTg5NDY0MTIzXCIgeT1cIjIyN1wiLz48L2Jw
bW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVs
ZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMHg0eWE5clwiIGlkPVwiU2VxdWVuY2VGbG93XzB4NHlhOXJf
ZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjUzMVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNjA1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIx
M1wiIHdpZHRoPVwiMFwiIHg9XCI1NjhcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48
L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5v
dGF0aW9uXzFpbWNodTdcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFpbWNodTdfZGlcIj48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiMTMwXCIgeT1cIjg5Ljc3ODM5
MzM1MTgwMDU2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVt
ZW50PVwiQXNzb2NpYXRpb25fMWJiZjF1N1wiIGlkPVwiQXNzb2NpYXRpb25fMWJiZjF1N19kaVwi
PjxvbWdkaTp3YXlwb2ludCB4PVwiMjUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIx
NjlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxOTdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIg
eT1cIjEyMFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVu
dD1cIlRleHRBbm5vdGF0aW9uXzBkZXYwZ3VcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzBkZXYwZ3Vf
ZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiNTczXCIg
eT1cIjkwXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50
PVwiQXNzb2NpYXRpb25fMTR4ZXhvcVwiIGlkPVwiQXNzb2NpYXRpb25fMTR4ZXhvcV9kaVwiPjxv
bWdkaTp3YXlwb2ludCB4PVwiNTI4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNzNc
Ii8+PG9tZ2RpOndheXBvaW50IHg9XCI2MDJcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjEyMFwiLz48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBN
TkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAidmVyc2lvbiI6IDIxfSwgImFjdGlvbnMiOiBbXX1d
LCAicm9sZXMiOiBbXSwgIndvcmtzcGFjZXMiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImlkIjogNjAs
ICJuYW1lIjogInBoaXNoX2FpX2dldF9yZXBvcnQiLCAiZGlzcGxheV9uYW1lIjogIlBoaXNoLkFJ
IEdldCBSZXBvcnQiLCAiZGVzY3JpcHRpb24iOiB7ImZvcm1hdCI6ICJ0ZXh0IiwgImNvbnRlbnQi
OiAiUmV0dXJucyByZXBvcnQgb2YgYSBVUkwgc2NhbiBmcm9tIFBoaXNoLkFJLiJ9LCAiZGVzdGlu
YXRpb25faGFuZGxlIjogInBoaXNoX2FpX21lc3NhZ2VfZGVzdGluYXRpb24iLCAiZXhwb3J0X2tl
eSI6ICJwaGlzaF9haV9nZXRfcmVwb3J0IiwgInV1aWQiOiAiMDFlNGUxMTUtMzMzYS00NWE0LTll
MDEtZjQ3MGFhYzU0ZDMzIiwgInZlcnNpb24iOiAxLCAiY3JlYXRvciI6IHsiaWQiOiAxLCAidHlw
ZSI6ICJ1c2VyIiwgIm5hbWUiOiAiYWRtaW5AY28zc3lzLmNvbSIsICJkaXNwbGF5X25hbWUiOiAi
UmVzaWxpZW50IFN5c2FkbWluIn0sICJsYXN0X21vZGlmaWVkX2J5IjogeyJpZCI6IDEsICJ0eXBl
IjogInVzZXIiLCAibmFtZSI6ICJhZG1pbkBjbzNzeXMuY29tIiwgImRpc3BsYXlfbmFtZSI6ICJS
ZXNpbGllbnQgU3lzYWRtaW4ifSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDIwNTI1OTM5NTUs
ICJ2aWV3X2l0ZW1zIjogW3sic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2lmIjogbnVsbCwgImVs
ZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAiY29udGVu
dCI6ICJiNmFjMmFkYi03MWYzLTRkMzMtYWI3MS1lNmEzNjIzMTkyNmUiLCAic2hvd19saW5rX2hl
YWRlciI6IGZhbHNlfV0sICJ3b3JrZmxvd3MiOiBbeyJ3b3JrZmxvd19pZCI6IDEwMCwgIm5hbWUi
OiAiRXhhbXBsZTogUGhpc2guQUkgU2NhbiBVUkwiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhh
bXBsZV9waGlzaGFpX3NjYW5fdXJsIiwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2Ny
aXB0aW9uIjogbnVsbCwgInV1aWQiOiBudWxsLCAiYWN0aW9ucyI6IFtdfV19LCB7ImlkIjogNTks
ICJuYW1lIjogInBoaXNoX2FpX3NjYW5fdXJsIiwgImRpc3BsYXlfbmFtZSI6ICJQaGlzaC5BSSBT
Y2FuIFVSTCIsICJkZXNjcmlwdGlvbiI6IHsiZm9ybWF0IjogInRleHQiLCAiY29udGVudCI6ICJT
Y2FucyBVUkwgYWdhaW5zdCBQaGlzaC5BSS4ifSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJwaGlz
aF9haV9tZXNzYWdlX2Rlc3RpbmF0aW9uIiwgImV4cG9ydF9rZXkiOiAicGhpc2hfYWlfc2Nhbl91
cmwiLCAidXVpZCI6ICJlZDIzYjkwNC1mZDJlLTRkNzMtYjY0NS1kNWZhNGZjYjRiYTAiLCAidmVy
c2lvbiI6IDIsICJjcmVhdG9yIjogeyJpZCI6IDEsICJ0eXBlIjogInVzZXIiLCAibmFtZSI6ICJh
ZG1pbkBjbzNzeXMuY29tIiwgImRpc3BsYXlfbmFtZSI6ICJSZXNpbGllbnQgU3lzYWRtaW4ifSwg
Imxhc3RfbW9kaWZpZWRfYnkiOiB7ImlkIjogMSwgInR5cGUiOiAidXNlciIsICJuYW1lIjogImFk
bWluQGNvM3N5cy5jb20iLCAiZGlzcGxheV9uYW1lIjogIlJlc2lsaWVudCBTeXNhZG1pbiJ9LCAi
bGFzdF9tb2RpZmllZF90aW1lIjogMTU0MjA0NTk0MTIxMywgInZpZXdfaXRlbXMiOiBbeyJzdGVw
X2xhYmVsIjogbnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwg
ImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogImIwOWUxODk5LTc0NTItNGY0
Zi1iZGUxLTIzYjJmYmNjZDkwNCIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XSwgIndvcmtm
bG93cyI6IFt7IndvcmtmbG93X2lkIjogMTAwLCAibmFtZSI6ICJFeGFtcGxlOiBQaGlzaC5BSSBT
Y2FuIFVSTCIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3BoaXNoYWlfc2Nhbl91cmwi
LCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiZGVzY3JpcHRpb24iOiBudWxsLCAidXVpZCI6
IG51bGwsICJhY3Rpb25zIjogW119XX1dfQ==
"""
    )