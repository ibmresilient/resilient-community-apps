# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_maas360"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_maas360 package"""
    reload_params = {"package": u"fn_maas360",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"maas360_deviceid"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_maas360"], 
                    "functions": [u"maas360_locate_device"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_maas360_locate_device"], 
                    "actions": [u"Example: Maas360 Locate Device"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     maas360_deviceid
    #   Message Destinations:
    #     fn_maas360
    #   Functions:
    #     maas360_locate_device
    #   Workflows:
    #     example_maas360_locate_device
    #   Rules:
    #     Example: Maas360 Locate Device


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogImU3ZDg1YzQzLTE0NTYt
NDQwNC1hZDRlLTFiZGIyM2E4ZjUzNiIsICJkZXNjcmlwdGlvbiI6ICJGdW5jdGlvbiBwZXJmb3Jt
cyBhIHJlYWwtdGltZSBsb29rdXAgb24gQW5kcm9pZCBkZXZpY2VzIG9yXHUyMDI4IHByb3ZpZGVz
IExhc3QgS25vd24gbG9jYXRpb24gb24gaU9TIGFuZCBXaW5kb3dzIFBob25lIGRldmljZXMuIFRo
ZSByZXN1bHRzIGlzIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgaW5mb3JtYXRpb24uIiwgIm9iamVj
dF90eXBlIjogImFydGlmYWN0IiwgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9tYWFzMzYwX2xvY2F0
ZV9kZXZpY2UiLCAid29ya2Zsb3dfaWQiOiAxLCAibGFzdF9tb2RpZmllZF9ieSI6ICJhQGEuY29t
IiwgImNvbnRlbnQiOiB7InhtbCI6ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJV
VEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1O
LzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMv
QlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMv
REQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RE
LzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDovL3Jlc2lsaWVudC5pYm0uY29t
L2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYVwiIHht
bG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgdGFy
Z2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9
XCJleGFtcGxlX21hYXMzNjBfbG9jYXRlX2RldmljZVwiIGlzRXhlY3V0YWJsZT1cInRydWVcIiBu
YW1lPVwiRXhhbXBsZTogTWFhczM2MCBMb2NhdGUgRGV2aWNlXCI+PGRvY3VtZW50YXRpb24+RnVu
Y3Rpb24gcGVyZm9ybXMgYSByZWFsLXRpbWUgbG9va3VwIG9uIEFuZHJvaWQgZGV2aWNlcyBvciYj
ODIzMjsgcHJvdmlkZXMgTGFzdCBLbm93biBsb2NhdGlvbiBvbiBpT1MgYW5kIFdpbmRvd3MgUGhv
bmUgZGV2aWNlcy4gVGhlIHJlc3VsdHMgaXMgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBpbmZvcm1h
dGlvbi48L2RvY3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1c
Ij48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzFic3prbHI8L291dGdvaW5nPjwvc3RhcnRFdmVudD48
c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18wc2tvOTNoXCIgbmFtZT1cIk1hYXMgMzYwIExv
Y2F0ZSBEZXZpY2VcIiByZXNpbGllbnQ6dHlwZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1l
bnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVpZD1cIjVlYjIzMGMwLWJjNWEtNDAxNi1iMjVhLThh
YTQyZTM4MTg3NlwiPntcImlucHV0c1wiOnt9fTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5z
aW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xYnN6a2xyPC9pbmNvbWluZz48b3V0
Z29pbmc+U2VxdWVuY2VGbG93XzF2cGJ6Zzg8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PGVuZEV2
ZW50IGlkPVwiRW5kRXZlbnRfMHZ1cGU4aVwiPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMXZwYnpn
ODwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzFi
c3prbHJcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2
aWNlVGFza18wc2tvOTNoXCIvPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMXZwYnpn
OFwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzBza285M2hcIiB0YXJnZXRSZWY9XCJFbmRFdmVu
dF8wdnVwZThpXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRc
Ij48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48
YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRF
dmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4
dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xb2U0M2cwXCI+PHRleHQ+PCFbQ0RBVEFb
SW5wdXRzOiBtYWFzMzYwX2RldmljZWlkXG5dXT48L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNz
b2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8wYWF2dWpsXCIgc291cmNlUmVmPVwiU2VydmljZVRh
c2tfMHNrbzkzaFwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFvZTQzZzBcIi8+PHRleHRB
bm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMThrbGdjbVwiPjx0ZXh0PjwhW0NEQVRBW091
dHB1dHM6IGxhdGl0dWRlL2xvbmdpdHVkZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgYSBkZXZpY2Vz
IGxhc3Qga25vdyBsb2NhdGlvblxuXV0+PC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0
aW9uIGlkPVwiQXNzb2NpYXRpb25fMTh0cmdicFwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzBz
a285M2hcIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xOGtsZ2NtXCIvPjwvcHJvY2Vzcz48
YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5l
IGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBN
TlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50
XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9
XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0
PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFi
ZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4
dEFubm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRc
Ii8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3Nv
Y2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndh
eXBvaW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21n
ZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIv
PjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2Vydmlj
ZVRhc2tfMHNrbzkzaFwiIGlkPVwiU2VydmljZVRhc2tfMHNrbzkzaF9kaVwiPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIyODcuNjE2NzQ4NzY4NDcyOVwiIHk9
XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50
PVwiRW5kRXZlbnRfMHZ1cGU4aVwiIGlkPVwiRW5kRXZlbnRfMHZ1cGU4aV9kaVwiPjxvbWdkYzpC
b3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjUwNC42MTY3NDg3Njg0NzI5XCIg
eT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIg
d2lkdGg9XCIwXCIgeD1cIjUyMi42MTY3NDg3Njg0NzI5XCIgeT1cIjIyN1wiLz48L2JwbW5kaTpC
UE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9
XCJTZXF1ZW5jZUZsb3dfMWJzemtsclwiIGlkPVwiU2VxdWVuY2VGbG93XzFic3prbHJfZGlcIj48
b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2
XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMjg4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdp
ZHRoPVwiMFwiIHg9XCIyNDNcIiB5PVwiMTg0LjVcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBt
bmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3df
MXZwYnpnOFwiIGlkPVwiU2VxdWVuY2VGbG93XzF2cGJ6ZzhfZGlcIj48b21nZGk6d2F5cG9pbnQg
eD1cIjM4OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlw
b2ludCB4PVwiNTA1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5k
aTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI0
NDYuNVwiIHk9XCIxODQuNVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xb2U0M2cwXCIg
aWQ9XCJUZXh0QW5ub3RhdGlvbl8xb2U0M2cwX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIz
MFwiIHdpZHRoPVwiMTc4XCIgeD1cIi01XCIgeT1cIjU1XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48
YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMGFhdnVqbFwiIGlkPVwi
QXNzb2NpYXRpb25fMGFhdnVqbF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMjg4XCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNzlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxMTNcIiB4
c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjg1XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1u
ZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMThrbGdjbVwiIGlkPVwi
VGV4dEFubm90YXRpb25fMThrbGdjbV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3
aWR0aD1cIjI1OVwiIHg9XCIzODJcIiB5PVwiNDRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1u
ZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xOHRyZ2JwXCIgaWQ9XCJBc3Nv
Y2lhdGlvbl8xOHRyZ2JwX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIzODFcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjE3MFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjQ5NFwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiNzRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6
QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93
X2lkIjogImV4YW1wbGVfbWFhczM2MF9sb2NhdGVfZGV2aWNlIiwgInZlcnNpb24iOiAyfSwgImxh
c3RfbW9kaWZpZWRfdGltZSI6IDE1NDQxOTc5NDUzODMsICJjcmVhdG9yX2lkIjogImFAYS5jb20i
LCAiYWN0aW9ucyI6IFtdLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9tYWFzMzYwX2xv
Y2F0ZV9kZXZpY2UiLCAibmFtZSI6ICJFeGFtcGxlOiBNYWFzMzYwIExvY2F0ZSBEZXZpY2UifV0s
ICJhY3Rpb25zIjogW3sibG9naWNfdHlwZSI6ICJhbGwiLCAibmFtZSI6ICJFeGFtcGxlOiBNYWFz
MzYwIExvY2F0ZSBEZXZpY2UiLCAidmlld19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3b3JrZmxv
d3MiOiBbImV4YW1wbGVfbWFhczM2MF9sb2NhdGVfZGV2aWNlIl0sICJvYmplY3RfdHlwZSI6ICJh
cnRpZmFjdCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiMzM4OWUxNmUtMDVk
MC00NmQ5LWFkZjMtYTYwMTFjMzQ2NmU3IiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5
IjogIkV4YW1wbGU6IE1hYXMzNjAgTG9jYXRlIERldmljZSIsICJjb25kaXRpb25zIjogW10sICJp
ZCI6IDE1LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXX1dLCAibGF5b3V0cyI6IFtdLCAiZXhw
b3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImlkIjogMSwgImluZHVzdHJpZXMiOiBudWxsLCAicGhh
c2VzIjogW10sICJhY3Rpb25fb3JkZXIiOiBbXSwgImdlb3MiOiBudWxsLCAibG9jYWxlIjogbnVs
bCwgInNlcnZlcl92ZXJzaW9uIjogeyJtYWpvciI6IDMxLCAidmVyc2lvbiI6ICIzMS4xLjc2Iiwg
ImJ1aWxkX251bWJlciI6IDc2LCAibWlub3IiOiAxfSwgInRpbWVmcmFtZXMiOiBudWxsLCAid29y
a3NwYWNlcyI6IFtdLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJmdW5jdGlvbnMiOiBbeyJkaXNw
bGF5X25hbWUiOiAiTWFhcyAzNjAgTG9jYXRlIERldmljZSIsICJkZXNjcmlwdGlvbiI6IHsiY29u
dGVudCI6ICJGdW5jdGlvbiBwZXJmb3JtcyBhIHJlYWwtdGltZSBsb29rdXAgb24gQW5kcm9pZCBk
ZXZpY2VzIG9yXHUyMDI4IHByb3ZpZGVzIExhc3QgS25vd24gbG9jYXRpb24gb24gaU9TIGFuZCBX
aW5kb3dzIFBob25lIGRldmljZXMuIFRoZSByZXN1bHRzIGlzIGxhdGl0dWRlIGFuZCBsb25naXR1
ZGUgaW5mb3JtYXRpb24uIiwgImZvcm1hdCI6ICJ0ZXh0In0sICJjcmVhdG9yIjogeyJkaXNwbGF5
X25hbWUiOiAiUmVzaWxpZW50IFN5c2FkbWluIiwgInR5cGUiOiAidXNlciIsICJpZCI6IDMsICJu
YW1lIjogImFAYS5jb20ifSwgInZpZXdfaXRlbXMiOiBbeyJzaG93X2lmIjogbnVsbCwgImZpZWxk
X3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50
IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICJhYmEzMmFlNS05ZDAwLTQ5NGYtYjNmMi04NmMx
NWY4NTBhMGYiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAibWFhczM2MF9s
b2NhdGVfZGV2aWNlIiwgInV1aWQiOiAiNWViMjMwYzAtYmM1YS00MDE2LWIyNWEtOGFhNDJlMzgx
ODc2IiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7ImRpc3BsYXlfbmFtZSI6ICJSZXNpbGllbnQgU3lz
YWRtaW4iLCAidHlwZSI6ICJ1c2VyIiwgImlkIjogMywgIm5hbWUiOiAiYUBhLmNvbSJ9LCAidmVy
c2lvbiI6IDMsICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlw
ZSI6ICJhcnRpZmFjdCIsICJhY3Rpb25zIjogW10sICJuYW1lIjogIkV4YW1wbGU6IE1hYXMzNjAg
TG9jYXRlIERldmljZSIsICJ3b3JrZmxvd19pZCI6IDEsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJl
eGFtcGxlX21hYXMzNjBfbG9jYXRlX2RldmljZSIsICJ1dWlkIjogbnVsbH1dLCAibGFzdF9tb2Rp
ZmllZF90aW1lIjogMTU0NDE5NzkyNzAxMSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJmbl9tYWFz
MzYwIiwgImlkIjogMSwgIm5hbWUiOiAibWFhczM2MF9sb2NhdGVfZGV2aWNlIn1dLCAibm90aWZp
Y2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3si
Y3JlYXRlX2RhdGUiOiAxNTQ0MjE2NzcwNzQ0LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlv
biBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNr
YWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdl
cyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRlIjogMTU0NDIxNjc3MDc0NCwgInV1aWQiOiAiYmZl
ZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5
c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3Jp
cHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjog
IjU1ODEwNmJkLTMwZmUtNDYxYy1hYTNiLWM3MjgzODBmMzc4ZiIsICJleHBvcnRfa2V5IjogImZu
X21hYXMzNjAiLCAibmFtZSI6ICJmbl9tYWFzMzYwIiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAi
cHJvZ3JhbW1hdGljX25hbWUiOiAiZm5fbWFhczM2MCIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVz
ZXJzIjogWyJhQGEuY29tIl19XSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJyb2xl
cyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDAsICJvcGVy
YXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJibGFua19vcHRpb24iOiBm
YWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMzgsICJyZWFk
X29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhj
Y2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6
ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lk
ZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHkuIiwgImludGVybmFsIjogZmFsc2UsICJyaWNo
X3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9p
bmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3Ry
YWluaW5nIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6
IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJtYWFzMzYwX2RldmljZWlkIiwgImJsYW5r
X29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQi
OiAxNDEsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiYWJhMzJhZTUtOWQwMC00OTRmLWIz
ZjItODZjMTVmODUwYTBmIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0Iiwg
InRvb2x0aXAiOiAiIENsaWVudCBTZXJpYWwgTnVtYmVyIG9mIHRoZSBkZXZpY2UiLCAiaW50ZXJu
YWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRf
a2V5IjogIl9fZnVuY3Rpb24vbWFhczM2MF9kZXZpY2VpZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAibWFhczM2MF9kZXZpY2VpZCIsICJk
ZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInJl
cXVpcmVkIjogImFsd2F5cyIsICJ2YWx1ZXMiOiBbXX1dLCAib3ZlcnJpZGVzIjogW10sICJleHBv
cnRfZGF0ZSI6IDE1NDQxOTg0Mzc3NDh9
"""
    )