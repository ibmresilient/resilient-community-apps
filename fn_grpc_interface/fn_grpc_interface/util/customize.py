# (c) Copyright IBM Corp. 2010, 2019. All Rights Reserved.
# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_grpc_interface"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_grpc_interface package"""
    reload_params = {"package": u"fn_grpc_interface",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"grpc_channel", u"grpc_function", u"grpc_function_data"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_grpc"], 
                    "functions": [u"function_grpc"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_grpc_communication_interface"], 
                    "actions": [u"Example: GRPC Communication Interface"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     grpc_channel
    #     grpc_function
    #     grpc_function_data
    #   Message Destinations:
    #     fn_grpc
    #   Functions:
    #     function_grpc
    #   Workflows:
    #     example_grpc_communication_interface
    #   Rules:
    #     Example: GRPC Communication Interface


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMSwgImJ1aWxkX251bWJl
ciI6IDc2LCAidmVyc2lvbiI6ICIzMS4xLjc2In0sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAy
LCAiaWQiOiA4OSwgImV4cG9ydF9kYXRlIjogMTU1MzYyMTQyOTU2OCwgImZpZWxkcyI6IFt7Imlk
IjogNTEsICJuYW1lIjogImluY190cmFpbmluZyIsICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAicHJl
Zml4IjogbnVsbCwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVu
dCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyBy
ZWFkLW9ubHkuIiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxz
ZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiYzNm
MGUzZWQtMjFlMS00ZDUzLWFmZmItZmU1Y2EzMzA4Y2NhIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiB0cnVlLCAiY2hh
bmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiaW5jaWRl
bnQvaW5jX3RyYWluaW5nIiwgInRlbXBsYXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZhbHNlfSwg
eyJpZCI6IDE0NywgIm5hbWUiOiAiZ3JwY19mdW5jdGlvbiIsICJ0ZXh0IjogImdycGNfZnVuY3Rp
b24iLCAicHJlZml4IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRvb2x0aXAiOiAiVGhpcyBmaWVs
ZHMgY29udGFpbnMgZGF0YSBmcm9tIC5wcm90byBmaWxlIGkuZSBwYWNrYWdlX25hbWUgOiBycGMg
ZnVuY3Rpb24gbmFtZShncnBjIHJlcXVlc3QgZnVuY3Rpb24pIGV4OiBoZWxsb3dvcmQgOiBTYXlI
ZWxsbyhIZWxsb1JlcXVlc3QpIiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogInRl
eHQiLCAicmVxdWlyZWQiOiAiYWx3YXlzIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJj
aG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtf
b3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICJkMDk4NzhkYy1kMTFm
LTRlMmUtYjExMi1kNTNlNTg4MmUyNWYiLCAib3BlcmF0aW9ucyI6IFtdLCAib3BlcmF0aW9uX3Bl
cm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6
IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9ncnBj
X2Z1bmN0aW9uIiwgInRlbXBsYXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZhbHNlfSwgeyJpZCI6
IDE0OCwgIm5hbWUiOiAiZ3JwY19mdW5jdGlvbl9kYXRhIiwgInRleHQiOiAiZ3JwY19mdW5jdGlv
bl9kYXRhIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlwIjogIkFkZGl0
aW9uYWwgZGF0YSBGaWVsZHMgdG8gc2VuZCBkYXRhIGZyb20gY2xpZW50IHRvIHNlcnZlci4gZGF0
YSBmb3JtYXQgd2lsbCBiZSBpbiBqc29uIGFuZCBrZXkgc2hvdWxkIG1hdGNoIHRoZSByZXF1ZXN0
IGZ1bmN0aW9uIHBhcmFtZXRlci4iLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAi
dGV4dCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZh
dWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50
ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiOWRkZGRmNjItNjBmNy00NTBhLWE5YWMtMmZkYjg1ZTNj
NGEzIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjog
W10sICJyZWFkX29ubHkiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0Ijog
ZmFsc2UsICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vZ3JwY19mdW5jdGlvbl9kYXRhIiwgInRl
bXBsYXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZhbHNlfSwgeyJpZCI6IDE0MSwgIm5hbWUiOiAi
Z3JwY19jaGFubmVsIiwgInRleHQiOiAiZ3JwY19jaGFubmVsIiwgInByZWZpeCI6IG51bGwsICJ0
eXBlX2lkIjogMTEsICJ0b29sdGlwIjogInRoaXMgZmllbGQgY29udGFpbiB0aGUgY2hhbm5lbCBp
bmZvIG9mIHRoZSBHUlBDIFNlcnZlciBSdW5uaW5nIGV4Omhvc3RJUDpQb3J0IiwgInBsYWNlaG9s
ZGVyIjogIiIsICJpbnB1dF90eXBlIjogInRleHQiLCAicmVxdWlyZWQiOiAiYWx3YXlzIiwgImhp
ZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2Vu
X2J5X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZh
bHNlLCAidXVpZCI6ICIzM2JmN2M0MS0xZjQ1LTRkMmMtYjkxNS05MTE0NTNkYjFkNWUiLCAib3Bl
cmF0aW9ucyI6IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRf
b25seSI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4
cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9ncnBjX2NoYW5uZWwiLCAidGVtcGxhdGVzIjogW10sICJk
ZXByZWNhdGVkIjogZmFsc2V9XSwgImluY2lkZW50X3R5cGVzIjogW3sidXBkYXRlX2RhdGUiOiAx
NTUzNjIxNjIzNDk2LCAiY3JlYXRlX2RhdGUiOiAxNTUzNjIxNjIzNDk2LCAidXVpZCI6ICJiZmVl
YzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9t
aXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlv
biBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAo
aW50ZXJuYWwpIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lk
IjogbnVsbCwgImhpZGRlbiI6IGZhbHNlLCAiaWQiOiAwfV0sICJwaGFzZXMiOiBbXSwgImF1dG9t
YXRpY190YXNrcyI6IFtdLCAib3ZlcnJpZGVzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6
IFt7Im5hbWUiOiAiZm5fZ3JwYyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJmbl9ncnBjIiwgImRl
c3RpbmF0aW9uX3R5cGUiOiAwLCAiZXhwZWN0X2FjayI6IHRydWUsICJ1c2VycyI6IFsibmthbmRo
YTFAaW4uaWJtLmNvbSJdLCAidXVpZCI6ICJiMDg3ZjMzYS0yMWM3LTRhOWMtYjYwNS0wMmM3MTk5
NzYzOTIiLCAiZXhwb3J0X2tleSI6ICJmbl9ncnBjIn1dLCAiYWN0aW9ucyI6IFt7ImlkIjogMTAx
LCAibmFtZSI6ICJFeGFtcGxlOiBHUlBDIENvbW11bmljYXRpb24gSW50ZXJmYWNlIiwgInR5cGUi
OiAxLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiY29uZGl0aW9ucyI6IFtdLCAiYXV0b21h
dGlvbnMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW10sICJ3b3JrZmxvd3MiOiBbImV4
YW1wbGVfZ3JwY19jb21tdW5pY2F0aW9uX2ludGVyZmFjZSJdLCAidmlld19pdGVtcyI6IFtdLCAi
dGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImZiNTkzNzJkLTE3MDAtNGQzYi1iMDE5
LTBjNjU0ZjBmMTdkYiIsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IEdSUEMgQ29tbXVuaWNhdGlv
biBJbnRlcmZhY2UiLCAibG9naWNfdHlwZSI6ICJhbGwifV0sICJsYXlvdXRzIjogW10sICJub3Rp
ZmljYXRpb25zIjogbnVsbCwgInRpbWVmcmFtZXMiOiBudWxsLCAibG9jYWxlIjogbnVsbCwgImlu
ZHVzdHJpZXMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJnZW9zIjogbnVsbCwgInRhc2tf
b3JkZXIiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAidHlwZXMiOiBbXSwgInNjcmlwdHMiOiBb
XSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ3b3JrZmxv
d19pZCI6IDg2LCAibmFtZSI6ICJFeGFtcGxlOiBHUlBDIENvbW11bmljYXRpb24gSW50ZXJmYWNl
IiwgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfZ3JwY19jb21tdW5pY2F0aW9uX2ludGVy
ZmFjZSIsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJkZXNjcmlwdGlvbiI6ICJDb21tdW5p
Y2F0ZSB3aXRoIEdSUEMgU2VydmVycyIsICJjcmVhdG9yX2lkIjogIm5rYW5kaGExQGluLmlibS5j
b20iLCAibGFzdF9tb2RpZmllZF9ieSI6ICJua2FuZGhhMUBpbi5pYm0uY29tIiwgImxhc3RfbW9k
aWZpZWRfdGltZSI6IDE1NTM2MjE0MTczODQsICJleHBvcnRfa2V5IjogImV4YW1wbGVfZ3JwY19j
b21tdW5pY2F0aW9uX2ludGVyZmFjZSIsICJ1dWlkIjogImI3NjVlMzEyLTU1NGYtNDNlOC05ZDZi
LTM3ZTQ4ZDA0NDc2NSIsICJjb250ZW50IjogeyJ3b3JrZmxvd19pZCI6ICJleGFtcGxlX2dycGNf
Y29tbXVuaWNhdGlvbl9pbnRlcmZhY2UiLCAieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBl
bmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9y
Zy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxp
ZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5z
dGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48
cHJvY2VzcyBpZD1cImV4YW1wbGVfZ3JwY19jb21tdW5pY2F0aW9uX2ludGVyZmFjZVwiIGlzRXhl
Y3V0YWJsZT1cInRydWVcIiBuYW1lPVwiRXhhbXBsZTogR1JQQyBDb21tdW5pY2F0aW9uIEludGVy
ZmFjZVwiPjxkb2N1bWVudGF0aW9uPkNvbW11bmljYXRlIHdpdGggR1JQQyBTZXJ2ZXJzPC9kb2N1
bWVudGF0aW9uPjxzdGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5n
PlNlcXVlbmNlRmxvd18xNGtza2ZtPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNr
IGlkPVwiU2VydmljZVRhc2tfMW5mY2Z0ZlwiIG5hbWU9XCJHUlBDXCIgcmVzaWxpZW50OnR5cGU9
XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9
XCIwZjk2OTYwOC1mMjJmLTRhNmItYTc0My1hZjAxYTIxZDY5M2NcIj57XCJpbnB1dHNcIjp7XCIz
M2JmN2M0MS0xZjQ1LTRkMmMtYjkxNS05MTE0NTNkYjFkNWVcIjp7XCJpbnB1dF90eXBlXCI6XCJz
dGF0aWNcIixcInN0YXRpY19pbnB1dFwiOntcIm11bHRpc2VsZWN0X3ZhbHVlXCI6W10sXCJ0ZXh0
X3ZhbHVlXCI6XCJsb2NhbGhvc3Q6NTAwNTFcIn19LFwiZDA5ODc4ZGMtZDExZi00ZTJlLWIxMTIt
ZDUzZTU4ODJlMjVmXCI6e1wiaW5wdXRfdHlwZVwiOlwic3RhdGljXCIsXCJzdGF0aWNfaW5wdXRc
Ijp7XCJtdWx0aXNlbGVjdF92YWx1ZVwiOltdLFwidGV4dF92YWx1ZVwiOlwiaGVsbG93b3JkOlNh
eUhlbGxvKEhlbGxvUmVxdWVzdClcIn19LFwiOWRkZGRmNjItNjBmNy00NTBhLWE5YWMtMmZkYjg1
ZTNjNGEzXCI6e1wiaW5wdXRfdHlwZVwiOlwic3RhdGljXCIsXCJzdGF0aWNfaW5wdXRcIjp7XCJt
dWx0aXNlbGVjdF92YWx1ZVwiOltdLFwidGV4dF92YWx1ZVwiOlwie1xcXCJuYW1lXFxcIjpcXFwi
UmVzaWxpZW50IFN5c3RlbVxcXCJ9XCJ9fX0sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJk
YXRhX3JlY2VpdmVkID0gcmVzdWx0c1snY29udGVudCddXFxuc2VydmVyX2FkZHJlc3MgPSByZXN1
bHRzWydjaGFubmVsJ11cXG5yaWNoX3RleHQgPSBoZWxwZXIuY3JlYXRlUmljaFRleHQoXFxcIiZs
dDtwJmd0OyZsdDtiJmd0O2NoYW5uZWwgOiAmbHQ7L2ImZ3Q7e30mbHQ7L3AmZ3Q7Jmx0O3AmZ3Q7
Jmx0O2ImZ3Q7e30mbHQ7L2ImZ3Q7Jmx0Oy9wJmd0O1xcXCIuZm9ybWF0KHNlcnZlcl9hZGRyZXNz
LGRhdGFfcmVjZWl2ZWQpKVxcbmluY2lkZW50LmFkZE5vdGUocmljaF90ZXh0KVwiLFwicHJlX3By
b2Nlc3Npbmdfc2NyaXB0XCI6XCJkZWYgZGljdF90b19qc29uX3N0cihkKTpcXG4gIFxcXCJcXFwi
XFxcIkZ1bmN0aW9uIHRoYXQgY29udmVydHMgYSBkaWN0aW9uYXJ5IGludG8gYSBKU09OIHN0cmlu
Zy5cXG4gICAgIFN1cHBvcnRzIHR5cGVzOiBiYXNlc3RyaW5nLCB1bmljb2RlLCBib29sLCBpbnQg
YW5kIG5lc3RlZCBkaWN0cy5cXG4gICAgIERvZXMgbm90IHN1cHBvcnQgbGlzdHMuXFxuICAgICBJ
ZiB0aGUgdmFsdWUgaXMgTm9uZSwgaXQgc2V0cyBpdCB0byBGYWxzZS5cXFwiXFxcIlxcXCJcXG5c
XG4gIGpzb25fZW50cnkgPSB1J1xcXCJ7MH1cXFwiOnsxfSdcXG4gIGpzb25fZW50cnlfc3RyID0g
dSdcXFwiezB9XFxcIjpcXFwiezF9XFxcIidcXG4gIGVudHJpZXMgPSBbXVxcblxcbiAgZm9yIGVu
dHJ5IGluIGQ6XFxuICAgIGtleSA9IGVudHJ5XFxuICAgIHZhbHVlID0gZFtlbnRyeV1cXG5cXG4g
ICAgaWYgdmFsdWUgaXMgTm9uZTpcXG4gICAgICB2YWx1ZSA9IEZhbHNlXFxuXFxuICAgIGlmIGlz
aW5zdGFuY2UodmFsdWUsIGxpc3QpOlxcbiAgICAgIGhlbHBlci5mYWlsKCdkaWN0X3RvX2pzb25f
c3RyIGRvZXMgbm90IHN1cHBvcnQgUHl0aG9uIExpc3RzJylcXG5cXG4gICAgaWYgaXNpbnN0YW5j
ZSh2YWx1ZSwgYmFzZXN0cmluZyk6XFxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHUnXFxc
IicsIHUnXFxcXFxcXFxcXFwiJylcXG4gICAgICBlbnRyaWVzLmFwcGVuZChqc29uX2VudHJ5X3N0
ci5mb3JtYXQodW5pY29kZShrZXkpLCB1bmljb2RlKHZhbHVlKSkpXFxuXFxuICAgIGVsaWYgaXNp
bnN0YW5jZSh2YWx1ZSwgdW5pY29kZSk6XFxuICAgICAgZW50cmllcy5hcHBlbmQoanNvbl9lbnRy
eS5mb3JtYXQodW5pY29kZShrZXkpLCB1bmljb2RlKHZhbHVlKSkpXFxuICAgIFxcbiAgICBlbGlm
IGlzaW5zdGFuY2UodmFsdWUsIGJvb2wpOlxcbiAgICAgIHZhbHVlID0gJ3RydWUnIGlmIHZhbHVl
ID09IFRydWUgZWxzZSAnZmFsc2UnXFxuICAgICAgZW50cmllcy5hcHBlbmQoanNvbl9lbnRyeS5m
b3JtYXQoa2V5LCB2YWx1ZSkpXFxuXFxuICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgaW50KTpc
XG4gICAgICBlbnRyaWVzLmFwcGVuZChqc29uX2VudHJ5LmZvcm1hdCh1bmljb2RlKGtleSksIHZh
bHVlKSlcXG5cXG4gICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBkaWN0KTpcXG4gICAgICBlbnRy
aWVzLmFwcGVuZChqc29uX2VudHJ5LmZvcm1hdChrZXksIGRpY3RfdG9fanNvbl9zdHIodmFsdWUp
KSlcXG5cXG4gICAgZWxzZTpcXG4gICAgICBoZWxwZXIuZmFpbCgnZGljdF90b19qc29uX3N0ciBk
b2VzIG5vdCBzdXBwb3J0IHRoaXMgdHlwZTogezB9Jy5mb3JtYXQodHlwZSh2YWx1ZSkpKVxcblxc
biAgcmV0dXJuIHUnezB9IHsxfSB7Mn0nLmZvcm1hdCh1J3snLCAnLCcuam9pbihlbnRyaWVzKSwg
dSd9JylcXG5pbnB1dHMuZ3JwY19mdW5jdGlvbl9kYXRhID0gZGljdF90b19qc29uX3N0cih7XFxc
Im5hbWVcXFwiOiBcXFwiUmVzaWxpZW50IFN5c3RlbVxcXCJ9KVxcblxcblwifTwvcmVzaWxpZW50
OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xNGtz
a2ZtPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB0dXY2dHo8L291dGdvaW5nPjwv
c2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xNGtza2ZtXCIgc291
cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMW5m
Y2Z0ZlwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8xdWtodnhwXCI+PGluY29taW5nPlNlcXVl
bmNlRmxvd18wdHV2NnR6PC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5jZUZsb3cgaWQ9XCJT
ZXF1ZW5jZUZsb3dfMHR1djZ0elwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzFuZmNmdGZcIiB0
YXJnZXRSZWY9XCJFbmRFdmVudF8xdWtodnhwXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRB
bm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhlcmU8L3RleHQ+
PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIg
c291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRp
b25fMWt4eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8wNm1tZWU2
XCI+PHRleHQ+PCFbQ0RBVEFbXG5UaGlzIEZ1bmN0aW9uIHByb3ZpZGVzIGEgZ2VuZXJhbCBwdXJw
b3NlIHdyYXBwZXIgZm9yIHVzZSBhbnkgZ1JQQyAoZ29vZ2xlIFJlbW90ZSBQcm9jcmVkdXJlIENh
bGwpIENsaWVudCBBcHBsaWNhdGlvbi5cbl1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3Nv
Y2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzA1eGNkNmFcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFz
a18xbmZjZnRmXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMDZtbWVlNlwiLz48L3Byb2Nl
c3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5Q
bGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRp
OkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRF
dmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZc
IiB4PVwiMTMxXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjEyNlwiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBN
TkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1c
IlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlc
Ij48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwi
MjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwi
QXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdk
aTp3YXlwb2ludCB4PVwiMTQ1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjNcIi8+
PG9tZ2RpOndheXBvaW50IHg9XCIxNDZcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1
NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNl
cnZpY2VUYXNrXzFuZmNmdGZcIiBpZD1cIlNlcnZpY2VUYXNrXzFuZmNmdGZfZGlcIj48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiMzM4LjMxODg2OTgyODQ1NjFc
IiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVt
ZW50PVwiU2VxdWVuY2VGbG93XzE0a3NrZm1cIiBpZD1cIlNlcXVlbmNlRmxvd18xNGtza2ZtX2Rp
XCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjMzOFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTJc
IiB3aWR0aD1cIjkwXCIgeD1cIjIwNy41XCIgeT1cIjE4NVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+
PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRFdmVu
dF8xdWtodnhwXCIgaWQ9XCJFbmRFdmVudF8xdWtodnhwX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWln
aHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiNTc1LjMxODg2OTgyODQ1NjFcIiB5PVwiMTg4XCIv
PjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTJcIiB3aWR0aD1cIjBc
IiB4PVwiNTkzLjMxODg2OTgyODQ1NjFcIiB5PVwiMjI4XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48
L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNl
Rmxvd18wdHV2NnR6XCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHR1djZ0el9kaVwiPjxvbWdkaTp3YXlw
b2ludCB4PVwiNDM4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2Rp
OndheXBvaW50IHg9XCI1NzVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48
YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEyXCIgd2lkdGg9XCIwXCIg
eD1cIjUwNi41XCIgeT1cIjE4NVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVk
Z2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8wNm1tZWU2
XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8wNm1tZWU2X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCI5NVwiIHdpZHRoPVwiNTc0XCIgeD1cIjUwMVwiIHk9XCI0M1wiLz48L2JwbW5kaTpCUE1OU2hh
cGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzA1eGNkNmFcIiBp
ZD1cIkFzc29jaWF0aW9uXzA1eGNkNmFfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQzOFwiIHhz
aTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTkyXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNjI3
XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxMzhcIi8+PC9icG1uZGk6QlBNTkVkZ2U+
PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+Iiwg
InZlcnNpb24iOiAzfSwgImFjdGlvbnMiOiBbXX1dLCAicm9sZXMiOiBbXSwgIndvcmtzcGFjZXMi
OiBbXSwgImZ1bmN0aW9ucyI6IFt7ImlkIjogNDYsICJuYW1lIjogImZ1bmN0aW9uX2dycGMiLCAi
ZGlzcGxheV9uYW1lIjogIkdSUEMiLCAiZGVzY3JpcHRpb24iOiB7ImZvcm1hdCI6ICJ0ZXh0Iiwg
ImNvbnRlbnQiOiAiQSBmdW5jdGlvbiB0byBjb21tdW5pY2F0ZSB3aXRoIEdSUEMgU2VydmVycyBi
YXNlZCBvbiB0aGUgQ29tbXVuaWNhdGlvbiBNZXRob2RzIFNwZWNpZmllZC4ifSwgImRlc3RpbmF0
aW9uX2hhbmRsZSI6ICJmbl9ncnBjIiwgImV4cG9ydF9rZXkiOiAiZnVuY3Rpb25fZ3JwYyIsICJ1
dWlkIjogIjBmOTY5NjA4LWYyMmYtNGE2Yi1hNzQzLWFmMDFhMjFkNjkzYyIsICJ2ZXJzaW9uIjog
MSwgImNyZWF0b3IiOiB7ImlkIjogNiwgInR5cGUiOiAidXNlciIsICJuYW1lIjogIm5rYW5kaGEx
QGluLmlibS5jb20iLCAiZGlzcGxheV9uYW1lIjogIk5pdGluIEthbmRoYXJlICJ9LCAibGFzdF9t
b2RpZmllZF9ieSI6IHsiaWQiOiA2LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAibmthbmRoYTFA
aW4uaWJtLmNvbSIsICJkaXNwbGF5X25hbWUiOiAiTml0aW4gS2FuZGhhcmUgIn0sICJsYXN0X21v
ZGlmaWVkX3RpbWUiOiAxNTUzNjIxMjA5MzEyLCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFiZWwi
OiBudWxsLCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRf
dHlwZSI6ICJfX2Z1bmN0aW9uIiwgImNvbnRlbnQiOiAiMzNiZjdjNDEtMWY0NS00ZDJjLWI5MTUt
OTExNDUzZGIxZDVlIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6
IG51bGwsICJzaG93X2lmIjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90
eXBlIjogIl9fZnVuY3Rpb24iLCAiY29udGVudCI6ICJkMDk4NzhkYy1kMTFmLTRlMmUtYjExMi1k
NTNlNTg4MmUyNWYiLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xhYmVsIjog
bnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5
cGUiOiAiX19mdW5jdGlvbiIsICJjb250ZW50IjogIjlkZGRkZjYyLTYwZjctNDUwYS1hOWFjLTJm
ZGI4NWUzYzRhMyIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XSwgIndvcmtmbG93cyI6IFt7
IndvcmtmbG93X2lkIjogODYsICJuYW1lIjogIkV4YW1wbGU6IEdSUEMgQ29tbXVuaWNhdGlvbiBJ
bnRlcmZhY2UiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9ncnBjX2NvbW11bmljYXRp
b25faW50ZXJmYWNlIiwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2NyaXB0aW9uIjog
bnVsbCwgInV1aWQiOiBudWxsLCAiYWN0aW9ucyI6IFtdfV19XX0=
"""
    )