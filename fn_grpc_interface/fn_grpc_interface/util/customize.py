# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_grpc_interface"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_grpc_interface package"""
    reload_params = {"package": u"fn_grpc_interface",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"grpc_channel", u"grpc_function", u"grpc_function_data"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_grpc"], 
                    "functions": [u"function_grpc"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_grpc_communication_interface"], 
                    "actions": [u"Example: GRPC Communication Interface"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     grpc_channel
    #     grpc_function
    #     grpc_function_data
    #   Message Destinations:
    #     fn_grpc
    #   Functions:
    #     function_grpc
    #   Workflows:
    #     example_grpc_communication_interface
    #   Rules:
    #     Example: GRPC Communication Interface


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMSwgImJ1aWxkX251bWJl
ciI6IDc2LCAidmVyc2lvbiI6ICIzMS4xLjc2In0sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAy
LCAiaWQiOiA1OSwgImV4cG9ydF9kYXRlIjogMTU1MDQ5MjEwMjczOCwgImZpZWxkcyI6IFt7Imlk
IjogNTEsICJuYW1lIjogImluY190cmFpbmluZyIsICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAicHJl
Zml4IjogbnVsbCwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVu
dCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyBy
ZWFkLW9ubHkuIiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNhdGlvbiI6
IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxz
ZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiYzNm
MGUzZWQtMjFlMS00ZDUzLWFmZmItZmU1Y2EzMzA4Y2NhIiwgIm9wZXJhdGlvbnMiOiBbXSwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiB0cnVlLCAiY2hh
bmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiaW5jaWRl
bnQvaW5jX3RyYWluaW5nIiwgInRlbXBsYXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZhbHNlfSwg
eyJpZCI6IDE0MSwgIm5hbWUiOiAiZ3JwY19jaGFubmVsIiwgInRleHQiOiAiZ3JwY19jaGFubmVs
IiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlwIjogInRoaXMgZmllbGQg
Y29udGFpbiB0aGUgY2hhbm5lbCBpbmZvIG9mIHRoZSBHUlBDIFNlcnZlciBSdW5uaW5nIGV4Omhv
c3RJUDpQb3J0IiwgInBsYWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogInRleHQiLCAicmVx
dWlyZWQiOiAiYWx3YXlzIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBm
YWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjog
ZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICIzM2JmN2M0MS0xZjQ1LTRkMmMtYjkx
NS05MTE0NTNkYjFkNWUiLCAib3BlcmF0aW9ucyI6IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30s
ICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJy
aWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9ncnBjX2NoYW5uZWwi
LCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFsc2V9LCB7ImlkIjogMTQ3LCAibmFt
ZSI6ICJncnBjX2Z1bmN0aW9uIiwgInRleHQiOiAiZ3JwY19mdW5jdGlvbiIsICJwcmVmaXgiOiBu
dWxsLCAidHlwZV9pZCI6IDExLCAidG9vbHRpcCI6ICJUaGlzIGZpZWxkcyBjb250YWlucyBkYXRh
IGZyb20gLnByb3RvIGZpbGUgaS5lIHBhY2thZ2VfbmFtZSA6IHJwYyBmdW5jdGlvbiBuYW1lKGdy
cGMgcmVxdWVzdCBmdW5jdGlvbikgZXg6IGhlbGxvd29yZCA6IFNheUhlbGxvKEhlbGxvUmVxdWVz
dCkiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4dCIsICJyZXF1aXJlZCI6
ICJhbHdheXMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAi
ZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwg
ImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogImQwOTg3OGRjLWQxMWYtNGUyZS1iMTEyLWQ1M2U1
ODgyZTI1ZiIsICJvcGVyYXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVl
cyI6IFtdLCAicmVhZF9vbmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2dycGNfZnVuY3Rpb24iLCAidGVt
cGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFsc2V9LCB7ImlkIjogMTQ4LCAibmFtZSI6ICJn
cnBjX2Z1bmN0aW9uX2RhdGEiLCAidGV4dCI6ICJncnBjX2Z1bmN0aW9uX2RhdGEiLCAicHJlZml4
IjogbnVsbCwgInR5cGVfaWQiOiAxMSwgInRvb2x0aXAiOiAiQWRkaXRpb25hbCBkYXRhIEZpZWxk
cyB0byBzZW5kIGRhdGEgZnJvbSBjbGllbnQgdG8gc2VydmVyLiBkYXRhIGZvcm1hdCB3aWxsIGJl
IGluIGpzb24gYW5kIGtleSBzaG91bGQgbWF0Y2ggdGhlIHJlcXVlc3QgZnVuY3Rpb24gcGFyYW1l
dGVyLiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImhpZGVfbm90
aWZpY2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3Nl
cnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAi
dXVpZCI6ICI5ZGRkZGY2Mi02MGY3LTQ1MGEtYTlhYy0yZmRiODVlM2M0YTMiLCAib3BlcmF0aW9u
cyI6IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6
IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9r
ZXkiOiAiX19mdW5jdGlvbi9ncnBjX2Z1bmN0aW9uX2RhdGEiLCAidGVtcGxhdGVzIjogW10sICJk
ZXByZWNhdGVkIjogZmFsc2V9XSwgImluY2lkZW50X3R5cGVzIjogW3sidXBkYXRlX2RhdGUiOiAx
NTUwNDkyMjUxNjMwLCAiY3JlYXRlX2RhdGUiOiAxNTUwNDkyMjUxNjMwLCAidXVpZCI6ICJiZmVl
YzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9t
aXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlv
biBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAo
aW50ZXJuYWwpIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lk
IjogbnVsbCwgImhpZGRlbiI6IGZhbHNlLCAiaWQiOiAwfV0sICJwaGFzZXMiOiBbXSwgImF1dG9t
YXRpY190YXNrcyI6IFtdLCAib3ZlcnJpZGVzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6
IFt7Im5hbWUiOiAiZm5fZ3JwYyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJmbl9ncnBjIiwgImRl
c3RpbmF0aW9uX3R5cGUiOiAwLCAiZXhwZWN0X2FjayI6IHRydWUsICJ1c2VycyI6IFsibmthbmRo
YTFAaW4uaWJtLmNvbSJdLCAidXVpZCI6ICJiMDg3ZjMzYS0yMWM3LTRhOWMtYjYwNS0wMmM3MTk5
NzYzOTIiLCAiZXhwb3J0X2tleSI6ICJmbl9ncnBjIn1dLCAiYWN0aW9ucyI6IFt7ImlkIjogNTcs
ICJuYW1lIjogIkV4YW1wbGU6IEdSUEMgQ29tbXVuaWNhdGlvbiBJbnRlcmZhY2UiLCAidHlwZSI6
IDEsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJjb25kaXRpb25zIjogW10sICJhdXRvbWF0
aW9ucyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXSwgIndvcmtmbG93cyI6IFsiZXhh
bXBsZV9ncnBjX2NvbW11bmljYXRpb25faW50ZXJmYWNlIl0sICJ2aWV3X2l0ZW1zIjogW10sICJ0
aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiZmI1OTM3MmQtMTcwMC00ZDNiLWIwMTkt
MGM2NTRmMGYxN2RiIiwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogR1JQQyBDb21tdW5pY2F0aW9u
IEludGVyZmFjZSIsICJsb2dpY190eXBlIjogImFsbCJ9XSwgImxheW91dHMiOiBbXSwgIm5vdGlm
aWNhdGlvbnMiOiBudWxsLCAidGltZWZyYW1lcyI6IG51bGwsICJsb2NhbGUiOiBudWxsLCAiaW5k
dXN0cmllcyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImdlb3MiOiBudWxsLCAidGFza19v
cmRlciI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJ0eXBlcyI6IFtdLCAic2NyaXB0cyI6IFtd
LCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgIndvcmtmbG93cyI6IFt7IndvcmtmbG93
X2lkIjogNDIsICJuYW1lIjogIkV4YW1wbGU6IEdSUEMgQ29tbXVuaWNhdGlvbiBJbnRlcmZhY2Ui
LCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9ncnBjX2NvbW11bmljYXRpb25faW50ZXJm
YWNlIiwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2NyaXB0aW9uIjogIkNvbW11bmlj
YXRlIHdpdGggR1JQQyBTZXJ2ZXJzIiwgImNyZWF0b3JfaWQiOiAibmthbmRoYTFAaW4uaWJtLmNv
bSIsICJsYXN0X21vZGlmaWVkX2J5IjogIm5rYW5kaGExQGluLmlibS5jb20iLCAibGFzdF9tb2Rp
ZmllZF90aW1lIjogMTU1MDQ5MjA5MjcwNCwgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9ncnBjX2Nv
bW11bmljYXRpb25faW50ZXJmYWNlIiwgInV1aWQiOiAiYjc2NWUzMTItNTU0Zi00M2U4LTlkNmIt
MzdlNDhkMDQ0NzY1IiwgImNvbnRlbnQiOiB7IndvcmtmbG93X2lkIjogImV4YW1wbGVfZ3JwY19j
b21tdW5pY2F0aW9uX2ludGVyZmFjZSIsICJ4bWwiOiAiPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVu
Y29kaW5nPVwiVVRGLThcIj8+PGRlZmluaXRpb25zIHhtbG5zPVwiaHR0cDovL3d3dy5vbWcub3Jn
L3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTFwiIHhtbG5zOmJwbW5kaT1cImh0dHA6Ly93d3cub21n
Lm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvRElcIiB4bWxuczpvbWdkYz1cImh0dHA6Ly93d3cub21n
Lm9yZy9zcGVjL0RELzIwMTAwNTI0L0RDXCIgeG1sbnM6b21nZGk9XCJodHRwOi8vd3d3Lm9tZy5v
cmcvc3BlYy9ERC8yMDEwMDUyNC9ESVwiIHhtbG5zOnJlc2lsaWVudD1cImh0dHA6Ly9yZXNpbGll
bnQuaWJtLmNvbS9icG1uXCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWFcIiB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0
YW5jZVwiIHRhcmdldE5hbWVzcGFjZT1cImh0dHA6Ly93d3cuY2FtdW5kYS5vcmcvdGVzdFwiPjxw
cm9jZXNzIGlkPVwiZXhhbXBsZV9ncnBjX2NvbW11bmljYXRpb25faW50ZXJmYWNlXCIgaXNFeGVj
dXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBHUlBDIENvbW11bmljYXRpb24gSW50ZXJm
YWNlXCI+PGRvY3VtZW50YXRpb24+Q29tbXVuaWNhdGUgd2l0aCBHUlBDIFNlcnZlcnM8L2RvY3Vt
ZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIj48b3V0Z29pbmc+
U2VxdWVuY2VGbG93XzE0a3NrZm08L291dGdvaW5nPjwvc3RhcnRFdmVudD48c2VydmljZVRhc2sg
aWQ9XCJTZXJ2aWNlVGFza18xbmZjZnRmXCIgbmFtZT1cIkdSUENcIiByZXNpbGllbnQ6dHlwZT1c
ImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVpZD1c
IjBmOTY5NjA4LWYyMmYtNGE2Yi1hNzQzLWFmMDFhMjFkNjkzY1wiPntcImlucHV0c1wiOntcIjMz
YmY3YzQxLTFmNDUtNGQyYy1iOTE1LTkxMTQ1M2RiMWQ1ZVwiOntcImlucHV0X3R5cGVcIjpcInN0
YXRpY1wiLFwic3RhdGljX2lucHV0XCI6e1wibXVsdGlzZWxlY3RfdmFsdWVcIjpbXSxcInRleHRf
dmFsdWVcIjpcImxvY2FsaG9zdDo1MDA1MVwifX0sXCJkMDk4NzhkYy1kMTFmLTRlMmUtYjExMi1k
NTNlNTg4MmUyNWZcIjp7XCJpbnB1dF90eXBlXCI6XCJzdGF0aWNcIixcInN0YXRpY19pbnB1dFwi
OntcIm11bHRpc2VsZWN0X3ZhbHVlXCI6W10sXCJ0ZXh0X3ZhbHVlXCI6XCJoZWxsb3dvcmQ6U2F5
SGVsbG8oSGVsbG9SZXF1ZXN0KVwifX0sXCI5ZGRkZGY2Mi02MGY3LTQ1MGEtYTlhYy0yZmRiODVl
M2M0YTNcIjp7XCJpbnB1dF90eXBlXCI6XCJzdGF0aWNcIixcInN0YXRpY19pbnB1dFwiOntcIm11
bHRpc2VsZWN0X3ZhbHVlXCI6W10sXCJ0ZXh0X3ZhbHVlXCI6XCJ7XFxcIm5hbWVcXFwiOlxcXCJS
ZXNpbGllbnQgU3lzdGVtXFxcIn1cIn19fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImRh
dGFfcmVjZWl2ZWQgPSByZXN1bHRzWydzZXJ2ZXJfcmVzcG9uc2UnXVxcbnNlcnZlcl9hZGRyZXNz
ID0gcmVzdWx0c1snY2hhbm5lbCddXFxucmljaF90ZXh0ID0gaGVscGVyLmNyZWF0ZVJpY2hUZXh0
KFxcXCImbHQ7cCZndDsmbHQ7YiZndDtjaGFubmVsIDogJmx0Oy9iJmd0O3t9Jmx0Oy9wJmd0OyZs
dDtwJmd0OyZsdDtiJmd0O3t9Jmx0Oy9iJmd0OyZsdDsvcCZndDtcXFwiLmZvcm1hdChzZXJ2ZXJf
YWRkcmVzcyxkYXRhX3JlY2VpdmVkKSlcXG5pbmNpZGVudC5hZGROb3RlKHJpY2hfdGV4dClcIixc
InByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiZGljdF9kYXRhID0ge1xcXCJuYW1lXFxcIjpzdHIo
YXJ0aWZhY3QudmFsdWUpfVxcbmlucHV0cy5ncnBjX2Z1bmN0aW9uX2RhdGEgPSBzdHIoZGljdF9k
YXRhKVwifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5n
PlNlcXVlbmNlRmxvd18xNGtza2ZtPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB0
dXY2dHo8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNl
Rmxvd18xNGtza2ZtXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVm
PVwiU2VydmljZVRhc2tfMW5mY2Z0ZlwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8xdWtodnhw
XCI+PGluY29taW5nPlNlcXVlbmNlRmxvd18wdHV2NnR6PC9pbmNvbWluZz48L2VuZEV2ZW50Pjxz
ZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHR1djZ0elwiIHNvdXJjZVJlZj1cIlNlcnZp
Y2VUYXNrXzFuZmNmdGZcIiB0YXJnZXRSZWY9XCJFbmRFdmVudF8xdWtodnhwXCIvPjx0ZXh0QW5u
b3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdv
cmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3Nv
Y2lhdGlvbl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0
UmVmPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlh
Z3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1c
InVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxl
bWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+
PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTMxXCIgeT1cIjE4
OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1c
IjkwXCIgeD1cIjEyNlwiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQ
TU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFr
eHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQ
TU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0
OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTQ1
XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjNcIi8+PG9tZ2RpOndheXBvaW50IHg9
XCIxNDZcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1O
RWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzFuZmNmdGZc
IiBpZD1cIlNlcnZpY2VUYXNrXzFuZmNmdGZfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgw
XCIgd2lkdGg9XCIxMDBcIiB4PVwiMzM4LjMxODg2OTgyODQ1NjFcIiB5PVwiMTY2XCIvPjwvYnBt
bmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93
XzE0a3NrZm1cIiBpZD1cIlNlcXVlbmNlRmxvd18xNGtza2ZtX2RpXCI+PG9tZ2RpOndheXBvaW50
IHg9XCIxNjdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5
cG9pbnQgeD1cIjMzOFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1u
ZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTJcIiB3aWR0aD1cIjkwXCIgeD1c
IjIwNy41XCIgeT1cIjE4NVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRFdmVudF8xdWtodnhwXCIgaWQ9XCJF
bmRFdmVudF8xdWtodnhwX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwi
MzZcIiB4PVwiNTc1LjMxODg2OTgyODQ1NjFcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVs
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTJcIiB3aWR0aD1cIjBcIiB4PVwiNTkzLjMxODg2OTgy
ODQ1NjFcIiB5PVwiMjI4XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+
PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wdHV2NnR6XCIgaWQ9
XCJTZXF1ZW5jZUZsb3dfMHR1djZ0el9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNDM4XCIgeHNp
OnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI1NzVc
IiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjEyXCIgd2lkdGg9XCIwXCIgeD1cIjUwNi41XCIgeT1cIjE4
NVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBs
YW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgInZlcnNpb24iOiAzfSwg
ImFjdGlvbnMiOiBbXX1dLCAicm9sZXMiOiBbXSwgIndvcmtzcGFjZXMiOiBbXSwgImZ1bmN0aW9u
cyI6IFt7ImlkIjogMzYsICJuYW1lIjogImZ1bmN0aW9uX2dycGMiLCAiZGlzcGxheV9uYW1lIjog
IkdSUEMiLCAiZGVzY3JpcHRpb24iOiB7ImZvcm1hdCI6ICJ0ZXh0IiwgImNvbnRlbnQiOiAiQSBm
dW5jdGlvbiB0byBjb21tdW5pY2F0ZSB3aXRoIEdSUEMgU2VydmVycyBiYXNlZCBvbiB0aGUgQ29t
bXVuaWNhdGlvbiBNZXRob2RzIFNwZWNpZmllZC4ifSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJm
bl9ncnBjIiwgImV4cG9ydF9rZXkiOiAiZnVuY3Rpb25fZ3JwYyIsICJ1dWlkIjogIjBmOTY5NjA4
LWYyMmYtNGE2Yi1hNzQzLWFmMDFhMjFkNjkzYyIsICJ2ZXJzaW9uIjogMSwgImNyZWF0b3IiOiB7
ImlkIjogNiwgInR5cGUiOiAidXNlciIsICJuYW1lIjogIm5rYW5kaGExQGluLmlibS5jb20iLCAi
ZGlzcGxheV9uYW1lIjogIk5pdGluIEthbmRoYXJlICJ9LCAibGFzdF9tb2RpZmllZF9ieSI6IHsi
aWQiOiA2LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAibmthbmRoYTFAaW4uaWJtLmNvbSIsICJk
aXNwbGF5X25hbWUiOiAiTml0aW4gS2FuZGhhcmUgIn0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAx
NTUwNDkxOTI5NTU0LCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19p
ZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0
aW9uIiwgImNvbnRlbnQiOiAiMzNiZjdjNDEtMWY0NS00ZDJjLWI5MTUtOTExNDUzZGIxZDVlIiwg
InNob3dfbGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2lm
IjogbnVsbCwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rp
b24iLCAiY29udGVudCI6ICJkMDk4NzhkYy1kMTFmLTRlMmUtYjExMi1kNTNlNTg4MmUyNWYiLCAi
c2hvd19saW5rX2hlYWRlciI6IGZhbHNlfSwgeyJzdGVwX2xhYmVsIjogbnVsbCwgInNob3dfaWYi
OiBudWxsLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlv
biIsICJjb250ZW50IjogIjlkZGRkZjYyLTYwZjctNDUwYS1hOWFjLTJmZGI4NWUzYzRhMyIsICJz
aG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XSwgIndvcmtmbG93cyI6IFt7IndvcmtmbG93X2lkIjog
NDIsICJuYW1lIjogIkV4YW1wbGU6IEdSUEMgQ29tbXVuaWNhdGlvbiBJbnRlcmZhY2UiLCAicHJv
Z3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9ncnBjX2NvbW11bmljYXRpb25faW50ZXJmYWNlIiwg
Im9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImRlc2NyaXB0aW9uIjogbnVsbCwgInV1aWQiOiBu
dWxsLCAiYWN0aW9ucyI6IFtdfV19XX0=
"""
    )