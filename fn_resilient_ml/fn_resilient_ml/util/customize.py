# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_resilient_ml"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_resilient_ml package"""
    reload_params = {"package": u"fn_resilient_ml",
                    "incident_fields": [], 
                    "action_fields": [u"nlp_string", u"number_top_similar_incidents"], 
                    "function_params": [u"nlp_search_string", u"number_incidents", u"search_incident_id"], 
                    "datatables": [u"nlp_similar_incidents"], 
                    "message_destinations": [u"resilient_ml"], 
                    "functions": [u"resilient_nlp_search"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"resilient_nlp_search"], 
                    "actions": [u"NLP Search", u"NLP String Search"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     nlp_string
    #     number_top_similar_incidents
    #   Function inputs:
    #     nlp_search_string
    #     number_incidents
    #     search_incident_id
    #   DataTables:
    #     nlp_similar_incidents
    #   Message Destinations:
    #     resilient_ml
    #   Functions:
    #     resilient_nlp_search
    #   Workflows:
    #     resilient_nlp_search
    #   Rules:
    #     NLP Search
    #     NLP String Search


    yield ImportDefinition(u"""
eyJpbmR1c3RyaWVzIjogbnVsbCwgImlkIjogMTAsICJmdW5jdGlvbnMiOiBbeyJjcmVhdG9yIjog
eyJ0eXBlIjogInVzZXIiLCAibmFtZSI6ICJtYXN0ZXJAZXhhbXBsZS5jb20iLCAiZGlzcGxheV9u
YW1lIjogIm1hc3RlcmZpcnN0IG1hc3Rlcmxhc3QiLCAiaWQiOiAyfSwgImlkIjogMSwgIndvcmtm
bG93cyI6IFt7ImRlc2NyaXB0aW9uIjogbnVsbCwgImFjdGlvbnMiOiBbXSwgIndvcmtmbG93X2lk
IjogMSwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgIm5hbWUiOiAiRXhhbXBsZSBvZiBOTFAg
c2VhcmNoIiwgInV1aWQiOiBudWxsLCAicHJvZ3JhbW1hdGljX25hbWUiOiAicmVzaWxpZW50X25s
cF9zZWFyY2gifV0sICJkZXN0aW5hdGlvbl9oYW5kbGUiOiAicmVzaWxpZW50X21sIiwgInZpZXdf
aXRlbXMiOiBbeyJzdGVwX2xhYmVsIjogbnVsbCwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwg
ImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hv
d19pZiI6IG51bGwsICJjb250ZW50IjogIjk4MDIwNGE2LTNmNDMtNDBkOS1iNzIwLTcyMTM1MjFj
ZGY3NyJ9LCB7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAi
ZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93
X2lmIjogbnVsbCwgImNvbnRlbnQiOiAiOTQzMzQzYWYtMTEyNi00NzZkLWFhZDYtM2NmOWM2ZTg1
YTBjIn0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJl
bGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3df
aWYiOiBudWxsLCAiY29udGVudCI6ICJhZjlhMzc5ZS1hNDhiLTQ3ZGQtOThmYi03M2JhMzY4OGFk
OWEifV0sICJleHBvcnRfa2V5IjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgImxhc3RfbW9kaWZp
ZWRfdGltZSI6IDE1NzkxMDQwOTQ0MDMsICJkZXNjcmlwdGlvbiI6IHsiY29udGVudCI6ICIiLCAi
Zm9ybWF0IjogInRleHQifSwgInZlcnNpb24iOiAzLCAiZGlzcGxheV9uYW1lIjogIlJlc2lsaWVu
dCBOTFAgc2VhcmNoIiwgIm5hbWUiOiAicmVzaWxpZW50X25scF9zZWFyY2giLCAibGFzdF9tb2Rp
ZmllZF9ieSI6IHsidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAibWFzdGVyQGV4YW1wbGUuY29tIiwg
ImRpc3BsYXlfbmFtZSI6ICJtYXN0ZXJmaXJzdCBtYXN0ZXJsYXN0IiwgImlkIjogMn0sICJ1dWlk
IjogIjQ4Nzk2MGEzLThhMTItNDljMS1iODUyLTEzOWE2MDMxMTJlNiJ9XSwgInJlZ3VsYXRvcnMi
OiBudWxsLCAiYWN0aW9uX29yZGVyIjogW10sICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAz
MiwgInZlcnNpb24iOiAiMzIuMy4xMiIsICJtaW5vciI6IDMsICJidWlsZF9udW1iZXIiOiAxMn0s
ICJub3RpZmljYXRpb25zIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwgImxheW91dHMiOiBbXSwg
Imdlb3MiOiBudWxsLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgIndvcmtmbG93cyI6
IFt7ImV4cG9ydF9rZXkiOiAicmVzaWxpZW50X25scF9zZWFyY2giLCAiY29udGVudCI6IHsidmVy
c2lvbiI6IDE1LCAieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04
XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAx
MDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1O
LzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8y
MDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAx
MDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBt
blwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6
eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXRO
YW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cInJl
c2lsaWVudF9ubHBfc2VhcmNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxl
IG9mIE5MUCBzZWFyY2hcIj48ZG9jdW1lbnRhdGlvbj5HaXZlbiBhbiBpbmNpZGVudCwgdXNlIGl0
cyBuYW1lLCBkZXNjcmlwdGlvbiwgYXJ0aWZhY3QgZGVzY3JpcHRpb24sIGFuZCByZXNvbHV0aW9u
IHN1bW1hcnkgdG8gZG8gbmxwIHNlYXJjaCwgaW4gb3JkZXIgdG8gZmluZCBzaW1pbGFyIGluY2lk
ZW50cy48L2RvY3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1c
Ij48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB3ZzQ5dG48L291dGdvaW5nPjwvc3RhcnRFdmVudD48
c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18xYWF2c2Q5XCIgbmFtZT1cIlJlc2lsaWVudCBO
TFAgc2VhcmNoXCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50
cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI0ODc5NjBhMy04YTEyLTQ5YzEtYjg1Mi0xMzlh
NjAzMTEyZTZcIj57XCJpbnB1dHNcIjp7XCJhZjlhMzc5ZS1hNDhiLTQ3ZGQtOThmYi03M2JhMzY4
OGFkOWFcIjp7XCJpbnB1dF90eXBlXCI6XCJzdGF0aWNcIixcInN0YXRpY19pbnB1dFwiOntcIm11
bHRpc2VsZWN0X3ZhbHVlXCI6W10sXCJudW1iZXJfdmFsdWVcIjo1fX19LFwicG9zdF9wcm9jZXNz
aW5nX3NjcmlwdFwiOlwiXFxuZm9yIGluYyBpbiByZXN1bHRzLmluY2lkZW50czpcXG4gIGluY19y
b3cgPSBpbmNpZGVudC5hZGRSb3coXFxcIm5scF9zaW1pbGFyX2luY2lkZW50c1xcXCIpXFxuICBp
bmNfcm93W1xcXCJpbmNpZGVudF9pZFxcXCJdID0gaGVscGVyLmNyZWF0ZVJpY2hUZXh0KGluY1tc
XFwiaW5jX2xpbmtcXFwiXSlcXG4gIGluY19yb3dbXFxcInNpbWlsYXJpdHlcXFwiXSA9IHN0cihp
bmNbXFxcInNpbWlsYXJpdHlcXFwiXSlcXG4gIGluY19yb3dbXFxcImtleXdvcmRzXFxcIl0gPSBp
bmNbXFxcImtleXdvcmRzXFxcIl1cXG4gIGluY19yb3dbXFxcInNlYXJjaF90aW1lXFxcIl0gPSBy
ZXN1bHRzLnRpbWVcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiI1xcbiMgVG8gZG8gYSBO
TFAgc2VhcmNoLCB1c2VyIGNhbiBpbnB1dCBFSVRIRVIgYW4gaW5jaWRlbnQgaWQgb3IgYSBzdHJp
bmcuXFxuI1xcbiMgTk9URTogaWYgYm90aCBhcmUgZ2l2ZW4sIHRoZSBzdHJpbmcgd2lsbCBiZSB1
c2VkLlxcbiNcXG5cXG4jIHN1cHBvcnQgc2VhcmNoIHVzaW5nIGlucHV0IHN0cmluZ1xcbmlmIHJ1
bGUucHJvcGVydGllcy5ubHBfc3RyaW5nIGlzIG5vdCBOb25lIGFuZCBsZW4ocnVsZS5wcm9wZXJ0
aWVzLm5scF9zdHJpbmcuY29udGVudCkgJmd0OyAwOlxcbiAgaW5wdXRzLm5scF9zZWFyY2hfc3Ry
aW5nID0gcnVsZS5wcm9wZXJ0aWVzLm5scF9zdHJpbmcuY29udGVudFxcblxcbiMgc3VwcG9ydCBz
ZWFyY2ggdXNpbmcgYW4gaW5jaWRlbnQgaWQgIFxcbmlucHV0cy5zZWFyY2hfaW5jaWRlbnRfaWQg
PSBpbmNpZGVudC5pZFxcblxcbiMgYWxsb3cgdXNlciB0byBzcGVjaWZ5IGhvdyBtYW55IGluY2lk
ZW50cyB0byByZXR1cm5cXG5pZiBydWxlLnByb3BlcnRpZXMubnVtYmVyX3RvcF9zaW1pbGFyX2lu
Y2lkZW50cyAmZ3Q7IDA6XFxuICBpbnB1dHMubnVtYmVyX2luY2lkZW50cyA9IHJ1bGUucHJvcGVy
dGllcy5udW1iZXJfdG9wX3NpbWlsYXJfaW5jaWRlbnRzXFxuICBcXG5cIn08L3Jlc2lsaWVudDpm
dW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHdnNDl0
bjwvaW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18xMXZ6NXRmPC9vdXRnb2luZz48L3Nl
cnZpY2VUYXNrPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHdnNDl0blwiIHNvdXJj
ZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzFhYXZz
ZDlcIi8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMDdxeHpsOFwiPjxpbmNvbWluZz5TZXF1ZW5j
ZUZsb3dfMTF2ejV0ZjwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2Vx
dWVuY2VGbG93XzExdno1dGZcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xYWF2c2Q5XCIgdGFy
Z2V0UmVmPVwiRW5kRXZlbnRfMDdxeHpsOFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5u
b3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0Pjwv
dGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNv
dXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9u
XzFreHhpeXRcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMGIzcnlscFwi
Pjx0ZXh0PjwhW0NEQVRBW0lucHV0OlxuMS4gSW5jaWRlbnQgSURcbjIuIE51bWJlciBvZiBpbmNp
ZGVudHMgdG8gcmV0dXJuXG5dXT48L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24g
aWQ9XCJBc3NvY2lhdGlvbl8wamgwajVxXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMWFhdnNk
OVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzBiM3J5bHBcIi8+PHRleHRBbm5vdGF0aW9u
IGlkPVwiVGV4dEFubm90YXRpb25fMTF0d21obVwiPjx0ZXh0PjwhW0NEQVRBW1JldHVybjpcblNp
bWlsYXIgaW5jaWRlbnRzIHJhbmtlZCBieSBzaW1pbGFyaXR5XG5dXT48L3RleHQ+PC90ZXh0QW5u
b3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8wMTlsZzhpXCIgc291cmNlUmVm
PVwiU2VydmljZVRhc2tfMWFhdnNkOVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzExdHdt
aG1cIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+
PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFu
ZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1c
IiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZc
IiB3aWR0aD1cIjM2XCIgeD1cIjI0MlwiIHk9XCIxNjFcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIyMzdcIiB5PVwiMTk2XCIv
PjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUg
YnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlv
bl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIg
eD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBi
cG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVq
NDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjI0NVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMTg4XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY0XCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBt
bkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18xYWF2c2Q5XCIgaWQ9XCJTZXJ2aWNlVGFza18xYWF2c2Q5
X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjQwMFwi
IHk9XCIxMzlcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1l
bnQ9XCJTZXF1ZW5jZUZsb3dfMHdnNDl0blwiIGlkPVwiU2VxdWVuY2VGbG93XzB3ZzQ5dG5fZGlc
Ij48b21nZGk6d2F5cG9pbnQgeD1cIjI3OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MTc5XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDAwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIxNzlcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wi
IHdpZHRoPVwiMFwiIHg9XCIzMzlcIiB5PVwiMTU3XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2Jw
bW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50XzA3
cXh6bDhcIiBpZD1cIkVuZEV2ZW50XzA3cXh6bDhfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI2NjdcIiB5PVwiMTYxXCIvPjxicG1uZGk6QlBNTkxhYmVs
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNjg1XCIgeT1cIjIw
MFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVk
Z2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMTF2ejV0ZlwiIGlkPVwiU2VxdWVuY2VGbG93
XzExdno1dGZfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjUwMFwiIHhzaTp0eXBlPVwib21nZGM6
UG9pbnRcIiB5PVwiMTc5XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNjY3XCIgeHNpOnR5cGU9XCJv
bWdkYzpQb2ludFwiIHk9XCIxNzlcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBo
ZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI1ODMuNVwiIHk9XCIxNTdcIi8+PC9icG1uZGk6
QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50
PVwiVGV4dEFubm90YXRpb25fMGIzcnlscFwiIGlkPVwiVGV4dEFubm90YXRpb25fMGIzcnlscF9k
aVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNzFcIiB3aWR0aD1cIjIxOVwiIHg9XCIyMDBcIiB5
PVwiLTEzXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50
PVwiQXNzb2NpYXRpb25fMGpoMGo1cVwiIGlkPVwiQXNzb2NpYXRpb25fMGpoMGo1cV9kaVwiPjxv
bWdkaTp3YXlwb2ludCB4PVwiNDE0XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxMzlc
Ii8+PG9tZ2RpOndheXBvaW50IHg9XCIzNDFcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjU4XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwi
VGV4dEFubm90YXRpb25fMTF0d21obVwiIGlkPVwiVGV4dEFubm90YXRpb25fMTF0d21obV9kaVwi
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjIzOVwiIHg9XCI1MzBcIiB5PVwi
LTE3XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwi
QXNzb2NpYXRpb25fMDE5bGc4aVwiIGlkPVwiQXNzb2NpYXRpb25fMDE5bGc4aV9kaVwiPjxvbWdk
aTp3YXlwb2ludCB4PVwiNDk1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNDRcIi8+
PG9tZ2RpOndheXBvaW50IHg9XCI1OTlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjYz
XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlh
Z3JhbT48L2RlZmluaXRpb25zPiIsICJ3b3JrZmxvd19pZCI6ICJyZXNpbGllbnRfbmxwX3NlYXJj
aCJ9LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU4MDM5MTI1MjUyOSwgImRlc2NyaXB0aW9uIjog
IkdpdmVuIGFuIGluY2lkZW50LCB1c2UgaXRzIG5hbWUsIGRlc2NyaXB0aW9uLCBhcnRpZmFjdCBk
ZXNjcmlwdGlvbiwgYW5kIHJlc29sdXRpb24gc3VtbWFyeSB0byBkbyBubHAgc2VhcmNoLCBpbiBv
cmRlciB0byBmaW5kIHNpbWlsYXIgaW5jaWRlbnRzLiIsICJhY3Rpb25zIjogW10sICJ3b3JrZmxv
d19pZCI6IDEsICJjcmVhdG9yX2lkIjogIm1hc3RlckBleGFtcGxlLmNvbSIsICJvYmplY3RfdHlw
ZSI6ICJpbmNpZGVudCIsICJuYW1lIjogIkV4YW1wbGUgb2YgTkxQIHNlYXJjaCIsICJsYXN0X21v
ZGlmaWVkX2J5IjogIm1hc3RlckBleGFtcGxlLmNvbSIsICJ1dWlkIjogIjNhYTlkNzRjLWFkMjct
NGVlYi04MWViLTNlNzc1NDEzZjI5NyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJyZXNpbGllbnRf
bmxwX3NlYXJjaCJ9XSwgInJvbGVzIjogW10sICJ0YXNrX29yZGVyIjogW10sICJ0eXBlcyI6IFt7
ImlkIjogbnVsbCwgInBhcmVudF90eXBlcyI6IFsiaW5jaWRlbnQiXSwgInR5cGVfaWQiOiA4LCAi
dHlwZV9uYW1lIjogIm5scF9zaW1pbGFyX2luY2lkZW50cyIsICJleHBvcnRfa2V5IjogIm5scF9z
aW1pbGFyX2luY2lkZW50cyIsICJzY3JpcHRzIjogW10sICJmb3Jfd29ya2Zsb3dzIjogZmFsc2Us
ICJkaXNwbGF5X25hbWUiOiAiTkxQIFNpbWlsYXIgSW5jaWRlbnRzIiwgImZpZWxkcyI6IHsic2Vh
cmNoX3RpbWUiOiB7ImNhbGN1bGF0ZWQiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAi
aW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImV4cG9ydF9rZXkiOiAibmxwX3NpbWlsYXJfaW5jaWRlbnRz
L3NlYXJjaF90aW1lIiwgImNob3NlbiI6IGZhbHNlLCAidGV4dCI6ICJTZWFyY2ggVGltZSIsICJ3
aWR0aCI6IDM2LCAicmVhZF9vbmx5IjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90
ZXh0IjogZmFsc2UsICJpZCI6IDE1OSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidHlwZV9pZCI6
IDEwMDAsICJwcmVmaXgiOiBudWxsLCAidXVpZCI6ICJhYzNlZGE3Ny05N2FhLTRkM2QtOGY1Mi04
MTdkZjgwODVlOTgiLCAidG9vbHRpcCI6ICIiLCAidmFsdWVzIjogW10sICJoaWRlX25vdGlmaWNh
dGlvbiI6IGZhbHNlLCAib3JkZXIiOiAzLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFs
c2UsICJwbGFjZWhvbGRlciI6ICIiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJ0ZW1wbGF0ZXMiOiBb
XSwgIm9wZXJhdGlvbnMiOiBbXSwgIm5hbWUiOiAic2VhcmNoX3RpbWUiLCAiZGVwcmVjYXRlZCI6
IGZhbHNlfSwgImtleXdvcmRzIjogeyJjYWxjdWxhdGVkIjogZmFsc2UsICJibGFua19vcHRpb24i
OiB0cnVlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImV4cG9ydF9rZXkiOiAibmxwX3NpbWlsYXJf
aW5jaWRlbnRzL2tleXdvcmRzIiwgImNob3NlbiI6IHRydWUsICJ0ZXh0IjogIktleXdvcmRzIiwg
IndpZHRoIjogNTEsICJyZWFkX29ubHkiOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJyaWNo
X3RleHQiOiBmYWxzZSwgImlkIjogMTU2LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0eXBlX2lk
IjogMTAwMCwgInByZWZpeCI6IG51bGwsICJ1dWlkIjogIjcyMzgwMTNkLWZmMGEtNGRlZS1iZDFh
LTAzMjQ4OTY2MWU1MyIsICJ0b29sdGlwIjogImtleXdvcmRzIGlkZW50aWZpZWQgYnkgTkxQIiwg
InZhbHVlcyI6IFtdLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgIm9yZGVyIjogMiwgImRl
ZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgImNoYW5n
ZWFibGUiOiB0cnVlLCAidGVtcGxhdGVzIjogW10sICJvcGVyYXRpb25zIjogW10sICJuYW1lIjog
ImtleXdvcmRzIiwgImRlcHJlY2F0ZWQiOiBmYWxzZX0sICJpbmNpZGVudF9pZCI6IHsiY2FsY3Vs
YXRlZCI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnB1dF90eXBlIjogInRleHRh
cmVhIiwgImV4cG9ydF9rZXkiOiAibmxwX3NpbWlsYXJfaW5jaWRlbnRzL2luY2lkZW50X2lkIiwg
ImNob3NlbiI6IGZhbHNlLCAidGV4dCI6ICJJbmNpZGVudCBJRCIsICJ3aWR0aCI6IDY3NiwgInJl
YWRfb25seSI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IHRydWUsICJp
ZCI6IDE1NCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidHlwZV9pZCI6IDEwMDAsICJwcmVmaXgi
OiBudWxsLCAidXVpZCI6ICI2ZWIzMTUzZi1kMmE3LTQxMmUtOTE2YS1kNGM4YThiMTJiOWMiLCAi
dG9vbHRpcCI6ICJsaW5rIHRvIHNpbWlsYXIgaW5jaWRlbnQiLCAidmFsdWVzIjogW10sICJoaWRl
X25vdGlmaWNhdGlvbiI6IGZhbHNlLCAib3JkZXIiOiAwLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJ0ZW1w
bGF0ZXMiOiBbXSwgIm9wZXJhdGlvbnMiOiBbXSwgIm5hbWUiOiAiaW5jaWRlbnRfaWQiLCAiZGVw
cmVjYXRlZCI6IGZhbHNlfSwgInNpbWlsYXJpdHkiOiB7ImNhbGN1bGF0ZWQiOiBmYWxzZSwgImJs
YW5rX29wdGlvbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgImV4cG9ydF9rZXkiOiAi
bmxwX3NpbWlsYXJfaW5jaWRlbnRzL3NpbWlsYXJpdHkiLCAiY2hvc2VuIjogZmFsc2UsICJ0ZXh0
IjogIlNpbWlsYXJpdHkiLCAid2lkdGgiOiA2NCwgInJlYWRfb25seSI6IGZhbHNlLCAiaW50ZXJu
YWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiaWQiOiAxNTUsICJvcGVyYXRpb25fcGVy
bXMiOiB7fSwgInR5cGVfaWQiOiAxMDAwLCAicHJlZml4IjogbnVsbCwgInV1aWQiOiAiZjg4ZmRh
OTQtZDcwYy00NTQ0LWI0MzUtY2QyYzc0ODBiMDMxIiwgInRvb2x0aXAiOiAiIiwgInZhbHVlcyI6
IFtdLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgIm9yZGVyIjogMSwgImRlZmF1bHRfY2hv
c2VuX2J5X3NlcnZlciI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgImNoYW5nZWFibGUiOiB0
cnVlLCAidGVtcGxhdGVzIjogW10sICJvcGVyYXRpb25zIjogW10sICJuYW1lIjogInNpbWlsYXJp
dHkiLCAiZGVwcmVjYXRlZCI6IGZhbHNlfX0sICJhY3Rpb25zIjogW10sICJmb3JfY3VzdG9tX2Zp
ZWxkcyI6IGZhbHNlLCAicHJvcGVydGllcyI6IHsiZm9yX3dobyI6IFtdLCAiY2FuX2NyZWF0ZSI6
IGZhbHNlLCAiY2FuX2Rlc3Ryb3kiOiBmYWxzZX0sICJmb3Jfbm90aWZpY2F0aW9ucyI6IGZhbHNl
LCAidXVpZCI6ICI3NTc0Njk0Yy04N2Y3LTQ5MzAtOTFiZi0xMjFhMzg0NTQ3NzgiLCAiZm9yX2Fj
dGlvbnMiOiBmYWxzZX1dLCAicGhhc2VzIjogW10sICJpbmNpZGVudF90eXBlcyI6IFt7ImRlc2Ny
aXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJ1cGRhdGVfZGF0
ZSI6IDE1ODA5MTAwODA1MTEsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVy
bmFsKSIsICJwYXJlbnRfaWQiOiBudWxsLCAiZW5hYmxlZCI6IGZhbHNlLCAiY3JlYXRlX2RhdGUi
OiAxNTgwOTEwMDgwNTExLCAiaGlkZGVuIjogZmFsc2UsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6
YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1h
ZDM5LTRhMDAwNDA0NGFhMCIsICJpZCI6IDAsICJzeXN0ZW0iOiBmYWxzZX1dLCAibG9jYWxlIjog
bnVsbCwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJvdmVycmlkZXMiOiBbXSwgImZpZWxk
cyI6IFt7ImNhbGN1bGF0ZWQiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW5wdXRf
dHlwZSI6ICJib29sZWFuIiwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvaW5jX3RyYWluaW5nIiwg
ImNob3NlbiI6IGZhbHNlLCAidGV4dCI6ICJTaW11bGF0aW9uIiwgInJlYWRfb25seSI6IHRydWUs
ICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJpZCI6IDYwLCAib3BlcmF0
aW9uX3Blcm1zIjoge30sICJ0eXBlX2lkIjogMCwgInByZWZpeCI6IG51bGwsICJ1dWlkIjogImMz
ZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJ0b29sdGlwIjogIldoZXRoZXIg
dGhlIGluY2lkZW50IGlzIGEgc2ltdWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuIFRoaXMg
ZmllbGQgaXMgcmVhZC1vbmx5LiIsICJ2YWx1ZXMiOiBbXSwgImhpZGVfbm90aWZpY2F0aW9uIjog
ZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0
cnVlLCAidGVtcGxhdGVzIjogW10sICJvcGVyYXRpb25zIjogW10sICJuYW1lIjogImluY190cmFp
bmluZyIsICJkZXByZWNhdGVkIjogZmFsc2V9LCB7ImNhbGN1bGF0ZWQiOiBmYWxzZSwgImJsYW5r
X29wdGlvbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAiZXhwb3J0X2tleSI6ICJh
Y3Rpb25pbnZvY2F0aW9uL251bWJlcl90b3Bfc2ltaWxhcl9pbmNpZGVudHMiLCAiY2hvc2VuIjog
ZmFsc2UsICJ0ZXh0IjogIk51bWJlciBvZiBpbmNpZGVudHMiLCAicmVhZF9vbmx5IjogZmFsc2Us
ICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJpZCI6IDE1MywgIm9wZXJh
dGlvbl9wZXJtcyI6IHt9LCAidHlwZV9pZCI6IDYsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJ1
dWlkIjogImU1YmY2YjVmLWUyNWUtNDJjMS04ODQzLTJmYWI1Y2NiYjAzNiIsICJ0b29sdGlwIjog
Ik51bWJlciBvZiB0b3Agc2ltaWxhciBpbmNpZGVudHMgdG8gcmV0dXIiLCAidmFsdWVzIjogW10s
ICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJwbGFjZWhvbGRlciI6ICJkZWZhdWx0IHZhbHVlIHNldCBpbiB3b3JrZmxvdyIsICJj
aGFuZ2VhYmxlIjogdHJ1ZSwgInRlbXBsYXRlcyI6IFtdLCAib3BlcmF0aW9ucyI6IFtdLCAibmFt
ZSI6ICJudW1iZXJfdG9wX3NpbWlsYXJfaW5jaWRlbnRzIiwgImRlcHJlY2F0ZWQiOiBmYWxzZX0s
IHsiY2FsY3VsYXRlZCI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnB1dF90eXBl
IjogInRleHRhcmVhIiwgImV4cG9ydF9rZXkiOiAiYWN0aW9uaW52b2NhdGlvbi9ubHBfc3RyaW5n
IiwgImNob3NlbiI6IGZhbHNlLCAidGV4dCI6ICJOTFAgU3RyaW5nIiwgInJlYWRfb25seSI6IGZh
bHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiaWQiOiAxNTgsICJv
cGVyYXRpb25fcGVybXMiOiB7fSwgInR5cGVfaWQiOiA2LCAicHJlZml4IjogInByb3BlcnRpZXMi
LCAidXVpZCI6ICJhYzhlYTY5ZC0xZmRlLTRlNjAtYmJlZi03ZDM4ZDE0ZmE1MWUiLCAidG9vbHRp
cCI6ICJzZWFyY2ggZm9yIGluY2lkZW50cyB3aXRoIGRlc2NyaXB0aW9ucyBzaW1pbGFyIHRvIHRo
aXMgc3RyaW5nIiwgInZhbHVlcyI6IFtdLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImRl
ZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgImNoYW5n
ZWFibGUiOiB0cnVlLCAidGVtcGxhdGVzIjogW10sICJvcGVyYXRpb25zIjogW10sICJuYW1lIjog
Im5scF9zdHJpbmciLCAiZGVwcmVjYXRlZCI6IGZhbHNlfSwgeyJjYWxjdWxhdGVkIjogZmFsc2Us
ICJibGFua19vcHRpb24iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgImV4cG9ydF9r
ZXkiOiAiX19mdW5jdGlvbi9zZWFyY2hfaW5jaWRlbnRfaWQiLCAiY2hvc2VuIjogZmFsc2UsICJ0
ZXh0IjogInNlYXJjaF9pbmNpZGVudF9pZCIsICJyZWFkX29ubHkiOiBmYWxzZSwgImludGVybmFs
IjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgImlkIjogMTUyLCAib3BlcmF0aW9uX3Blcm1z
Ijoge30sICJ0eXBlX2lkIjogMTEsICJwcmVmaXgiOiBudWxsLCAidXVpZCI6ICI5ODAyMDRhNi0z
ZjQzLTQwZDktYjcyMC03MjEzNTIxY2RmNzciLCAidG9vbHRpcCI6ICJpbmNpZGVudCB0byBzZWFy
Y2ggdXNpbmcgTkxQIiwgInZhbHVlcyI6IFtdLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwg
ImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiaW5jaWRl
bnQgaWQiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJ0ZW1wbGF0ZXMiOiBbXSwgIm9wZXJhdGlvbnMi
OiBbXSwgIm5hbWUiOiAic2VhcmNoX2luY2lkZW50X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZX0s
IHsiY2FsY3VsYXRlZCI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnB1dF90eXBl
IjogInRleHQiLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL25scF9zZWFyY2hfc3RyaW5nIiwg
ImNob3NlbiI6IGZhbHNlLCAidGV4dCI6ICJubHBfc2VhcmNoX3N0cmluZyIsICJyZWFkX29ubHki
OiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgImlkIjogMTU3
LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0eXBlX2lkIjogMTEsICJwcmVmaXgiOiBudWxsLCAi
dXVpZCI6ICI5NDMzNDNhZi0xMTI2LTQ3NmQtYWFkNi0zY2Y5YzZlODVhMGMiLCAidG9vbHRpcCI6
ICJVc2UgTkxQIHRvIHNlYXJjaCB0aGlzIHN0cmluZyIsICJ2YWx1ZXMiOiBbXSwgImhpZGVfbm90
aWZpY2F0aW9uIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInBs
YWNlaG9sZGVyIjogInNlYXJjaCBzdHJpbmciLCAiY2hhbmdlYWJsZSI6IHRydWUsICJ0ZW1wbGF0
ZXMiOiBbXSwgIm9wZXJhdGlvbnMiOiBbXSwgIm5hbWUiOiAibmxwX3NlYXJjaF9zdHJpbmciLCAi
ZGVwcmVjYXRlZCI6IGZhbHNlfSwgeyJjYWxjdWxhdGVkIjogZmFsc2UsICJibGFua19vcHRpb24i
OiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlv
bi9udW1iZXJfaW5jaWRlbnRzIiwgImNob3NlbiI6IGZhbHNlLCAidGV4dCI6ICJudW1iZXJfaW5j
aWRlbnRzIiwgInJlYWRfb25seSI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAiaWQiOiAxNTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInR5cGVfaWQiOiAx
MSwgInByZWZpeCI6IG51bGwsICJ1dWlkIjogImFmOWEzNzllLWE0OGItNDdkZC05OGZiLTczYmEz
Njg4YWQ5YSIsICJ0b29sdGlwIjogIk51bWJlciBvZiBpbmNpZGVudHMgdG8gcmV0dXJuIGZvciB0
b3Agc2ltaWxhcml0eSIsICJ2YWx1ZXMiOiBbXSwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2Us
ICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIm51bWJl
ciBvZiBpbmNpZGVudCB0byByZXR1cm4iLCAiY2hhbmdlYWJsZSI6IHRydWUsICJ0ZW1wbGF0ZXMi
OiBbXSwgIm9wZXJhdGlvbnMiOiBbXSwgIm5hbWUiOiAibnVtYmVyX2luY2lkZW50cyIsICJkZXBy
ZWNhdGVkIjogZmFsc2V9XSwgImFjdGlvbnMiOiBbeyJpZCI6IDE0LCAibG9naWNfdHlwZSI6ICJh
bGwiLCAid29ya2Zsb3dzIjogWyJyZXNpbGllbnRfbmxwX3NlYXJjaCJdLCAidHlwZSI6IDEsICJl
eHBvcnRfa2V5IjogIk5MUCBTZWFyY2giLCAiY29uZGl0aW9ucyI6IFtdLCAidmlld19pdGVtcyI6
IFt7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVu
dCI6ICJodG1sIiwgImZpZWxkX3R5cGUiOiBudWxsLCAic2hvd19pZiI6IG51bGwsICJjb250ZW50
IjogIkZpbmQgdG9wIGluY2lkZW50cyBzaW1pbGFyIHRvIHRoaXMgb25lLCBiYXNlZCBvbiBuYW1l
IGFuZCBkZXNjcmlwdGlvbiB1c2luZyBOTFAuIn0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93
X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlw
ZSI6ICJhY3Rpb25pbnZvY2F0aW9uIiwgInNob3dfaWYiOiBudWxsLCAiY29udGVudCI6ICJlNWJm
NmI1Zi1lMjVlLTQyYzEtODg0My0yZmFiNWNjYmIwMzYifSwgeyJzdGVwX2xhYmVsIjogbnVsbCwg
InNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiaHRtbCIsICJmaWVsZF90eXBl
IjogbnVsbCwgInNob3dfaWYiOiBudWxsLCAiY29udGVudCI6ICI8YSBocmVmPVwiaHR0cHM6Ly9n
aXRodWIuaWJtLmNvbS9SZXNpbGllbnQvcmVzaWxpZW50LWNvbW11bml0eS1hcHBzL2Jsb2Ivbmxw
X2VwaWMvZm5fcmVzaWxpZW50X21sL2RvYy9oZWxwLm1kXCI+IEhlbHA8L2E+In1dLCAibWVzc2Fn
ZV9kZXN0aW5hdGlvbnMiOiBbXSwgImF1dG9tYXRpb25zIjogW10sICJvYmplY3RfdHlwZSI6ICJp
bmNpZGVudCIsICJuYW1lIjogIk5MUCBTZWFyY2giLCAidXVpZCI6ICJiMDM5YWE0Ny1kMDMzLTRh
NTYtYmM2OC1lZmJmMjIxM2Y2ODAiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDB9LCB7ImlkIjog
MTUsICJsb2dpY190eXBlIjogImFsbCIsICJ3b3JrZmxvd3MiOiBbInJlc2lsaWVudF9ubHBfc2Vh
cmNoIl0sICJ0eXBlIjogMSwgImV4cG9ydF9rZXkiOiAiTkxQIFN0cmluZyBTZWFyY2giLCAiY29u
ZGl0aW9ucyI6IFtdLCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19s
aW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJodG1sIiwgImZpZWxkX3R5cGUiOiBudWxs
LCAic2hvd19pZiI6IG51bGwsICJjb250ZW50IjogIlNlYXJjaCBmb3IgaW5jaWRlbnRzIHdpdGgg
ZGVzY3JpcHRpb24gc2ltaWxhciB0byB0aGUgZm9sbG93aW5nIHN0cmluZy4ifSwgeyJzdGVwX2xh
YmVsIjogbnVsbCwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRf
dXVpZCIsICJmaWVsZF90eXBlIjogImFjdGlvbmludm9jYXRpb24iLCAic2hvd19pZiI6IG51bGws
ICJjb250ZW50IjogImFjOGVhNjlkLTFmZGUtNGU2MC1iYmVmLTdkMzhkMTRmYTUxZSJ9LCB7InN0
ZXBfbGFiZWwiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJm
aWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiYWN0aW9uaW52b2NhdGlvbiIsICJzaG93X2lmIjog
bnVsbCwgImNvbnRlbnQiOiAiZTViZjZiNWYtZTI1ZS00MmMxLTg4NDMtMmZhYjVjY2JiMDM2In1d
LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXSwgImF1dG9tYXRpb25zIjogW10sICJvYmplY3Rf
dHlwZSI6ICJpbmNpZGVudCIsICJuYW1lIjogIk5MUCBTdHJpbmcgU2VhcmNoIiwgInV1aWQiOiAi
YzU2Zjg2YmUtYmMwYy00NmJmLThiNGMtMTk0MmVjOTg1YzRlIiwgInRpbWVvdXRfc2Vjb25kcyI6
IDg2NDAwfV0sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjog
W3sidXVpZCI6ICI4ZGExYWM0OC01ZmZmLTQ5MDktOGE5My0xZjZiMWMwOWE1NjUiLCAidXNlcnMi
OiBbIm1hc3RlckBleGFtcGxlLmNvbSJdLCAiZXhwZWN0X2FjayI6IHRydWUsICJleHBvcnRfa2V5
IjogInJlc2lsaWVudF9tbCIsICJuYW1lIjogInJlc2lsaWVudF9tbCIsICJkZXN0aW5hdGlvbl90
eXBlIjogMCwgInByb2dyYW1tYXRpY19uYW1lIjogInJlc2lsaWVudF9tbCJ9XSwgImV4cG9ydF9k
YXRlIjogMTU4MDkxMDA0MzIwOCwgInRpbWVmcmFtZXMiOiBudWxsLCAic2NyaXB0cyI6IFtdfQ==
"""
    )