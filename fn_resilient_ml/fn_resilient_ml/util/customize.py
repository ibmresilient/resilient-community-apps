# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_resilient_ml"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_resilient_ml package"""
    reload_params = {"package": u"fn_resilient_ml",
                    "incident_fields": [], 
                    "action_fields": [u"number_top_similar_incidents"], 
                    "function_params": [u"number_incidents", u"search_incident_id"], 
                    "datatables": [u"nlp_similar_incidents"], 
                    "message_destinations": [u"resilient_ml"], 
                    "functions": [u"resilient_nlp_search"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"resilient_nlp_search"], 
                    "actions": [u"NLP Search"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     number_top_similar_incidents
    #   Function inputs:
    #     number_incidents
    #     search_incident_id
    #   DataTables:
    #     nlp_similar_incidents
    #   Message Destinations:
    #     resilient_ml
    #   Functions:
    #     resilient_nlp_search
    #   Workflows:
    #     resilient_nlp_search
    #   Rules:
    #     NLP Search


    yield ImportDefinition(u"""
eyJhY3Rpb25fb3JkZXIiOiBbXSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJ0YWdz
IjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7Im5hbWUiOiAicmVzaWxpZW50X21sIiwg
ImV4cG9ydF9rZXkiOiAicmVzaWxpZW50X21sIiwgInV1aWQiOiAiNTFlNjU5ZTItNDdmMi00OTRk
LTgxM2QtN2IwN2MyZDFjNzUyIiwgInVzZXJzIjogWyJtYXN0ZXJAZXhhbXBsZS5jb20iXSwgImRl
c3RpbmF0aW9uX3R5cGUiOiAwLCAidGFncyI6IFtdLCAicHJvZ3JhbW1hdGljX25hbWUiOiAicmVz
aWxpZW50X21sIiwgImV4cGVjdF9hY2siOiB0cnVlLCAiYXBpX2tleXMiOiBbXX1dLCAiZXhwb3J0
X2RhdGUiOiAxNTcxNjc4MzI1MzA0LCAic2NyaXB0cyI6IFtdLCAidHlwZXMiOiBbeyJ0eXBlX2lk
IjogOCwgImFjdGlvbnMiOiBbXSwgInBhcmVudF90eXBlcyI6IFsiaW5jaWRlbnQiXSwgInV1aWQi
OiAiMzFmMTA0NmYtM2FhNS00YzRhLWJiNWUtNWNkOWJkNTBmMWU4IiwgInNjcmlwdHMiOiBbXSwg
ImZvcl9jdXN0b21fZmllbGRzIjogZmFsc2UsICJmb3JfYWN0aW9ucyI6IGZhbHNlLCAicHJvcGVy
dGllcyI6IHsiY2FuX2Rlc3Ryb3kiOiBmYWxzZSwgImNhbl9jcmVhdGUiOiBmYWxzZSwgImZvcl93
aG8iOiBbXX0sICJleHBvcnRfa2V5IjogIm5scF9zaW1pbGFyX2luY2lkZW50cyIsICJmb3Jfd29y
a2Zsb3dzIjogZmFsc2UsICJkaXNwbGF5X25hbWUiOiAiTkxQIFNpbWlsYXIgSW5jaWRlbnRzIiwg
ImZvcl9ub3RpZmljYXRpb25zIjogZmFsc2UsICJmaWVsZHMiOiB7ImluY2lkZW50X2lkIjogeyJw
cmVmaXgiOiBudWxsLCAibmFtZSI6ICJpbmNpZGVudF9pZCIsICJ3aWR0aCI6IDY4OSwgInR5cGVf
aWQiOiAxMDAwLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRp
b24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJjYWxjdWxhdGVkIjogZmFsc2UsICJvcGVy
YXRpb25zIjogW10sICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICJjNmYwYTYyYi1iZGVlLTQ1
ODgtOWI2NC03Mzg2YmM5ZWQyM2IiLCAib3JkZXIiOiAwLCAidGFncyI6IFtdLCAiYWxsb3dfZGVm
YXVsdF92YWx1ZSI6IGZhbHNlLCAidGV4dCI6ICJJbmNpZGVudCBJRCIsICJkZXByZWNhdGVkIjog
ZmFsc2UsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgImNob3NlbiI6IGZhbHNlLCAicmljaF90ZXh0
IjogdHJ1ZSwgInRvb2x0aXAiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4dGFyZWEiLCAidGVtcGxh
dGVzIjogW10sICJyZWFkX29ubHkiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAibmxwX3NpbWlsYXJf
aW5jaWRlbnRzL2luY2lkZW50X2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJ2YWx1
ZXMiOiBbXSwgImlkIjogMTg1LCAiY2hhbmdlYWJsZSI6IHRydWV9LCAic2ltaWxhcml0eSI6IHsi
cHJlZml4IjogbnVsbCwgIm5hbWUiOiAic2ltaWxhcml0eSIsICJ3aWR0aCI6IDUxLCAidHlwZV9p
ZCI6IDEwMDAsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlv
biI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgIm9wZXJh
dGlvbnMiOiBbXSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogIjc5MjU5MDg2LWE4MWMtNDc2
My1hNGM2LTVlODQwNTczNzI3NCIsICJvcmRlciI6IDEsICJ0YWdzIjogW10sICJhbGxvd19kZWZh
dWx0X3ZhbHVlIjogZmFsc2UsICJ0ZXh0IjogIlNpbWlsYXJpdHkiLCAiZGVwcmVjYXRlZCI6IGZh
bHNlLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJjaG9zZW4iOiBmYWxzZSwgInJpY2hfdGV4dCI6
IGZhbHNlLCAidG9vbHRpcCI6ICIiLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInRlbXBsYXRlcyI6
IFtdLCAicmVhZF9vbmx5IjogZmFsc2UsICJleHBvcnRfa2V5IjogIm5scF9zaW1pbGFyX2luY2lk
ZW50cy9zaW1pbGFyaXR5IiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJ2YWx1ZXMiOiBb
XSwgImlkIjogMTg2LCAiY2hhbmdlYWJsZSI6IHRydWV9fSwgInR5cGVfbmFtZSI6ICJubHBfc2lt
aWxhcl9pbmNpZGVudHMiLCAidGFncyI6IFtdLCAiaWQiOiBudWxsfV0sICJvdmVycmlkZXMiOiBb
XSwgInJvbGVzIjogW10sICJ0YXNrX29yZGVyIjogW10sICJub3RpZmljYXRpb25zIjogbnVsbCwg
ImluZHVzdHJpZXMiOiBudWxsLCAid29ya2Zsb3dzIjogW3siYWN0aW9ucyI6IFtdLCAidXVpZCI6
ICJjYjdlNDBmMS0wODc4LTRmYjAtYjQ2My0yZmE3M2VmMjAwZWMiLCAid29ya2Zsb3dfaWQiOiAx
LCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiY3JlYXRvcl9pZCI6ICJtYXN0ZXJAZXhhbXBs
ZS5jb20iLCAiY29udGVudCI6IHsid29ya2Zsb3dfaWQiOiAicmVzaWxpZW50X25scF9zZWFyY2gi
LCAieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZp
bml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9E
RUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0
L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9E
Q1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElc
IiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5z
OnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9
XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cInJlc2lsaWVudF9u
bHBfc2VhcmNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlIG9mIE5MUCBz
ZWFyY2hcIj48ZG9jdW1lbnRhdGlvbj5HaXZlbiBhbiBpbmNpZGVudCwgdXNlIGl0cyBuYW1lLCBk
ZXNjcmlwdGlvbiwgYXJ0aWZhY3QgZGVzY3JpcHRpb24sIGFuZCByZXNvbHV0aW9uIHN1bW1hcnkg
dG8gZG8gbmxwIHNlYXJjaCwgaW4gb3JkZXIgdG8gZmluZCBzaW1pbGFyIGluY2lkZW50cy48L2Rv
Y3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIj48b3V0Z29p
bmc+U2VxdWVuY2VGbG93XzFyNDE2dzg8L291dGdvaW5nPjwvc3RhcnRFdmVudD48c2VydmljZVRh
c2sgaWQ9XCJTZXJ2aWNlVGFza18wOWd3bWQyXCIgbmFtZT1cIlJlc2lsaWVudCBubHAgc2VhcmNo
XCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxp
ZW50OmZ1bmN0aW9uIHV1aWQ9XCJiNzRhM2U2ZC01MjIzLTRkMTItODk1Yy1lMGI1ZjVlZTI5Yzlc
Ij57XCJpbnB1dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIlxcbmZvciBpbmMg
aW4gcmVzdWx0cy5pbmNpZGVudHM6XFxuICBpbmNfcm93ID0gaW5jaWRlbnQuYWRkUm93KFxcXCJu
bHBfc2ltaWxhcl9pbmNpZGVudHNcXFwiKVxcbiAgaW5jX3Jvd1tcXFwiaW5jaWRlbnRfaWRcXFwi
XSA9IGhlbHBlci5jcmVhdGVSaWNoVGV4dChpbmNbXFxcImluY19saW5rXFxcIl0pXFxuICBpbmNf
cm93W1xcXCJzaW1pbGFyaXR5XFxcIl0gPSBzdHIoaW5jW1xcXCJzaW1pbGFyaXR5XFxcIl0pXFxu
XFxuXFxuICBcIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5wdXRzLnNlYXJjaF9pbmNp
ZGVudF9pZCA9IGluY2lkZW50LmlkXFxuaW5wdXRzLm51bWJlcl9pbmNpZGVudHMgPSBydWxlLnBy
b3BlcnRpZXMubnVtYmVyX3RvcF9zaW1pbGFyX2luY2lkZW50c1wifTwvcmVzaWxpZW50OmZ1bmN0
aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xcjQxNnc4PC9p
bmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzFjdHVsZjQ8L291dGdvaW5nPjwvc2Vydmlj
ZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xcjQxNnc4XCIgc291cmNlUmVm
PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMDlnd21kMlwi
Lz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8xbHNsY21nXCI+PGluY29taW5nPlNlcXVlbmNlRmxv
d18xY3R1bGY0PC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5j
ZUZsb3dfMWN0dWxmNFwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzA5Z3dtZDJcIiB0YXJnZXRS
ZWY9XCJFbmRFdmVudF8xbHNsY21nXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0
aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0
QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgc291cmNl
UmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWt4
eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8wdGgzbjRvXCI+PHRl
eHQ+PCFbQ0RBVEFbSW5wdXQ6XG4xLiBJbmNpZGVudCBJRFxuMi4gTnVtYmVyIG9mIGluY2lkZW50
cyB0byByZXR1cm5cbl1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1c
IkFzc29jaWF0aW9uXzFvbWRpam5cIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wOWd3bWQyXCIg
dGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMHRoM240b1wiLz48dGV4dEFubm90YXRpb24gaWQ9
XCJUZXh0QW5ub3RhdGlvbl8wOWh0NGZtXCI+PHRleHQ+PCFbQ0RBVEFbUmV0dXJuOlxuU2ltaWxh
ciBpbmNpZGVudHMgcmFua2VkIGJ5IHNpbWlsYXJpdHlcbl1dPjwvdGV4dD48L3RleHRBbm5vdGF0
aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzB1dnpwOXRcIiBzb3VyY2VSZWY9XCJT
ZXJ2aWNlVGFza18wOWd3bWQyXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMDlodDRmbVwi
Lz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBt
bmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFc
Ij48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlk
PVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdp
ZHRoPVwiMzZcIiB4PVwiMzUwXCIgeT1cIjE2OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjM0NVwiIHk9XCIyMDNcIi8+PC9i
cG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1u
RWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFr
eHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwi
OTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5F
bGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9k
aVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMzUxXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9
XCIxOTFcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxODVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50
XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxl
bWVudD1cIlNlcnZpY2VUYXNrXzA5Z3dtZDJcIiBpZD1cIlNlcnZpY2VUYXNrXzA5Z3dtZDJfZGlc
Ij48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiNTEwXCIgeT1c
IjE0NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1c
IlNlcXVlbmNlRmxvd18xcjQxNnc4XCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMXI0MTZ3OF9kaVwiPjxv
bWdkaTp3YXlwb2ludCB4PVwiMzg2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODZc
Ii8+PG9tZ2RpOndheXBvaW50IHg9XCI1MTBcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjE4NlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lk
dGg9XCIwXCIgeD1cIjQ0OFwiIHk9XCIxNjRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRp
OkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMWxzbGNt
Z1wiIGlkPVwiRW5kRXZlbnRfMWxzbGNtZ19kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZc
IiB3aWR0aD1cIjM2XCIgeD1cIjc5OC45MDk4NzUzNTk1Mzk4XCIgeT1cIjE2OFwiLz48YnBtbmRp
OkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjgx
Ni45MDk4NzUzNTk1Mzk4XCIgeT1cIjIwN1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6
QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMWN0
dWxmNFwiIGlkPVwiU2VxdWVuY2VGbG93XzFjdHVsZjRfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1c
IjYxMFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTg2XCIvPjxvbWdkaTp3YXlwb2lu
dCB4PVwiNzk5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODZcIi8+PGJwbW5kaTpC
UE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI3MDQu
NVwiIHk9XCIxNjRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1u
ZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMHRoM240b1wiIGlkPVwi
VGV4dEFubm90YXRpb25fMHRoM240b19kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODJcIiB3
aWR0aD1cIjExMlwiIHg9XCIzMThcIiB5PVwiLTEzXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBt
bmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMW9tZGlqblwiIGlkPVwiQXNz
b2NpYXRpb25fMW9tZGlqbl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNTE3XCIgeHNpOnR5cGU9
XCJvbWdkYzpQb2ludFwiIHk9XCIxNDlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0MjFcIiB4c2k6
dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjY5XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6
QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMDlodDRmbVwiIGlkPVwiVGV4
dEFubm90YXRpb25fMDlodDRmbV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNzhcIiB3aWR0
aD1cIjEwN1wiIHg9XCI2ODRcIiB5PVwiLTlcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8wdXZ6cDl0XCIgaWQ9XCJBc3NvY2lh
dGlvbl8wdXZ6cDl0X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI2MDNcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjE0OVwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjY5NFwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiNjlcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBN
TlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgInZlcnNpb24iOiA2
fSwgImNvbnRlbnRfdmVyc2lvbiI6IDYsICJuYW1lIjogIkV4YW1wbGUgb2YgTkxQIHNlYXJjaCIs
ICJleHBvcnRfa2V5IjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgInRhZ3MiOiBbXSwgImRlc2Ny
aXB0aW9uIjogIkdpdmVuIGFuIGluY2lkZW50LCB1c2UgaXRzIG5hbWUsIGRlc2NyaXB0aW9uLCBh
cnRpZmFjdCBkZXNjcmlwdGlvbiwgYW5kIHJlc29sdXRpb24gc3VtbWFyeSB0byBkbyBubHAgc2Vh
cmNoLCBpbiBvcmRlciB0byBmaW5kIHNpbWlsYXIgaW5jaWRlbnRzLiIsICJwcm9ncmFtbWF0aWNf
bmFtZSI6ICJyZXNpbGllbnRfbmxwX3NlYXJjaCIsICJsYXN0X21vZGlmaWVkX2J5IjogIm1hc3Rl
ckBleGFtcGxlLmNvbSIsICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTcxNjcwMzIwNTMxfV0sICJh
Y3Rpb25zIjogW3sibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXSwgInZpZXdfaXRlbXMiOiBbeyJj
b250ZW50IjogIkFkdmFuY2VkIFNlYXJjaCBQb3dlcmVkIGJ5IE5MUCIsICJmaWVsZF90eXBlIjog
bnVsbCwgInNob3dfaWYiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVu
dCI6ICJoZWFkZXIiLCAic3RlcF9sYWJlbCI6IG51bGx9LCB7ImNvbnRlbnQiOiAiMDFjOGU1NWUt
NTNiMC00M2ExLWI2ODctMDAzMTExZjU1NjBjIiwgImZpZWxkX3R5cGUiOiAiYWN0aW9uaW52b2Nh
dGlvbiIsICJzaG93X2lmIjogbnVsbCwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1l
bnQiOiAiZmllbGRfdXVpZCIsICJzdGVwX2xhYmVsIjogbnVsbH0sIHsiY29udGVudCI6ICI8YSBo
cmVmPVwiaHR0cHM6Ly9naXRodWIuaWJtLmNvbS9SZXNpbGllbnQvcmVzaWxpZW50LWNvbW11bml0
eS1hcHBzL2Jsb2IvbWFzdGVyL2ZuX21hY2hpbmVfbGVhcm5pbmcvUkVBRE1FLm1kXCI+IEhlbHA8
L2E+IiwgImZpZWxkX3R5cGUiOiBudWxsLCAic2hvd19pZiI6IG51bGwsICJzaG93X2xpbmtfaGVh
ZGVyIjogZmFsc2UsICJlbGVtZW50IjogImh0bWwiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgIm5h
bWUiOiAiTkxQIFNlYXJjaCIsICJjb25kaXRpb25zIjogW10sICJhdXRvbWF0aW9ucyI6IFtdLCAi
b2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJlbmFi
bGVkIjogdHJ1ZSwgImV4cG9ydF9rZXkiOiAiTkxQIFNlYXJjaCIsICJpZCI6IDE4LCAidXVpZCI6
ICI4MWQ2OTkxOS0xNzFiLTQ3NTItOTk3Ni03NGYzOTRmOTRjZjAiLCAidGFncyI6IFtdLCAid29y
a2Zsb3dzIjogWyJyZXNpbGllbnRfbmxwX3NlYXJjaCJdLCAibG9naWNfdHlwZSI6ICJhbGwiLCAi
dHlwZSI6IDF9XSwgImZpZWxkcyI6IFt7InByZWZpeCI6IG51bGwsICJuYW1lIjogIm51bWJlcl9p
bmNpZGVudHMiLCAidHlwZV9pZCI6IDExLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFs
c2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIjUiLCAiY2FsY3VsYXRl
ZCI6IGZhbHNlLCAib3BlcmF0aW9ucyI6IFtdLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAi
NWYyZWUwOGMtZjQ4Yi00NzcyLTg1MTAtZTM3Y2QyMDJkMGQ5IiwgInRhZ3MiOiBbXSwgImFsbG93
X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgInRleHQiOiAibnVtYmVyX2luY2lkZW50cyIsICJkZXBy
ZWNhdGVkIjogZmFsc2UsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgImNob3NlbiI6IGZhbHNlLCAi
cmljaF90ZXh0IjogZmFsc2UsICJ0b29sdGlwIjogIk51bWJlciBvZiBpbmNpZGVudHMgdG8gcmV0
dXJuIGZvciB0b3Agc2ltaWxhcml0eSIsICJpbnB1dF90eXBlIjogIm51bWJlciIsICJ0ZW1wbGF0
ZXMiOiBbXSwgInJlYWRfb25seSI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL251
bWJlcl9pbmNpZGVudHMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInZhbHVlcyI6IFtd
LCAiaWQiOiAxODIsICJjaGFuZ2VhYmxlIjogdHJ1ZX0sIHsicHJlZml4IjogbnVsbCwgIm5hbWUi
OiAic2VhcmNoX2luY2lkZW50X2lkIiwgInR5cGVfaWQiOiAxMSwgImRlZmF1bHRfY2hvc2VuX2J5
X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIi
LCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAib3BlcmF0aW9ucyI6IFtdLCAiaW50ZXJuYWwiOiBmYWxz
ZSwgInV1aWQiOiAiZWUzNWZjY2UtYmUwZi00N2ExLWI1ZDYtN2QwOTEwMDUwMDJiIiwgInRhZ3Mi
OiBbXSwgImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgInRleHQiOiAic2VhcmNoX2luY2lk
ZW50X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAiY2hv
c2VuIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRvb2x0aXAiOiAiaW5jaWRlbnQgdG8g
c2VhcmNoIHVzaW5nIE5MUC4iLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAidGVtcGxhdGVzIjog
W10sICJyZWFkX29ubHkiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9zZWFyY2hf
aW5jaWRlbnRfaWQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAi
aWQiOiAxODMsICJjaGFuZ2VhYmxlIjogdHJ1ZX0sIHsicHJlZml4IjogInByb3BlcnRpZXMiLCAi
bmFtZSI6ICJudW1iZXJfdG9wX3NpbWlsYXJfaW5jaWRlbnRzIiwgInR5cGVfaWQiOiA2LCAiZGVm
YXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgInBs
YWNlaG9sZGVyIjogIjUiLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAib3BlcmF0aW9ucyI6IFtdLCAi
aW50ZXJuYWwiOiBmYWxzZSwgInV1aWQiOiAiMDFjOGU1NWUtNTNiMC00M2ExLWI2ODctMDAzMTEx
ZjU1NjBjIiwgInRhZ3MiOiBbXSwgImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgInRleHQi
OiAiTnVtYmVyIG9mIGluY2lkZW50cyB0byByZXR1cm4iLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAi
b3BlcmF0aW9uX3Blcm1zIjoge30sICJjaG9zZW4iOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNl
LCAidG9vbHRpcCI6ICJOdW1iZXIgb2YgdG9wIHNpbWlsYXIgaW5jaWRlbnRzIHRvIHJldHVybiIs
ICJpbnB1dF90eXBlIjogIm51bWJlciIsICJ0ZW1wbGF0ZXMiOiBbXSwgInJlYWRfb25seSI6IGZh
bHNlLCAiZXhwb3J0X2tleSI6ICJhY3Rpb25pbnZvY2F0aW9uL251bWJlcl90b3Bfc2ltaWxhcl9p
bmNpZGVudHMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAiaWQi
OiAxODQsICJjaGFuZ2VhYmxlIjogdHJ1ZX0sIHsicHJlZml4IjogbnVsbCwgIm5hbWUiOiAiaW5j
X3RyYWluaW5nIiwgInR5cGVfaWQiOiAwLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFs
c2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgIm9wZXJhdGlv
bnMiOiBbXSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjogImMzZjBlM2VkLTIxZTEtNGQ1My1h
ZmZiLWZlNWNhMzMwOGNjYSIsICJ0YWdzIjogW10sICJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFs
c2UsICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAib3BlcmF0aW9u
X3Blcm1zIjoge30sICJjaG9zZW4iOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidG9vbHRp
cCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGlu
Y2lkZW50LiBUaGlzIGZpZWxkIGlzIHJlYWQtb25seS4iLCAiaW5wdXRfdHlwZSI6ICJib29sZWFu
IiwgInRlbXBsYXRlcyI6IFtdLCAicmVhZF9vbmx5IjogdHJ1ZSwgImV4cG9ydF9rZXkiOiAiaW5j
aWRlbnQvaW5jX3RyYWluaW5nIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJ2YWx1ZXMi
OiBbXSwgImlkIjogNTksICJjaGFuZ2VhYmxlIjogdHJ1ZX1dLCAid29ya3NwYWNlcyI6IFtdLCAi
aW5ib3VuZF9tYWlsYm94ZXMiOiBudWxsLCAiZ2VvcyI6IG51bGwsICJwaGFzZXMiOiBbXSwgImF1
dG9tYXRpY190YXNrcyI6IFtdLCAiZ3JvdXBzIjogbnVsbCwgImxheW91dHMiOiBbXSwgInRpbWVm
cmFtZXMiOiBudWxsLCAic2VydmVyX3ZlcnNpb24iOiB7Im1ham9yIjogMzQsICJidWlsZF9udW1i
ZXIiOiA0NywgInZlcnNpb24iOiAiMzQuMi40NyIsICJtaW5vciI6IDJ9LCAiZnVuY3Rpb25zIjog
W3siZGVzdGluYXRpb25faGFuZGxlIjogInJlc2lsaWVudF9tbCIsICJ2aWV3X2l0ZW1zIjogW3si
Y29udGVudCI6ICJlZTM1ZmNjZS1iZTBmLTQ3YTEtYjVkNi03ZDA5MTAwNTAwMmIiLCAiZmllbGRf
dHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfaWYiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6
IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJj
b250ZW50IjogIjVmMmVlMDhjLWY0OGItNDc3Mi04NTEwLWUzN2NkMjAyZDBkOSIsICJmaWVsZF90
eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19pZiI6IG51bGwsICJzaG93X2xpbmtfaGVhZGVyIjog
ZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgIm5h
bWUiOiAicmVzaWxpZW50X25scF9zZWFyY2giLCAidXVpZCI6ICJiNzRhM2U2ZC01MjIzLTRkMTIt
ODk1Yy1lMGI1ZjVlZTI5YzkiLCAidmVyc2lvbiI6IDQsICJ3b3JrZmxvd3MiOiBbeyJ3b3JrZmxv
d19pZCI6IDEsICJhY3Rpb25zIjogW10sICJuYW1lIjogIkV4YW1wbGUgb2YgTkxQIHNlYXJjaCIs
ICJ1dWlkIjogbnVsbCwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgInRhZ3MiOiBbXSwgInBy
b2dyYW1tYXRpY19uYW1lIjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgImRlc2NyaXB0aW9uIjog
bnVsbH1dLCAiY3JlYXRvciI6IHsibmFtZSI6ICJtYXN0ZXJAZXhhbXBsZS5jb20iLCAiaWQiOiA0
LCAiZGlzcGxheV9uYW1lIjogIm1hc3RlcmZpcnN0IG1hc3Rlcmxhc3QiLCAidHlwZSI6ICJ1c2Vy
In0sICJleHBvcnRfa2V5IjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgImlkIjogMSwgImRpc3Bs
YXlfbmFtZSI6ICJSZXNpbGllbnQgbmxwIHNlYXJjaCIsICJ0YWdzIjogW10sICJkZXNjcmlwdGlv
biI6IHsiY29udGVudCI6IG51bGwsICJmb3JtYXQiOiAidGV4dCJ9LCAibGFzdF9tb2RpZmllZF9i
eSI6IHsibmFtZSI6ICJtYXN0ZXJAZXhhbXBsZS5jb20iLCAiaWQiOiA0LCAiZGlzcGxheV9uYW1l
IjogIm1hc3RlcmZpcnN0IG1hc3Rlcmxhc3QiLCAidHlwZSI6ICJ1c2VyIn0sICJsYXN0X21vZGlm
aWVkX3RpbWUiOiAxNTcxNjYyODk3NzE5fV0sICJsb2NhbGUiOiBudWxsLCAiaW5jaWRlbnRfdHlw
ZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1NzE2Nzg0Mzg4MTEsICJoaWRkZW4iOiBmYWxzZSwgIm5h
bWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImNyZWF0ZV9kYXRlIjog
MTU3MTY3ODQzODgxMSwgInBhcmVudF9pZCI6IG51bGwsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAt
MTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJzeXN0ZW0iOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAi
Q3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImVuYWJsZWQiOiBmYWxzZSwgImlk
IjogMCwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSJ9
XSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJyZWd1bGF0b3JzIjogbnVsbCwgImlkIjog
MX0=
"""
    )