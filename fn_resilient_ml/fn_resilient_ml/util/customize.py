# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_resilient_ml"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_resilient_ml package"""
    reload_params = {"package": u"fn_resilient_ml",
                    "incident_fields": [], 
                    "action_fields": [u"number_top_similar_incidents"], 
                    "function_params": [u"number_incidents", u"search_incident_id"], 
                    "datatables": [u"nlp_similar_incidents"], 
                    "message_destinations": [u"resilient_ml"], 
                    "functions": [u"resilient_nlp_search"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"resilient_nlp_search"], 
                    "actions": [u"NLP Search"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     number_top_similar_incidents
    #   Function inputs:
    #     number_incidents
    #     search_incident_id
    #   DataTables:
    #     nlp_similar_incidents
    #   Message Destinations:
    #     resilient_ml
    #   Functions:
    #     resilient_nlp_search
    #   Workflows:
    #     resilient_nlp_search
    #   Rules:
    #     NLP Search


    yield ImportDefinition(u"""
eyJmaWVsZHMiOiBbeyJkZXByZWNhdGVkIjogZmFsc2UsICJyZWFkX29ubHkiOiB0cnVlLCAiY2hv
c2VuIjogZmFsc2UsICJ0b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lkZW50IGlzIGEgc2ltdWxh
dGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuIFRoaXMgZmllbGQgaXMgcmVhZC1vbmx5LiIsICJv
cGVyYXRpb25zIjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImRlZmF1bHRfY2hvc2VuX2J5X3Nl
cnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJjYWxjdWxhdGVkIjogZmFsc2Us
ICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwgInR5cGVfaWQi
OiAwLCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAidmFs
dWVzIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFs
c2UsICJyaWNoX3RleHQiOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJwcmVmaXgiOiBudWxs
LCAiaWQiOiA2MCwgInRlbXBsYXRlcyI6IFtdLCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAiZXhw
b3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmcifSwgeyJkZXByZWNhdGVkIjogZmFsc2Us
ICJyZWFkX29ubHkiOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAidG9vbHRpcCI6ICJOdW1iZXIg
b2YgdG9wIHNpbWlsYXIgaW5jaWRlbnRzIHRvIHJldHVyIiwgIm9wZXJhdGlvbnMiOiBbXSwgImNo
YW5nZWFibGUiOiB0cnVlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFu
a19vcHRpb24iOiBmYWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgInRleHQiOiAiTnVtYmVyIG9m
IGluY2lkZW50cyIsICJpbnB1dF90eXBlIjogIm51bWJlciIsICJ0eXBlX2lkIjogNiwgInV1aWQi
OiAiZTViZjZiNWYtZTI1ZS00MmMxLTg4NDMtMmZhYjVjY2JiMDM2IiwgInBsYWNlaG9sZGVyIjog
ImRlZmF1bHQgdmFsdWUgc2V0IGluIHdvcmtmbG93IiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAi
aGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiaW50ZXJuYWwi
OiBmYWxzZSwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgImlkIjogMTUzLCAidGVtcGxhdGVzIjog
W10sICJuYW1lIjogIm51bWJlcl90b3Bfc2ltaWxhcl9pbmNpZGVudHMiLCAidmFsdWVzIjogW10s
ICJleHBvcnRfa2V5IjogImFjdGlvbmludm9jYXRpb24vbnVtYmVyX3RvcF9zaW1pbGFyX2luY2lk
ZW50cyJ9LCB7ImRlcHJlY2F0ZWQiOiBmYWxzZSwgInJlYWRfb25seSI6IGZhbHNlLCAiY2hvc2Vu
IjogZmFsc2UsICJ0b29sdGlwIjogImluY2lkZW50IHRvIHNlYXJjaCB1c2luZyBOTFAiLCAib3Bl
cmF0aW9ucyI6IFtdLCAiY2hhbmdlYWJsZSI6IHRydWUsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2
ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAi
dGV4dCI6ICJzZWFyY2hfaW5jaWRlbnRfaWQiLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAidHlw
ZV9pZCI6IDExLCAidXVpZCI6ICI5ODAyMDRhNi0zZjQzLTQwZDktYjcyMC03MjEzNTIxY2RmNzci
LCAicGxhY2Vob2xkZXIiOiAiaW5jaWRlbnQgaWQiLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJo
aWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJpbnRlcm5hbCI6
IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImlkIjogMTUyLCAidGVtcGxhdGVzIjogW10sICJuYW1l
IjogInNlYXJjaF9pbmNpZGVudF9pZCIsICJ2YWx1ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19m
dW5jdGlvbi9zZWFyY2hfaW5jaWRlbnRfaWQifSwgeyJkZXByZWNhdGVkIjogZmFsc2UsICJyZWFk
X29ubHkiOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAidG9vbHRpcCI6ICJOdW1iZXIgb2YgaW5j
aWRlbnRzIHRvIHJldHVybiBmb3IgdG9wIHNpbWlsYXJpdHkiLCAib3BlcmF0aW9ucyI6IFtdLCAi
Y2hhbmdlYWJsZSI6IHRydWUsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJs
YW5rX29wdGlvbiI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAidGV4dCI6ICJudW1iZXJf
aW5jaWRlbnRzIiwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgInR5cGVfaWQiOiAxMSwgInV1aWQi
OiAiYWY5YTM3OWUtYTQ4Yi00N2RkLTk4ZmItNzNiYTM2ODhhZDlhIiwgInBsYWNlaG9sZGVyIjog
Im51bWJlciBvZiBpbmNpZGVudCB0byByZXR1cm4iLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJo
aWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJpbnRlcm5hbCI6
IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImlkIjogMTUxLCAidGVtcGxhdGVzIjogW10sICJuYW1l
IjogIm51bWJlcl9pbmNpZGVudHMiLCAidmFsdWVzIjogW10sICJleHBvcnRfa2V5IjogIl9fZnVu
Y3Rpb24vbnVtYmVyX2luY2lkZW50cyJ9XSwgInNjcmlwdHMiOiBbXSwgInBoYXNlcyI6IFtdLCAi
bm90aWZpY2F0aW9ucyI6IG51bGwsICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlwdGlvbiI6ICJHaXZl
biBhbiBpbmNpZGVudCwgdXNlIGl0cyBuYW1lLCBkZXNjcmlwdGlvbiwgYXJ0aWZhY3QgZGVzY3Jp
cHRpb24sIGFuZCByZXNvbHV0aW9uIHN1bW1hcnkgdG8gZG8gbmxwIHNlYXJjaCwgaW4gb3JkZXIg
dG8gZmluZCBzaW1pbGFyIGluY2lkZW50cy4iLCAiY3JlYXRvcl9pZCI6ICJtYXN0ZXJAZXhhbXBs
ZS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGlu
Zz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVj
L0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcv
c3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcv
c3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3Nw
ZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50Lmli
bS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1h
XCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2Vc
IiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2Vz
cyBpZD1cInJlc2lsaWVudF9ubHBfc2VhcmNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9
XCJFeGFtcGxlIG9mIE5MUCBzZWFyY2hcIj48ZG9jdW1lbnRhdGlvbj5HaXZlbiBhbiBpbmNpZGVu
dCwgdXNlIGl0cyBuYW1lLCBkZXNjcmlwdGlvbiwgYXJ0aWZhY3QgZGVzY3JpcHRpb24sIGFuZCBy
ZXNvbHV0aW9uIHN1bW1hcnkgdG8gZG8gbmxwIHNlYXJjaCwgaW4gb3JkZXIgdG8gZmluZCBzaW1p
bGFyIGluY2lkZW50cy48L2RvY3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50
XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB3ZzQ5dG48L291dGdvaW5nPjwvc3Rh
cnRFdmVudD48c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18xYWF2c2Q5XCIgbmFtZT1cIlJl
c2lsaWVudCBOTFAgc2VhcmNoXCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNp
b25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI0ODc5NjBhMy04YTEyLTQ5YzEt
Yjg1Mi0xMzlhNjAzMTEyZTZcIj57XCJpbnB1dHNcIjp7XCJhZjlhMzc5ZS1hNDhiLTQ3ZGQtOThm
Yi03M2JhMzY4OGFkOWFcIjp7XCJpbnB1dF90eXBlXCI6XCJzdGF0aWNcIixcInN0YXRpY19pbnB1
dFwiOntcIm11bHRpc2VsZWN0X3ZhbHVlXCI6W10sXCJudW1iZXJfdmFsdWVcIjo1fX19LFwicG9z
dF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiXFxuZm9yIGluYyBpbiByZXN1bHRzLmluY2lkZW50czpc
XG4gIGluY19yb3cgPSBpbmNpZGVudC5hZGRSb3coXFxcIm5scF9zaW1pbGFyX2luY2lkZW50c1xc
XCIpXFxuICBpbmNfcm93W1xcXCJpbmNpZGVudF9pZFxcXCJdID0gaGVscGVyLmNyZWF0ZVJpY2hU
ZXh0KGluY1tcXFwiaW5jX2xpbmtcXFwiXSlcXG4gIGluY19yb3dbXFxcInNpbWlsYXJpdHlcXFwi
XSA9IHN0cihpbmNbXFxcInNpbWlsYXJpdHlcXFwiXSlcIixcInByZV9wcm9jZXNzaW5nX3Njcmlw
dFwiOlwiaW5wdXRzLnNlYXJjaF9pbmNpZGVudF9pZCA9IGluY2lkZW50LmlkXFxuaWYgcnVsZS5w
cm9wZXJ0aWVzLm51bWJlcl90b3Bfc2ltaWxhcl9pbmNpZGVudHMgJmd0OyAwOlxcbiAgaW5wdXRz
Lm51bWJlcl9pbmNpZGVudHMgPSBydWxlLnByb3BlcnRpZXMubnVtYmVyX3RvcF9zaW1pbGFyX2lu
Y2lkZW50c1wifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29t
aW5nPlNlcXVlbmNlRmxvd18wd2c0OXRuPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93
XzExdno1dGY8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVl
bmNlRmxvd18wd2c0OXRuXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0
UmVmPVwiU2VydmljZVRhc2tfMWFhdnNkOVwiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8wN3F4
emw4XCI+PGluY29taW5nPlNlcXVlbmNlRmxvd18xMXZ6NXRmPC9pbmNvbWluZz48L2VuZEV2ZW50
PjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMTF2ejV0ZlwiIHNvdXJjZVJlZj1cIlNl
cnZpY2VUYXNrXzFhYXZzZDlcIiB0YXJnZXRSZWY9XCJFbmRFdmVudF8wN3F4emw4XCIvPjx0ZXh0
QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3Vy
IHdvcmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJB
c3NvY2lhdGlvbl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFy
Z2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJU
ZXh0QW5ub3RhdGlvbl8wYjNyeWxwXCI+PHRleHQ+PCFbQ0RBVEFbSW5wdXQ6XG4xLiBJbmNpZGVu
dCBJRFxuMi4gTnVtYmVyIG9mIGluY2lkZW50cyB0byByZXR1cm5cbl1dPjwvdGV4dD48L3RleHRB
bm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzBqaDBqNXFcIiBzb3VyY2VS
ZWY9XCJTZXJ2aWNlVGFza18xYWF2c2Q5XCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMGIz
cnlscFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xMXR3bWhtXCI+PHRl
eHQ+PCFbQ0RBVEFbUmV0dXJuOlxuU2ltaWxhciBpbmNpZGVudHMgcmFua2VkIGJ5IHNpbWlsYXJp
dHlcbl1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0
aW9uXzAxOWxnOGlcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xYWF2c2Q5XCIgdGFyZ2V0UmVm
PVwiVGV4dEFubm90YXRpb25fMTF0d21obVwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3Jh
bSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVu
ZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVu
dD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMjQyXCIgeT1cIjE2MVwi
Lz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkw
XCIgeD1cIjIzN1wiIHk9XCIxOTZcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5T
aGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhp
eXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5T
aGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwi
IGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMjQ1XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODhcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIx
NjRcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRn
ZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzFhYXZzZDlcIiBp
ZD1cIlNlcnZpY2VUYXNrXzFhYXZzZDlfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIg
d2lkdGg9XCIxMDBcIiB4PVwiNDAwXCIgeT1cIjEzOVwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJw
bW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wd2c0OXRuXCIgaWQ9XCJT
ZXF1ZW5jZUZsb3dfMHdnNDl0bl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMjc4XCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNzlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0MDBcIiB4
c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE3OVwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21n
ZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjMzOVwiIHk9XCIxNTdcIi8+
PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJw
bW5FbGVtZW50PVwiRW5kRXZlbnRfMDdxeHpsOFwiIGlkPVwiRW5kRXZlbnRfMDdxeHpsOF9kaVwi
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjY2N1wiIHk9XCIx
NjFcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRo
PVwiMFwiIHg9XCI2ODVcIiB5PVwiMjAwXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpC
UE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xMXZ6
NXRmXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMTF2ejV0Zl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwi
NTAwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNzlcIi8+PG9tZ2RpOndheXBvaW50
IHg9XCI2NjdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE3OVwiLz48YnBtbmRpOkJQ
TU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjU4My41
XCIgeT1cIjE1N1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5k
aTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8wYjNyeWxwXCIgaWQ9XCJU
ZXh0QW5ub3RhdGlvbl8wYjNyeWxwX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI3MVwiIHdp
ZHRoPVwiMjE5XCIgeD1cIjIwMFwiIHk9XCItMTNcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1u
ZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8wamgwajVxXCIgaWQ9XCJBc3Nv
Y2lhdGlvbl8wamgwajVxX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0MTRcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjEzOVwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjM0MVwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiNThcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpC
UE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xMXR3bWhtXCIgaWQ9XCJUZXh0
QW5ub3RhdGlvbl8xMXR3bWhtX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRo
PVwiMjM5XCIgeD1cIjUzMFwiIHk9XCItMTdcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8wMTlsZzhpXCIgaWQ9XCJBc3NvY2lh
dGlvbl8wMTlsZzhpX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0OTVcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjE0NFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjU5OVwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiNjNcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBN
TlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93X2lk
IjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgInZlcnNpb24iOiA0fSwgInV1aWQiOiAiM2FhOWQ3
NGMtYWQyNy00ZWViLTgxZWItM2U3NzU0MTNmMjk3IiwgImFjdGlvbnMiOiBbXSwgIndvcmtmbG93
X2lkIjogMSwgInByb2dyYW1tYXRpY19uYW1lIjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgImxh
c3RfbW9kaWZpZWRfdGltZSI6IDE1NzIzNTM0NTM5MDAsICJuYW1lIjogIkV4YW1wbGUgb2YgTkxQ
IHNlYXJjaCIsICJsYXN0X21vZGlmaWVkX2J5IjogIm1hc3RlckBleGFtcGxlLmNvbSIsICJleHBv
cnRfa2V5IjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50
In1dLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJ0YXNrX29yZGVyIjogW10sICJtZXNzYWdlX2Rl
c3RpbmF0aW9ucyI6IFt7InV1aWQiOiAiOGRhMWFjNDgtNWZmZi00OTA5LThhOTMtMWY2YjFjMDlh
NTY1IiwgImV4cGVjdF9hY2siOiB0cnVlLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJwcm9ncmFt
bWF0aWNfbmFtZSI6ICJyZXNpbGllbnRfbWwiLCAidXNlcnMiOiBbIm1hc3RlckBleGFtcGxlLmNv
bSJdLCAibmFtZSI6ICJyZXNpbGllbnRfbWwiLCAiZXhwb3J0X2tleSI6ICJyZXNpbGllbnRfbWwi
fV0sICJhY3Rpb25zIjogW3siY29uZGl0aW9ucyI6IFtdLCAidHlwZSI6IDEsICJhdXRvbWF0aW9u
cyI6IFtdLCAibG9naWNfdHlwZSI6ICJhbGwiLCAid29ya2Zsb3dzIjogWyJyZXNpbGllbnRfbmxw
X3NlYXJjaCJdLCAiaWQiOiAxNCwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgInV1aWQiOiAi
YjAzOWFhNDctZDAzMy00YTU2LWJjNjgtZWZiZjIyMTNmNjgwIiwgIm1lc3NhZ2VfZGVzdGluYXRp
b25zIjogW10sICJ2aWV3X2l0ZW1zIjogW3siZWxlbWVudCI6ICJodG1sIiwgImZpZWxkX3R5cGUi
OiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiY29udGVudCI6ICJGaW5kIHRvcCBp
bmNpZGVudHMgc2ltaWxhciB0byB0aGlzIG9uZSwgYmFzZWQgb24gbmFtZSBhbmQgZGVzY3JpcHRp
b24gdXNpbmcgTkxQLiIsICJzaG93X2lmIjogbnVsbCwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJl
bGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJhY3Rpb25pbnZvY2F0aW9uIiwg
InNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImNvbnRlbnQiOiAiZTViZjZiNWYtZTI1ZS00MmMx
LTg4NDMtMmZhYjVjY2JiMDM2IiwgInNob3dfaWYiOiBudWxsLCAic3RlcF9sYWJlbCI6IG51bGx9
LCB7ImVsZW1lbnQiOiAiaHRtbCIsICJmaWVsZF90eXBlIjogbnVsbCwgInNob3dfbGlua19oZWFk
ZXIiOiBmYWxzZSwgImNvbnRlbnQiOiAiPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmlibS5jb20v
UmVzaWxpZW50L3Jlc2lsaWVudC1jb21tdW5pdHktYXBwcy9ibG9iL25scF9lcGljL2ZuX3Jlc2ls
aWVudF9tbC9kb2MvaGVscC5tZFwiPiBIZWxwPC9hPiIsICJzaG93X2lmIjogbnVsbCwgInN0ZXBf
bGFiZWwiOiBudWxsfV0sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgIm5hbWUiOiAiTkxQIFNl
YXJjaCIsICJleHBvcnRfa2V5IjogIk5MUCBTZWFyY2gifV0sICJpbmNpZGVudF9hcnRpZmFjdF90
eXBlcyI6IFtdLCAidHlwZXMiOiBbeyJmaWVsZHMiOiB7ImluY2lkZW50X2lkIjogeyJkZXByZWNh
dGVkIjogZmFsc2UsICJyZWFkX29ubHkiOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAidG9vbHRp
cCI6ICJsaW5rIHRvIHNpbWlsYXIgaW5jaWRlbnQiLCAib3BlcmF0aW9ucyI6IFtdLCAiY2hhbmdl
YWJsZSI6IHRydWUsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29w
dGlvbiI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAidGV4dCI6ICJJbmNpZGVudCBJRCIs
ICJpbnB1dF90eXBlIjogInRleHRhcmVhIiwgIndpZHRoIjogNjc2LCAidHlwZV9pZCI6IDEwMDAs
ICJvcmRlciI6IDAsICJ1dWlkIjogIjZlYjMxNTNmLWQyYTctNDEyZS05MTZhLWQ0YzhhOGIxMmI5
YyIsICJwbGFjZWhvbGRlciI6ICIiLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJoaWRlX25vdGlm
aWNhdGlvbiI6IGZhbHNlLCAicmljaF90ZXh0IjogdHJ1ZSwgImludGVybmFsIjogZmFsc2UsICJw
cmVmaXgiOiBudWxsLCAiaWQiOiAxNTQsICJ0ZW1wbGF0ZXMiOiBbXSwgIm5hbWUiOiAiaW5jaWRl
bnRfaWQiLCAidmFsdWVzIjogW10sICJleHBvcnRfa2V5IjogIm5scF9zaW1pbGFyX2luY2lkZW50
cy9pbmNpZGVudF9pZCJ9LCAic2ltaWxhcml0eSI6IHsiZGVwcmVjYXRlZCI6IGZhbHNlLCAicmVh
ZF9vbmx5IjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgInRvb2x0aXAiOiAiIiwgIm9wZXJhdGlv
bnMiOiBbXSwgImNoYW5nZWFibGUiOiB0cnVlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgInRleHQi
OiAiU2ltaWxhcml0eSIsICJpbnB1dF90eXBlIjogInRleHQiLCAid2lkdGgiOiA2NCwgInR5cGVf
aWQiOiAxMDAwLCAib3JkZXIiOiAxLCAidXVpZCI6ICJmODhmZGE5NC1kNzBjLTQ1NDQtYjQzNS1j
ZDJjNzQ4MGIwMzEiLCAicGxhY2Vob2xkZXIiOiAiIiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAi
aGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiaW50ZXJuYWwi
OiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJpZCI6IDE1NSwgInRlbXBsYXRlcyI6IFtdLCAibmFt
ZSI6ICJzaW1pbGFyaXR5IiwgInZhbHVlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJubHBfc2ltaWxh
cl9pbmNpZGVudHMvc2ltaWxhcml0eSJ9fSwgInNjcmlwdHMiOiBbXSwgImZvcl9ub3RpZmljYXRp
b25zIjogZmFsc2UsICJ0eXBlX25hbWUiOiAibmxwX3NpbWlsYXJfaW5jaWRlbnRzIiwgImRpc3Bs
YXlfbmFtZSI6ICJOTFAgU2ltaWxhciBJbmNpZGVudHMiLCAicGFyZW50X3R5cGVzIjogWyJpbmNp
ZGVudCJdLCAiZm9yX2N1c3RvbV9maWVsZHMiOiBmYWxzZSwgInV1aWQiOiAiNzU3NDY5NGMtODdm
Ny00OTMwLTkxYmYtMTIxYTM4NDU0Nzc4IiwgImlkIjogbnVsbCwgImZvcl93b3JrZmxvd3MiOiBm
YWxzZSwgImFjdGlvbnMiOiBbXSwgInByb3BlcnRpZXMiOiB7ImNhbl9jcmVhdGUiOiBmYWxzZSwg
ImZvcl93aG8iOiBbXSwgImNhbl9kZXN0cm95IjogZmFsc2V9LCAiZXhwb3J0X2tleSI6ICJubHBf
c2ltaWxhcl9pbmNpZGVudHMiLCAiZm9yX2FjdGlvbnMiOiBmYWxzZSwgInR5cGVfaWQiOiA4fV0s
ICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMiwgImJ1aWxkX251bWJlciI6IDEyLCAibWlu
b3IiOiAzLCAidmVyc2lvbiI6ICIzMi4zLjEyIn0sICJhY3Rpb25fb3JkZXIiOiBbXSwgInJvbGVz
IjogW10sICJvdmVycmlkZXMiOiBbXSwgImluZHVzdHJpZXMiOiBudWxsLCAiZXhwb3J0X2RhdGUi
OiAxNTcyMzU0OTc4MDI4LCAid29ya3NwYWNlcyI6IFtdLCAiaWQiOiAxLCAicmVndWxhdG9ycyI6
IG51bGwsICJsb2NhbGUiOiBudWxsLCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImdlb3Mi
OiBudWxsLCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJlbmFibGVkIjogZmFsc2UsICJ1dWlkIjogImJm
ZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJpZCI6IDAsICJkZXNjcmlwdGlv
biI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiaGlkZGVuIjogZmFsc2Us
ICJzeXN0ZW0iOiBmYWxzZSwgImNyZWF0ZV9kYXRlIjogMTU3MjM1NTAwNjkxNiwgInBhcmVudF9p
ZCI6IG51bGwsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJ1
cGRhdGVfZGF0ZSI6IDE1NzIzNTUwMDY5MTYsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24g
UGFja2FnZXMgKGludGVybmFsKSJ9XSwgImxheW91dHMiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImRl
c2NyaXB0aW9uIjogeyJjb250ZW50IjogIiIsICJmb3JtYXQiOiAidGV4dCJ9LCAiZGVzdGluYXRp
b25faGFuZGxlIjogInJlc2lsaWVudF9tbCIsICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogbnVsbCwg
ImRlc2NyaXB0aW9uIjogbnVsbCwgImFjdGlvbnMiOiBbXSwgIndvcmtmbG93X2lkIjogMSwgInBy
b2dyYW1tYXRpY19uYW1lIjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwgIm5hbWUiOiAiRXhhbXBs
ZSBvZiBOTFAgc2VhcmNoIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50In1dLCAiZGlzcGxheV9u
YW1lIjogIlJlc2lsaWVudCBOTFAgc2VhcmNoIiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7Im5hbWUi
OiAibWFzdGVyQGV4YW1wbGUuY29tIiwgImlkIjogMiwgImRpc3BsYXlfbmFtZSI6ICJtYXN0ZXJm
aXJzdCBtYXN0ZXJsYXN0IiwgInR5cGUiOiAidXNlciJ9LCAidXVpZCI6ICI0ODc5NjBhMy04YTEy
LTQ5YzEtYjg1Mi0xMzlhNjAzMTEyZTYiLCAiaWQiOiAxLCAiY3JlYXRvciI6IHsibmFtZSI6ICJt
YXN0ZXJAZXhhbXBsZS5jb20iLCAiaWQiOiAyLCAiZGlzcGxheV9uYW1lIjogIm1hc3RlcmZpcnN0
IG1hc3Rlcmxhc3QiLCAidHlwZSI6ICJ1c2VyIn0sICJ2aWV3X2l0ZW1zIjogW3siZWxlbWVudCI6
ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVh
ZGVyIjogZmFsc2UsICJjb250ZW50IjogIjk4MDIwNGE2LTNmNDMtNDBkOS1iNzIwLTcyMTM1MjFj
ZGY3NyIsICJzaG93X2lmIjogbnVsbCwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJlbGVtZW50Ijog
ImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfbGlua19oZWFk
ZXIiOiBmYWxzZSwgImNvbnRlbnQiOiAiYWY5YTM3OWUtYTQ4Yi00N2RkLTk4ZmItNzNiYTM2ODhh
ZDlhIiwgInNob3dfaWYiOiBudWxsLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgIm5hbWUiOiAicmVz
aWxpZW50X25scF9zZWFyY2giLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU3MjM1MzE3ODk1NCwg
ImV4cG9ydF9rZXkiOiAicmVzaWxpZW50X25scF9zZWFyY2giLCAidmVyc2lvbiI6IDF9XSwgInRp
bWVmcmFtZXMiOiBudWxsfQ==
"""
    )