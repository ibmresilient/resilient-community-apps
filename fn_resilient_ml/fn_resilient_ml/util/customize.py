# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_resilient_ml"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_resilient_ml package"""
    reload_params = {"package": u"fn_resilient_ml",
                    "incident_fields": [], 
                    "action_fields": [u"number_top_similar_incidents"], 
                    "function_params": [u"number_incidents", u"search_incident_id"], 
                    "datatables": [u"nlp_similar_incidents"], 
                    "message_destinations": [u"resilient_ml"], 
                    "functions": [u"resilient_nlp_search"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"resilient_nlp_search"], 
                    "actions": [u"NLP Search"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     number_top_similar_incidents
    #   Function inputs:
    #     number_incidents
    #     search_incident_id
    #   DataTables:
    #     nlp_similar_incidents
    #   Message Destinations:
    #     resilient_ml
    #   Functions:
    #     resilient_nlp_search
    #   Workflows:
    #     resilient_nlp_search
    #   Rules:
    #     NLP Search


    yield ImportDefinition(u"""
eyJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAiaWQiOiAyLCAibGF5b3V0cyI6IFtdLCAi
aW5jaWRlbnRfdHlwZXMiOiBbeyJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2Vz
IChpbnRlcm5hbCkiLCAic3lzdGVtIjogZmFsc2UsICJlbmFibGVkIjogZmFsc2UsICJwYXJlbnRf
aWQiOiBudWxsLCAiaWQiOiAwLCAidXBkYXRlX2RhdGUiOiAxNTcxODUyNTE5MjEyLCAibmFtZSI6
ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiY3JlYXRlX2RhdGUiOiAxNTcx
ODUyNTE5MjEyLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5h
bCkiLCAiaGlkZGVuIjogZmFsc2UsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRh
MDAwNDA0NGFhMCJ9XSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAidGltZWZyYW1lcyI6IG51bGws
ICJpbmJvdW5kX21haWxib3hlcyI6IG51bGwsICJzY3JpcHRzIjogW10sICJncm91cHMiOiBudWxs
LCAiZ2VvcyI6IG51bGwsICJvdmVycmlkZXMiOiBbXSwgInR5cGVzIjogW3siYWN0aW9ucyI6IFtd
LCAiaWQiOiBudWxsLCAidGFncyI6IFtdLCAicGFyZW50X3R5cGVzIjogWyJpbmNpZGVudCJdLCAi
ZXhwb3J0X2tleSI6ICJubHBfc2ltaWxhcl9pbmNpZGVudHMiLCAic2NyaXB0cyI6IFtdLCAidHlw
ZV9uYW1lIjogIm5scF9zaW1pbGFyX2luY2lkZW50cyIsICJwcm9wZXJ0aWVzIjogeyJjYW5fZGVz
dHJveSI6IGZhbHNlLCAiY2FuX2NyZWF0ZSI6IGZhbHNlLCAiZm9yX3dobyI6IFtdfSwgInR5cGVf
aWQiOiA4LCAiZm9yX25vdGlmaWNhdGlvbnMiOiBmYWxzZSwgImZvcl9hY3Rpb25zIjogZmFsc2Us
ICJkaXNwbGF5X25hbWUiOiAiTkxQIFNpbWlsYXIgSW5jaWRlbnRzIiwgImZvcl9jdXN0b21fZmll
bGRzIjogZmFsc2UsICJmb3Jfd29ya2Zsb3dzIjogZmFsc2UsICJmaWVsZHMiOiB7ImluY2lkZW50
X2lkIjogeyJvcmRlciI6IDAsICJpZCI6IDE4NSwgIm5hbWUiOiAiaW5jaWRlbnRfaWQiLCAiZXhw
b3J0X2tleSI6ICJubHBfc2ltaWxhcl9pbmNpZGVudHMvaW5jaWRlbnRfaWQiLCAib3BlcmF0aW9u
X3Blcm1zIjoge30sICJ0ZXh0IjogIkluY2lkZW50IElEIiwgInJlYWRfb25seSI6IGZhbHNlLCAi
YWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAidG9vbHRpcCI6ICIiLCAiYmxhbmtfb3B0aW9u
IjogZmFsc2UsICJkZXByZWNhdGVkIjogZmFsc2UsICJvcGVyYXRpb25zIjogW10sICJ1dWlkIjog
ImM2ZjBhNjJiLWJkZWUtNDU4OC05YjY0LTczODZiYzllZDIzYiIsICJ3aWR0aCI6IDY4OSwgImNh
bGN1bGF0ZWQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInR5cGVfaWQiOiAxMDAwLCAiZGVmYXVsdF9j
aG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAi
dGV4dGFyZWEiLCAidGVtcGxhdGVzIjogW10sICJyaWNoX3RleHQiOiB0cnVlLCAiaGlkZV9ub3Rp
ZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVmaXgiOiBudWxsLCAidmFs
dWVzIjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImludGVybmFsIjogZmFsc2V9LCAic2ltaWxh
cml0eSI6IHsib3JkZXIiOiAxLCAiaWQiOiAxODYsICJuYW1lIjogInNpbWlsYXJpdHkiLCAiZXhw
b3J0X2tleSI6ICJubHBfc2ltaWxhcl9pbmNpZGVudHMvc2ltaWxhcml0eSIsICJvcGVyYXRpb25f
cGVybXMiOiB7fSwgInRleHQiOiAiU2ltaWxhcml0eSIsICJyZWFkX29ubHkiOiBmYWxzZSwgImFs
bG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgInRvb2x0aXAiOiAiIiwgImJsYW5rX29wdGlvbiI6
IGZhbHNlLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAib3BlcmF0aW9ucyI6IFtdLCAidXVpZCI6ICI3
OTI1OTA4Ni1hODFjLTQ3NjMtYTRjNi01ZTg0MDU3MzcyNzQiLCAid2lkdGgiOiA1MSwgImNhbGN1
bGF0ZWQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInR5cGVfaWQiOiAxMDAwLCAiZGVmYXVsdF9jaG9z
ZW5fYnlfc2VydmVyIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4
dCIsICJ0ZW1wbGF0ZXMiOiBbXSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVmaXgiOiBudWxsLCAidmFsdWVzIjog
W10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImludGVybmFsIjogZmFsc2V9fSwgInV1aWQiOiAiMzFm
MTA0NmYtM2FhNS00YzRhLWJiNWUtNWNkOWJkNTBmMWU4In1dLCAiYWN0aW9uX29yZGVyIjogW10s
ICJsb2NhbGUiOiBudWxsLCAid29ya2Zsb3dzIjogW3sid29ya2Zsb3dfaWQiOiAxLCAiYWN0aW9u
cyI6IFtdLCAidGFncyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlIG9mIE5MUCBzZWFyY2giLCAibGFz
dF9tb2RpZmllZF90aW1lIjogMTU3MTg0MTM1MzUxNywgImV4cG9ydF9rZXkiOiAicmVzaWxpZW50
X25scF9zZWFyY2giLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBl
bmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9y
Zy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxp
ZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5z
dGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48
cHJvY2VzcyBpZD1cInJlc2lsaWVudF9ubHBfc2VhcmNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwi
IG5hbWU9XCJFeGFtcGxlIG9mIE5MUCBzZWFyY2hcIj48ZG9jdW1lbnRhdGlvbj5HaXZlbiBhbiBp
bmNpZGVudCwgdXNlIGl0cyBuYW1lLCBkZXNjcmlwdGlvbiwgYXJ0aWZhY3QgZGVzY3JpcHRpb24s
IGFuZCByZXNvbHV0aW9uIHN1bW1hcnkgdG8gZG8gbmxwIHNlYXJjaCwgaW4gb3JkZXIgdG8gZmlu
ZCBzaW1pbGFyIGluY2lkZW50cy48L2RvY3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFy
dEV2ZW50XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzFyNDE2dzg8L291dGdvaW5n
Pjwvc3RhcnRFdmVudD48c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18wOWd3bWQyXCIgbmFt
ZT1cIlJlc2lsaWVudCBubHAgc2VhcmNoXCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxl
eHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCJiNzRhM2U2ZC01MjIz
LTRkMTItODk1Yy1lMGI1ZjVlZTI5YzlcIj57XCJpbnB1dHNcIjp7XCI1ZjJlZTA4Yy1mNDhiLTQ3
NzItODUxMC1lMzdjZDIwMmQwZDlcIjp7XCJpbnB1dF90eXBlXCI6XCJzdGF0aWNcIixcInN0YXRp
Y19pbnB1dFwiOntcIm11bHRpc2VsZWN0X3ZhbHVlXCI6W10sXCJudW1iZXJfdmFsdWVcIjo1fX19
LFwicG9zdF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiXFxuZm9yIGluYyBpbiByZXN1bHRzLmluY2lk
ZW50czpcXG4gIGluY19yb3cgPSBpbmNpZGVudC5hZGRSb3coXFxcIm5scF9zaW1pbGFyX2luY2lk
ZW50c1xcXCIpXFxuICBpbmNfcm93W1xcXCJpbmNpZGVudF9pZFxcXCJdID0gaGVscGVyLmNyZWF0
ZVJpY2hUZXh0KGluY1tcXFwiaW5jX2xpbmtcXFwiXSlcXG4gIGluY19yb3dbXFxcInNpbWlsYXJp
dHlcXFwiXSA9IHN0cihpbmNbXFxcInNpbWlsYXJpdHlcXFwiXSlcXG5cXG5cXG4gIFwiLFwicHJl
X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpbnB1dHMuc2VhcmNoX2luY2lkZW50X2lkID0gaW5jaWRl
bnQuaWRcXG5pZiBydWxlLnByb3BlcnRpZXMubnVtYmVyX3RvcF9zaW1pbGFyX2luY2lkZW50cyAm
Z3Q7IDAgYW5kIHJ1bGUucHJvcGVydGllcy5udW1iZXJfdG9wX3NpbWlsYXJfaW5jaWRlbnRzICZs
dDsgMTAwOlxcbiAgaW5wdXRzLm51bWJlcl9pbmNpZGVudHMgPSBydWxlLnByb3BlcnRpZXMubnVt
YmVyX3RvcF9zaW1pbGFyX2luY2lkZW50c1wifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5z
aW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xcjQxNnc4PC9pbmNvbWluZz48b3V0
Z29pbmc+U2VxdWVuY2VGbG93XzFjdHVsZjQ8L291dGdvaW5nPjwvc2VydmljZVRhc2s+PHNlcXVl
bmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xcjQxNnc4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVu
dF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMDlnd21kMlwiLz48ZW5kRXZlbnQg
aWQ9XCJFbmRFdmVudF8xbHNsY21nXCI+PGluY29taW5nPlNlcXVlbmNlRmxvd18xY3R1bGY0PC9p
bmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMWN0dWxm
NFwiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzA5Z3dtZDJcIiB0YXJnZXRSZWY9XCJFbmRFdmVu
dF8xbHNsY21nXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRc
Ij48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48
YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRF
dmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48dGV4
dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8wdGgzbjRvXCI+PHRleHQ+PCFbQ0RBVEFb
SW5wdXQ6XG4xLiBJbmNpZGVudCBJRFxuMi4gTnVtYmVyIG9mIGluY2lkZW50cyB0byByZXR1cm5c
bl1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9u
XzFvbWRpam5cIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wOWd3bWQyXCIgdGFyZ2V0UmVmPVwi
VGV4dEFubm90YXRpb25fMHRoM240b1wiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3Rh
dGlvbl8wOWh0NGZtXCI+PHRleHQ+PCFbQ0RBVEFbUmV0dXJuOlxuU2ltaWxhciBpbmNpZGVudHMg
cmFua2VkIGJ5IHNpbWlsYXJpdHlcbl1dPjwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lh
dGlvbiBpZD1cIkFzc29jaWF0aW9uXzB1dnpwOXRcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18w
OWd3bWQyXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMDlodDRmbVwiLz48L3Byb2Nlc3M+
PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFu
ZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQ
TU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVu
dF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4
PVwiMzUwXCIgeT1cIjE2OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjM0NVwiIHk9XCIyMDNcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRl
eHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0
XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNz
b2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3
YXlwb2ludCB4PVwiMzUxXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxOTFcIi8+PG9t
Z2RpOndheXBvaW50IHg9XCIxODVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwi
Lz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZp
Y2VUYXNrXzA5Z3dtZDJcIiBpZD1cIlNlcnZpY2VUYXNrXzA5Z3dtZDJfZGlcIj48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiNTEwXCIgeT1cIjE0NlwiLz48L2Jw
bW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxv
d18xcjQxNnc4XCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMXI0MTZ3OF9kaVwiPjxvbWdkaTp3YXlwb2lu
dCB4PVwiMzg2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODZcIi8+PG9tZ2RpOndh
eXBvaW50IHg9XCI1MTBcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjE4NlwiLz48YnBt
bmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1c
IjQ0OFwiIHk9XCIxNjRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMWxzbGNtZ1wiIGlkPVwiRW5k
RXZlbnRfMWxzbGNtZ19kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2
XCIgeD1cIjc5OC45MDk4NzUzNTk1Mzk4XCIgeT1cIjE2OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48
b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjgxNi45MDk4NzUzNTk1
Mzk4XCIgeT1cIjIwN1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMWN0dWxmNFwiIGlkPVwi
U2VxdWVuY2VGbG93XzFjdHVsZjRfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjYxMFwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTg2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNzk5XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxODZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI3MDQuNVwiIHk9XCIxNjRc
Ii8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBl
IGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMHRoM240b1wiIGlkPVwiVGV4dEFubm90YXRp
b25fMHRoM240b19kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODJcIiB3aWR0aD1cIjExMlwi
IHg9XCIzMThcIiB5PVwiLTEzXCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdl
IGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMW9tZGlqblwiIGlkPVwiQXNzb2NpYXRpb25fMW9t
ZGlqbl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNTE3XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIxNDlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0MjFcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjY5XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJw
bW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMDlodDRmbVwiIGlkPVwiVGV4dEFubm90YXRpb25f
MDlodDRmbV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiNzhcIiB3aWR0aD1cIjEwN1wiIHg9
XCI2ODRcIiB5PVwiLTlcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBt
bkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8wdXZ6cDl0XCIgaWQ9XCJBc3NvY2lhdGlvbl8wdXZ6cDl0
X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI2MDNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIg
eT1cIjE0OVwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjY5NFwiIHhzaTp0eXBlPVwib21nZGM6UG9p
bnRcIiB5PVwiNjlcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBt
bmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgInZlcnNpb24iOiAxNCwgIndvcmtmbG93
X2lkIjogInJlc2lsaWVudF9ubHBfc2VhcmNoIn0sICJkZXNjcmlwdGlvbiI6ICJHaXZlbiBhbiBp
bmNpZGVudCwgdXNlIGl0cyBuYW1lLCBkZXNjcmlwdGlvbiwgYXJ0aWZhY3QgZGVzY3JpcHRpb24s
IGFuZCByZXNvbHV0aW9uIHN1bW1hcnkgdG8gZG8gbmxwIHNlYXJjaCwgaW4gb3JkZXIgdG8gZmlu
ZCBzaW1pbGFyIGluY2lkZW50cy4iLCAiY29udGVudF92ZXJzaW9uIjogMTQsICJjcmVhdG9yX2lk
IjogIm1hc3RlckBleGFtcGxlLmNvbSIsICJsYXN0X21vZGlmaWVkX2J5IjogIm1hc3RlckBleGFt
cGxlLmNvbSIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJyZXNpbGllbnRfbmxwX3NlYXJjaCIsICJ1
dWlkIjogImNiN2U0MGYxLTA4NzgtNGZiMC1iNDYzLTJmYTczZWYyMDBlYyIsICJvYmplY3RfdHlw
ZSI6ICJpbmNpZGVudCJ9XSwgInJvbGVzIjogW10sICJ3b3Jrc3BhY2VzIjogW10sICJhY3Rpb25z
IjogW3siaWQiOiAxOCwgInRhZ3MiOiBbXSwgIm5hbWUiOiAiTkxQIFNlYXJjaCIsICJsb2dpY190
eXBlIjogImFsbCIsICJhdXRvbWF0aW9ucyI6IFtdLCAiZXhwb3J0X2tleSI6ICJOTFAgU2VhcmNo
IiwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW10sICJlbmFibGVkIjogdHJ1ZSwgIndvcmtmbG93
cyI6IFsicmVzaWxpZW50X25scF9zZWFyY2giXSwgInZpZXdfaXRlbXMiOiBbeyJzdGVwX2xhYmVs
IjogbnVsbCwgInNob3dfaWYiOiBudWxsLCAiZWxlbWVudCI6ICJodG1sIiwgImZpZWxkX3R5cGUi
OiBudWxsLCAiY29udGVudCI6ICJGaW5kIHRvcCBpbmNpZGVudHMgc2ltaWxhciB0byB0aGlzIG9u
ZSwgYmFzZWQgb24gbmFtZSBhbmQgZGVzY3JpcHRpb24gdXNpbmcgTkxQLiIsICJzaG93X2xpbmtf
aGVhZGVyIjogZmFsc2V9LCB7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19pZiI6IG51bGwsICJl
bGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJhY3Rpb25pbnZvY2F0aW9uIiwg
ImNvbnRlbnQiOiAiMDFjOGU1NWUtNTNiMC00M2ExLWI2ODctMDAzMTExZjU1NjBjIiwgInNob3df
bGlua19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2lmIjogbnVs
bCwgImVsZW1lbnQiOiAiaHRtbCIsICJmaWVsZF90eXBlIjogbnVsbCwgImNvbnRlbnQiOiAiPGEg
aHJlZj1cImh0dHBzOi8vZ2l0aHViLmlibS5jb20vUmVzaWxpZW50L3Jlc2lsaWVudC1jb21tdW5p
dHktYXBwcy9ibG9iL0lOVF8xOTc1X1VJL2ZuX3Jlc2lsaWVudF9tbC9kb2MvaGVscC5tZFwiPiBI
ZWxwPC9hPiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2V9XSwgIm9iamVjdF90eXBlIjogImlu
Y2lkZW50IiwgInR5cGUiOiAxLCAiY29uZGl0aW9ucyI6IFtdLCAidXVpZCI6ICI4MWQ2OTkxOS0x
NzFiLTQ3NTItOTk3Ni03NGYzOTRmOTRjZjAiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDB9XSwg
InBoYXNlcyI6IFtdLCAidGFncyI6IFtdLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJzZXJ2ZXJf
dmVyc2lvbiI6IHsibWlub3IiOiAyLCAidmVyc2lvbiI6ICIzNC4yLjQ3IiwgIm1ham9yIjogMzQs
ICJidWlsZF9udW1iZXIiOiA0N30sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7ImFwaV9rZXlz
IjogW10sICJ1c2VycyI6IFsibWFzdGVyQGV4YW1wbGUuY29tIl0sICJ0YWdzIjogW10sICJuYW1l
IjogInJlc2lsaWVudF9tbCIsICJleHBvcnRfa2V5IjogInJlc2lsaWVudF9tbCIsICJwcm9ncmFt
bWF0aWNfbmFtZSI6ICJyZXNpbGllbnRfbWwiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJ1dWlk
IjogIjUxZTY1OWUyLTQ3ZjItNDk0ZC04MTNkLTdiMDdjMmQxYzc1MiIsICJleHBlY3RfYWNrIjog
dHJ1ZX1dLCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImV4cG9ydF9kYXRlIjogMTU3MTg1
MjQ4NjMyNSwgImZ1bmN0aW9ucyI6IFt7ImlkIjogMSwgInRhZ3MiOiBbXSwgIm5hbWUiOiAicmVz
aWxpZW50X25scF9zZWFyY2giLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU3MTg1MDc5MDY2Niwg
ImNyZWF0b3IiOiB7ImRpc3BsYXlfbmFtZSI6ICJtYXN0ZXJmaXJzdCBtYXN0ZXJsYXN0IiwgImlk
IjogNCwgInR5cGUiOiAidXNlciIsICJuYW1lIjogIm1hc3RlckBleGFtcGxlLmNvbSJ9LCAiZGVz
Y3JpcHRpb24iOiB7ImNvbnRlbnQiOiBudWxsLCAiZm9ybWF0IjogInRleHQifSwgInZlcnNpb24i
OiA1LCAiZGVzdGluYXRpb25faGFuZGxlIjogInJlc2lsaWVudF9tbCIsICJsYXN0X21vZGlmaWVk
X2J5IjogeyJkaXNwbGF5X25hbWUiOiAibWFzdGVyZmlyc3QgbWFzdGVybGFzdCIsICJpZCI6IDQs
ICJ0eXBlIjogInVzZXIiLCAibmFtZSI6ICJtYXN0ZXJAZXhhbXBsZS5jb20ifSwgImRpc3BsYXlf
bmFtZSI6ICJSZXNpbGllbnQgTkxQIHNlYXJjaCIsICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlwdGlv
biI6IG51bGwsICJ3b3JrZmxvd19pZCI6IDEsICJhY3Rpb25zIjogW10sICJ0YWdzIjogW10sICJw
cm9ncmFtbWF0aWNfbmFtZSI6ICJyZXNpbGllbnRfbmxwX3NlYXJjaCIsICJuYW1lIjogIkV4YW1w
bGUgb2YgTkxQIHNlYXJjaCIsICJ1dWlkIjogbnVsbCwgIm9iamVjdF90eXBlIjogImluY2lkZW50
In1dLCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFiZWwiOiBudWxsLCAic2hvd19pZiI6IG51bGws
ICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgImNv
bnRlbnQiOiAiZWUzNWZjY2UtYmUwZi00N2ExLWI1ZDYtN2QwOTEwMDUwMDJiIiwgInNob3dfbGlu
a19oZWFkZXIiOiBmYWxzZX0sIHsic3RlcF9sYWJlbCI6IG51bGwsICJzaG93X2lmIjogbnVsbCwg
ImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAiY29u
dGVudCI6ICI1ZjJlZTA4Yy1mNDhiLTQ3NzItODUxMC1lMzdjZDIwMmQwZDkiLCAic2hvd19saW5r
X2hlYWRlciI6IGZhbHNlfV0sICJleHBvcnRfa2V5IjogInJlc2lsaWVudF9ubHBfc2VhcmNoIiwg
InV1aWQiOiAiYjc0YTNlNmQtNTIyMy00ZDEyLTg5NWMtZTBiNWY1ZWUyOWM5In1dLCAiaW5kdXN0
cmllcyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImZpZWxkcyI6IFt7ImlkIjogMTgzLCAi
bmFtZSI6ICJzZWFyY2hfaW5jaWRlbnRfaWQiLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL3Nl
YXJjaF9pbmNpZGVudF9pZCIsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAic2VhcmNo
X2luY2lkZW50X2lkIiwgInJlYWRfb25seSI6IGZhbHNlLCAiYWxsb3dfZGVmYXVsdF92YWx1ZSI6
IGZhbHNlLCAidG9vbHRpcCI6ICJpbmNpZGVudCB0byBzZWFyY2ggdXNpbmcgTkxQLiIsICJibGFu
a19vcHRpb24iOiBmYWxzZSwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgIm9wZXJhdGlvbnMiOiBbXSwg
InV1aWQiOiAiZWUzNWZjY2UtYmUwZi00N2ExLWI1ZDYtN2QwOTEwMDUwMDJiIiwgImNhbGN1bGF0
ZWQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInR5cGVfaWQiOiAxMSwgImRlZmF1bHRfY2hvc2VuX2J5
X3NlcnZlciI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogIm51bWJlciIs
ICJ0ZW1wbGF0ZXMiOiBbXSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiaGlkZV9ub3RpZmljYXRpb24i
OiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVmaXgiOiBudWxsLCAidmFsdWVzIjogW10s
ICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImludGVybmFsIjogZmFsc2V9LCB7ImlkIjogMTgyLCAibmFt
ZSI6ICJudW1iZXJfaW5jaWRlbnRzIiwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9udW1iZXJf
aW5jaWRlbnRzIiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJudW1iZXJfaW5jaWRl
bnRzIiwgInJlYWRfb25seSI6IGZhbHNlLCAiYWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAi
dG9vbHRpcCI6ICJOdW1iZXIgb2YgaW5jaWRlbnRzIHRvIHJldHVybiBmb3IgdG9wIHNpbWlsYXJp
dHkiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJkZXByZWNhdGVkIjogZmFsc2UsICJvcGVyYXRp
b25zIjogW10sICJ1dWlkIjogIjVmMmVlMDhjLWY0OGItNDc3Mi04NTEwLWUzN2NkMjAyZDBkOSIs
ICJjYWxjdWxhdGVkIjogZmFsc2UsICJ0YWdzIjogW10sICJ0eXBlX2lkIjogMTEsICJkZWZhdWx0
X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6
ICJudW1iZXIiLCAidGVtcGxhdGVzIjogW10sICJyaWNoX3RleHQiOiBmYWxzZSwgImhpZGVfbm90
aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICJudW1iZXIgb2YgaW5jaWRlbnQgdG8g
cmV0dXJuIiwgInByZWZpeCI6IG51bGwsICJ2YWx1ZXMiOiBbXSwgImNoYW5nZWFibGUiOiB0cnVl
LCAiaW50ZXJuYWwiOiBmYWxzZX0sIHsiaWQiOiAxODQsICJuYW1lIjogIm51bWJlcl90b3Bfc2lt
aWxhcl9pbmNpZGVudHMiLCAiZXhwb3J0X2tleSI6ICJhY3Rpb25pbnZvY2F0aW9uL251bWJlcl90
b3Bfc2ltaWxhcl9pbmNpZGVudHMiLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIk51
bWJlciBvZiBpbmNpZGVudHMiLCAicmVhZF9vbmx5IjogZmFsc2UsICJhbGxvd19kZWZhdWx0X3Zh
bHVlIjogZmFsc2UsICJ0b29sdGlwIjogIk51bWJlciBvZiB0b3Agc2ltaWxhciBpbmNpZGVudHMg
dG8gcmV0dXJuIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAi
b3BlcmF0aW9ucyI6IFtdLCAidXVpZCI6ICIwMWM4ZTU1ZS01M2IwLTQzYTEtYjY4Ny0wMDMxMTFm
NTU2MGMiLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAidGFncyI6IFtdLCAidHlwZV9pZCI6IDYsICJk
ZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRf
dHlwZSI6ICJudW1iZXIiLCAidGVtcGxhdGVzIjogW10sICJyaWNoX3RleHQiOiBmYWxzZSwgImhp
ZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICJEZWZhdWx0IGdpdmVuIGlu
IHdvcmtmbG93IGlucHV0IHRhYiIsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJ2YWx1ZXMiOiBb
XSwgImNoYW5nZWFibGUiOiB0cnVlLCAiaW50ZXJuYWwiOiBmYWxzZX0sIHsiaWQiOiA1OSwgIm5h
bWUiOiAiaW5jX3RyYWluaW5nIiwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvaW5jX3RyYWluaW5n
IiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJTaW11bGF0aW9uIiwgInJlYWRfb25s
eSI6IHRydWUsICJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFsc2UsICJ0b29sdGlwIjogIldoZXRo
ZXIgdGhlIGluY2lkZW50IGlzIGEgc2ltdWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuIFRo
aXMgZmllbGQgaXMgcmVhZC1vbmx5LiIsICJibGFua19vcHRpb24iOiBmYWxzZSwgImRlcHJlY2F0
ZWQiOiBmYWxzZSwgIm9wZXJhdGlvbnMiOiBbXSwgInV1aWQiOiAiYzNmMGUzZWQtMjFlMS00ZDUz
LWFmZmItZmU1Y2EzMzA4Y2NhIiwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInR5
cGVfaWQiOiAwLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJjaG9zZW4iOiBm
YWxzZSwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJ0ZW1wbGF0ZXMiOiBbXSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJ2
YWx1ZXMiOiBbXSwgImNoYW5nZWFibGUiOiB0cnVlLCAiaW50ZXJuYWwiOiBmYWxzZX1dLCAidGFz
a19vcmRlciI6IFtdfQ==
"""
    )