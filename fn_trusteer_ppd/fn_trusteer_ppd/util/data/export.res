{
  "action_order": [],
  "actions": [],
  "apps": [],
  "automatic_tasks": [],
  "export_date": 1674841443892,
  "export_format_version": 2,
  "export_type": null,
  "fields": [
    {
      "export_key": "incident/internal_customizations_field",
      "id": 0,
      "input_type": "text",
      "internal": true,
      "name": "internal_customizations_field",
      "read_only": true,
      "text": "Customizations Field (internal)",
      "type_id": 0,
      "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa1"
    }
  ],
  "functions": [],
  "geos": null,
  "groups": null,
  "id": 125,
  "inbound_destinations": [],
  "inbound_mailboxes": null,
  "incident_artifact_types": [],
  "incident_types": [
    {
      "create_date": 1674841442564,
      "description": "Customization Packages (internal)",
      "enabled": false,
      "export_key": "Customization Packages (internal)",
      "hidden": false,
      "id": 0,
      "name": "Customization Packages (internal)",
      "parent_id": null,
      "system": false,
      "update_date": 1674841442564,
      "uuid": "bfeec2d4-3770-11e8-ad39-4a0004044aa0"
    }
  ],
  "industries": null,
  "layouts": [],
  "locale": null,
  "message_destinations": [
    {
      "api_keys": [],
      "destination_type": 0,
      "expect_ack": true,
      "export_key": "fn_trusteer_ppd",
      "name": "fn_trusteer_ppd",
      "programmatic_name": "fn_trusteer_ppd",
      "tags": [],
      "users": [
        "admin@example.com"
      ],
      "uuid": "b35ba6b9-bbdd-47a7-9fff-a31f70428a59"
    }
  ],
  "notifications": null,
  "overrides": null,
  "phases": [],
  "playbooks": [],
  "regulators": null,
  "roles": [],
  "scripts": [
    {
      "actions": [],
      "created_date": 1674841244946,
      "description": "Parse an email from Trusteer Pinpoint Detect and create a case if there is not an Active case with the Session ID already in SOAR.",
      "enabled": false,
      "export_key": "Trusteer PPD: Create case from email",
      "id": 29,
      "language": "python3",
      "last_modified_by": "admin@example.com",
      "last_modified_time": 1674841283127,
      "name": "Trusteer PPD: Create case from email",
      "object_type": "__emailmessage",
      "playbook_handle": null,
      "programmatic_name": "trusteer_ppd_create_case_from_email",
      "script_text": "import re\nimport time\n\n# The new incident owner - the email address of a user or the name of a group and cannot be blank.\n# Change this value to reflect who will be the owner of the incident before running the script.\nnew_case_owner = \"Trusteer Pinpoint Detect owner\"\n\n# Change to True if you have Outbound Email 2.0+ installed and wish to capture the inbound email as a conversation \nSAVE_CONVERSATION = False\n\n# pattern used to find and extract the email message-id\nMESSAGE_PATTERN = re.compile(r\"([^\u003c\u003e]+)\")\n# check for any combination of upper/lowercase http/https/news/telnet/file. Characters repeated for readability\nDEFANG_PATTERN = re.compile(r\"(https|http|ftps|ftp|mailto|news|file|mailto):\", re.IGNORECASE)\n# possible message-id names\nMESSAGE_ID_LIST =  [\"x-original-message-id\", \"x-microsoft-original-message-id\", \"x-google-original-message-id\", \"message-id\"]\n\nCOUNTRY_NAMES = {\n    \"AFG\": \"Afghanistan\",\n    \"ALA\": \"\u00c5land Islands\",\n    \"ALB\": \"Albania\",\n    \"DZA\": \"Algeria\",\n    \"ASM\": \"American Samoa\",\n    \"AND\": \"Andorra\",\n    \"AGO\": \"Angola\",\n    \"AIA\": \"Anguilla\",\n    \"ATA\": \"Antarctica\",\n    \"ATG\": \"Antigua and Barbuda\",\n    \"ARG\": \"Argentina\",\n    \"ARM\": \"Armenia\",\n    \"ABW\": \"Aruba\",\n    \"AUS\": \"Australia\",\n    \"AUT\": \"Austria\",\n    \"AZE\": \"Azerbaijan\",\n    \"BHS\": \"Bahamas\",\n    \"BHR\": \"Bahrain\",\n    \"BGD\": \"Bangladesh\",\n    \"BRB\": \"Barbados\",\n    \"BLR\": \"Belarus\",\n    \"BEL\": \"Belgium\",\n    \"BLZ\": \"Belize\",\n    \"BEN\": \"Benin\",\n    \"BMU\": \"Bermuda\",\n    \"BTN\": \"Bhutan\",\n    \"BOL\": \"Plurinational State of Bolivia\",\n    \"BES\": \"Sint Eustatius and Saba Bonaire\",\n    \"BIH\": \"Bosnia and Herzegovina\",\n    \"BWA\": \"Botswana\",\n    \"BVT\": \"Bouvet Island\",\n    \"BRA\": \"Brazil\",\n    \"IOT\": \"British Indian Ocean Territory\",\n    \"VGB\": \"British Virgin Islands\",\n    \"BRN\": \"Brunei Darussalam\",\n    \"BGR\": \"Bulgaria\",\n    \"BFA\": \"Burkina Faso\",\n    \"BDI\": \"Burundi\",\n    \"KHM\": \"Cambodia\",\n    \"CMR\": \"Cameroon\",\n    \"CAN\": \"Canada\",\n    \"CPV\": \"Cape Verde\",\n    \"CYM\": \"Cayman Islands\",\n    \"CAF\": \"Central African Republic\",\n    \"TCD\": \"Chad\",\n    \"CHL\": \"Chile\",\n    \"CHN\": \"China\",\n    \"CXR\": \"Christmas Island\",\n    \"CCK\": \"Cocos (Keeling) Islands\",\n    \"COL\": \"Colombia\",\n    \"COM\": \"Comoros\",\n    \"COK\": \"Cook Islands\",\n    \"CRI\": \"Costa Rica\",\n    \"HRV\": \"Croatia\",\n    \"CUB\": \"Cuba\",\n    \"CUW\": \"Cura\u00e7ao\",\n    \"CYP\": \"Cyprus\",\n    \"CZE\": \"Czech Republic\",\n    \"COD\": \"The Democratic Republic of the Congo\",\n    \"DNK\": \"Denmark\",\n    \"DJI\": \"Djibouti\",\n    \"DMA\": \"Dominica\",\n    \"DOM\": \"Dominican Republic\",\n    \"TLS\": \"Timor-Leste\",\n    \"ECU\": \"Ecuador\",\n    \"EGY\": \"Egypt\",\n    \"SLV\": \"El Salvador\",\n    \"GNQ\": \"Equatorial Guinea\",\n    \"ERI\": \"Eritrea\",\n    \"EST\": \"Estonia\",\n    \"ETH\": \"Ethiopia\",\n    \"FLK\": \"Falkland Islands (Malvinas)\",\n    \"FRO\": \"Faroe Islands\",\n    \"FJI\": \"Fiji\",\n    \"FIN\": \"Finland\",\n    \"FRA\": \"France\",\n    \"GUF\": \"French Guiana\",\n    \"PYF\": \"French Polynesia\",\n    \"ATF\": \"French Southern Territories\",\n    \"GAB\": \"Gabon\",\n    \"GMB\": \"Gambia\",\n    \"GEO\": \"Georgia (Country)\",\n    \"DEU\": \"Germany\",\n    \"GHA\": \"Ghana\",\n    \"GIB\": \"Gibraltar\",\n    \"GRC\": \"Greece\",\n    \"GRL\": \"Greenland\",\n    \"GRD\": \"Grenada\",\n    \"GLP\": \"Guadeloupe\",\n    \"GUM\": \"United States\",\n    \"GTM\": \"Guatemala\",\n    \"GGY\": \"Guernsey\",\n    \"GIN\": \"Guinea\",\n    \"GNB\": \"Guinea-Bissau\",\n    \"GUY\": \"Guyana\",\n    \"HTI\": \"Haiti\",\n    \"HMD\": \"Heard Island and McDonald Islands\",\n    \"HND\": \"Honduras\",\n    \"HKG\": \"Hong Kong S.A.R. of the PRC\",\n    \"HUN\": \"Hungary\",\n    \"ISL\": \"Iceland\",\n    \"IND\": \"India\",\n    \"IDN\": \"Indonesia\",\n    \"IRN\": \"Iran\",\n    \"IRQ\": \"Iraq\",\n    \"IRL\": \"Ireland\",\n    \"IMN\": \"Isle of Man\",\n    \"ISR\": \"Israel\",\n    \"ITA\": \"Italy\",\n    \"CIV\": \"The Republic of C\u00f4te d\u0027Ivoire,\",\n    \"JAM\": \"Jamaica\",\n    \"JPN\": \"Japan\",\n    \"JEY\": \"Jersey\",\n    \"JOR\": \"Jordan\",\n    \"KAZ\": \"Kazakhstan\",\n    \"KEN\": \"Kenya\",\n    \"KIR\": \"Kiribati\",\n    \"XXK\": \"Kosovo\",\n    \"KWT\": \"Kuwait\",\n    \"KGZ\": \"Kyrgyzstan\",\n    \"LAO\": \"Laos People\u0027s Democratic Republic\",\n    \"LVA\": \"Latvia\",\n    \"LBN\": \"Lebanon\",\n    \"LSO\": \"Lesotho\",\n    \"LBR\": \"Liberia\",\n    \"LBY\": \"Libya\",\n    \"LIE\": \"Liechtenstein\",\n    \"LTU\": \"Lithuania\",\n    \"LUX\": \"Luxembourg\",\n    \"MAC\": \"Macao S.A.R. of the PRC\",\n    \"MKD\": \"Republic of Macedonia\",\n    \"MDG\": \"Madagascar\",\n    \"MWI\": \"Malawi\",\n    \"MYS\": \"Malaysia\",\n    \"MDV\": \"Maldives\",\n    \"MLI\": \"Mali\",\n    \"MLT\": \"Malta\",\n    \"MHL\": \"Marshall Islands\",\n    \"MTQ\": \"Martinique\",\n    \"MRT\": \"Mauritania\",\n    \"MUS\": \"Mauritius\",\n    \"MYT\": \"Mayotte\",\n    \"MEX\": \"Mexico\",\n    \"FSM\": \"Federated States of Micronesia\",\n    \"MDA\": \"Republic of Moldova\",\n    \"MCO\": \"Monaco\",\n    \"MNG\": \"Mongolia\",\n    \"MNE\": \"Montenegro\",\n    \"MSR\": \"Montserrat\",\n    \"MAR\": \"Morocco\",\n    \"MOZ\": \"Mozambique\",\n    \"MMR\": \"Myanmar\",\n    \"NAM\": \"Namibia\",\n    \"NRU\": \"Nauru\",\n    \"NPL\": \"Nepal\",\n    \"NLD\": \"Netherlands\",\n    \"NCL\": \"New Caledonia\",\n    \"NZL\": \"New Zealand\",\n    \"NIC\": \"Nicaragua\",\n    \"NER\": \"Niger\",\n    \"NGA\": \"Nigeria\",\n    \"NIU\": \"Niue\",\n    \"NFK\": \"Norfolk Island\",\n    \"PRK\": \"Democratic People\u0027s Republic of Korea\",\n    \"MNP\": \"Northern Mariana Islands\",\n    \"NOR\": \"Norway\",\n    \"OMN\": \"Oman\",\n    \"PAK\": \"Pakistan\",\n    \"PLW\": \"Palau\",\n    \"PSE\": \"State of Palestine\",\n    \"PAN\": \"Panama\",\n    \"PNG\": \"Papua New Guinea\",\n    \"PRY\": \"Paraguay\",\n    \"PER\": \"Peru\",\n    \"PHL\": \"Philippines\",\n    \"PCN\": \"Pitcairn\",\n    \"POL\": \"Poland\",\n    \"PRT\": \"Portugal\",\n    \"PRI\": \"Puerto Rico\",\n    \"QAT\": \"Qatar\",\n    \"COG\": \"Congo\",\n    \"REU\": \"R\u00e9union\",\n    \"ROU\": \"Romania\",\n    \"RUS\": \"Russia Federation\",\n    \"RWA\": \"Rwanda\",\n    \"BLM\": \"Saint Barth\u00e9lemy\",\n    \"SHN\": \"Ascension and Tristan Da Cunha Saint Helena\",\n    \"KNA\": \"Saint Kitts and Nevis\",\n    \"LCA\": \"Saint Lucia\",\n    \"MAF\": \"Saint Martin (French Part)\",\n    \"SPM\": \"Saint Pierre and Miquelon\",\n    \"VCT\": \"Saint Vincent and the Grenadines\",\n    \"WSM\": \"Samoa\",\n    \"SMR\": \"San Marino\",\n    \"STP\": \"Sao Tome and Principe\",\n    \"SAU\": \"Saudi Arabia\",\n    \"SEN\": \"Senegal\",\n    \"SRB\": \"Serbia\",\n    \"SCG\": \"Serbia and Montenegro\",\n    \"SYC\": \"Seychelles\",\n    \"SLE\": \"Sierra Leone\",\n    \"SGP\": \"Singapore\",\n    \"SXM\": \"Sint Maarten (Dutch Part)\",\n    \"SVK\": \"Slovakia\",\n    \"SVN\": \"Slovenia\",\n    \"SLB\": \"Solomon Islands\",\n    \"SOM\": \"Somalia\",\n    \"ZAF\": \"South Africa\",\n    \"SGS\": \"South Georgia and the South Sandwich Islands\",\n    \"KOR\": \"Republic of Korea\",\n    \"SSD\": \"South Sudan\",\n    \"ESP\": \"Spain\",\n    \"LKA\": \"Sri Lanka\",\n    \"SDN\": \"Sudan\",\n    \"SUR\": \"Suriname\",\n    \"SJM\": \"Svalbard and Jan Mayen\",\n    \"SWZ\": \"Swaziland\",\n    \"SWE\": \"Sweden\",\n    \"CHE\": \"Switzerland\",\n    \"SYR\": \"Syrian Arab Republic\",\n    \"TWN\": \"Taiwan\",\n    \"TJK\": \"Tajikistan\",\n    \"TZA\": \"Tanzania\",\n    \"THA\": \"Thailand\",\n    \"TGO\": \"Togo\",\n    \"TKL\": \"Tokelau\",\n    \"TON\": \"Tonga\",\n    \"TTO\": \"Trinidad and Tobago\",\n    \"TUN\": \"Tunisia\",\n    \"TUR\": \"Turkey\",\n    \"TKM\": \"Turkmenistan\",\n    \"TCA\": \"Turks and Caicos Islands\",\n    \"TUV\": \"Tuvalu\",\n    \"VIR\": \"U.S. Virgin Islands\",\n    \"UGA\": \"Uganda\",\n    \"UKR\": \"Ukraine\",\n    \"ARE\": \"United Arab Emirates\",\n    \"GBR\": \"United Kingdom\",\n    \"USA\": \"United States\",\n    \"UMI\": \"United States Minor Outlying Islands\",\n    \"URY\": \"Uruguay\",\n    \"UZB\": \"Uzbekistan\",\n    \"VUT\": \"Vanuatu\",\n    \"VAT\": \"Holy See (Vatican City State)\",\n    \"VEN\": \"Bolivarian Republic of Venezuela\",\n    \"VNM\": \"Viet Nam\",\n    \"WLF\": \"Wallis and Futuna\",\n    \"ESH\": \"Western Sahara\",\n    \"YEM\": \"Yemen\",\n    \"ZMB\": \"Zambia\",\n    \"ZWE\": \"Zimbabwe\"\n}\nclass EmailProcessor(object):\n    \"\"\" A class that facilitates processing the body contents of an email message.\n    Once the EmailProcessor class has been instantiated, the other methods can be used to add artifacts to the\n    incident.\n    \"\"\"\n\n    # The body of the email - the plaintext and html versions of the same email, if present\n    email_contents = []\n    email_contents_json = {}\n\n    def __init__(self):\n        \"\"\"The EmailProcessor constructor.\n        As initialization it retrieves the email body as both text and HTML.\n        \"\"\"\n        if (emailmessage.body.content is not None):\n            self.email_contents = emailmessage.body.content\n        if (len(self.email_contents) == 0):\n            log.error(\"Email message has no contents!\")\n        else:\n            self.email_contents_json = self.build_dict(self.email_contents)\n\n    def add_info_to_case(self):\n        # Fill in case fields with info from the Trusteer Pinpoint Detect email\n\n        newReporterInfo = emailmessage.sender.address\n        if hasattr(emailmessage.sender, \"name\") and emailmessage.sender.name is not None:\n            newReporterInfo = u\"{0} \u003c{1}\u003e\".format(\n                emailmessage.sender.name, emailmessage.sender.address)\n            log.info(u\"Adding reporter field \\\"{0}\\\"\".format(newReporterInfo))\n            incident.reporter = newReporterInfo\n\n        incident.description = \"Trusteer Pinpoint Detect Alert\"\n        incident.discovered_date = self.email_contents_json.get(\"Event received at\")\n        incident.start_date = self.email_contents_json.get(\"Event received at\")\n        incident.plan_status = \"A\"\n        incident.country = COUNTRY_NAMES.get(self.email_contents_json.get(\"Country name\"), \"-\")\n        incident.city = self.email_contents_json.get(\"Country name\", None)\n        incident.properties.trusteer_ppd_security_event_id = self.email_contents_json.get(\"Trusteer Security Event ID\")\n        incident.properties.trusteer_ppd_feed_item_type = self.email_contents_json.get(\"Feed item type\")\n        incident.properties.trusteer_ppd_new_device_indication = self.email_contents_json.get(\"New Device Indication\")\n        incident.properties.trusteer_ppd_activity = self.email_contents_json.get(\"Activity\")\n        incident.properties.trusteer_ppd_recommendation = self.email_contents_json.get(\"Recommendation\")\n        incident.properties.trusteer_ppd_session_id = self.email_contents_json.get(\"Session ID\")\n\n        # Add a note containing the email contents\n        incident.addNote(\"Email from Trusteer Pinpoint Detect:\u003cbr\u003e {0}\".format(self.email_contents))\n\n    def get_trusteer_ppd_session_id(self):\n        trusteer_ppd_session_id = self.email_contents_json.get(\"Session ID\", None)\n        if trusteer_ppd_session_id is None:\n            log.error(\"Email message has no  Pinpoint Detect Session ID!\")\n        return trusteer_ppd_session_id\n\n    @staticmethod\n    def build_dict(content):\n        \"\"\"\n        Builds a dictionary from either the rest_headers or rest_cookies\n        :param rest_temp: rest_headers or rest_cookies\n        :return: Dictionary\n        \"\"\"\n        temp_dict = {}\n        if content is not None:\n            lines = content.split(\"\\n\")\n            for line in lines:\n                keyval = line.strip().split(\": \", 1)\n                if len(keyval) == 2:\n                    temp_dict[keyval[0].strip()] = keyval[1].strip()\n        return temp_dict\n\n    def processAttachments(self):\n        \"\"\" A method to process the email attachments, if present. Each non-inline email attachment is added as an\n        attachment to the incident, and its name is added as an artifact. Inline attachments are assumed to be unimportant.\n        No return value.\n        \"\"\"\n        for attachment in emailmessage.attachments:\n            if not attachment.inline:\n                incident.addEmailAttachment(attachment.id)\n                incident.addArtifact(\n                    \"Email Attachment Name\", attachment.suggested_filename, \"\")\n\n    @staticmethod\n    def get_message_id(headers):\n        msg_id_list = [v for k,v in headers.items() if k.lower() in MESSAGE_ID_LIST]\n        # find the message id among several choices\n        msg_id = msg_id_list[0] if msg_id_list else None\n        if msg_id:\n            match = MESSAGE_PATTERN.findall(msg_id.strip()) # remove brackets \u003c\u003e\n            if match:\n                return match[0]\n    \n    @staticmethod\n    def save_message_id(headers):\n        # extract the message ID and retain\n        msg_id = processor.get_message_id(headers)\n        if msg_id and hasattr(incident.properties, \u0027email_message_id\u0027):\n            incident.properties.email_message_id = msg_id\n\n    @staticmethod\n    def add_email_conversation(headers, msg_body, msg_attachments):\n        # attempt to add to incident datatable, if present\n      \n        def handle_list(value):\n            # convert a list to comma separate list, if neccessary\n            if value and isinstance(value, list):\n                return \", \".join(value)\n        \n            return value\n        \n        try:\n            row = incident.addRow(\u0027email_conversations\u0027)\n            row[\u0027date_sent\u0027] = int(time.time()*1000) # TODO ts from headers.get(\"Date\")\n            row[\u0027source\u0027] = \"inbound\"\n            row[\u0027inbound_id\u0027] = emailmessage.id\n            row[\u0027recipients\u0027] = helper.createRichText(\"To: {}\u003cbr\u003eCc: {}\u003cbr\u003eBcc: {}\".format(handle_list(headers.get(\"To\")), handle_list(headers.get(\"CC\", \u0027\u0027)), handle_list(headers.get(\"BCC\", \u0027\u0027))))\n            row[\u0027from\u0027] = handle_list(headers.get(\"From\"))\n            row[\u0027subject\u0027] = handle_list(headers.get(\"Subject\"))\n            row[\u0027body\u0027] = DEFANG_PATTERN.sub(r\"x_\\1_x:\", msg_body)\n            row[\u0027attachments\u0027] = \", \".join(msg_attachments)\n            row[\u0027message_id\u0027] = processor.get_message_id(headers)\n            row[\u0027in_reply_to\u0027] = handle_list(headers.get(\"References\"))\n            row[\u0027importance\u0027] = handle_list((headers.get(\"Importance\") or {\"1\": \"high\", \"2\": \"normal\", \"3\": \"low\"}.get(headers.get(\"X-Priority\"), \"normal\")))\n        except Exception as err:\n            log.warn(str(err))\n\n###\n# Mainline starts here\n###\n\n# Create the email processor object, loading it with the email message body content.\nprocessor = EmailProcessor()\n\n# We need to check that the email has a subject otherwise the script will fail\nsubject = emailmessage.subject if hasattr(emailmessage, \u0027subject\u0027) else None\n\n# Create a suitable title for an incident based on the email\nnew_case_title = \"Trusteer Case from email \\\"{0}\\\" via mailbox {1}\".format(\n    subject, emailmessage.inbound_mailbox)\n\n# Check to see if a similar incident already exists\n# We will search for an incident which has the same name as we would give a new incident\ntrusteer_ppd_session_id = processor.get_trusteer_ppd_session_id()\nquery_builder.equals(fields.incident.plan_status, \"A\")\nquery_builder.equals(fields.incident.trusteer_ppd_session_id, trusteer_ppd_session_id)\nquery = query_builder.build()\ncases = helper.findIncidents(query)\n\nif len(cases) == 0:\n    # A similar case does not already exist. Create a new case and associate the email with it.\n    log.info(u\"Creating new case {0}\".format(new_case_title))\n\n    # Create an incident with a title based on the email subject, owned identified by variable newIncidentOwner\n    emailmessage.createAssociatedIncident(new_case_title, new_case_owner)\n\n    # Update custom fields of the new case\n    processor.add_info_to_case()\n\n    # add message-id for easy tracking\n    processor.save_message_id(emailmessage.headers)\nelse:\n    # A similar case already exists. Associate the email with this preexisting case.\n    log.info(u\"Associating with existing case {0}\".format(cases[0].id))\n    emailmessage.associateWithIncident(cases[0])\n\n# Add email message attachments to incident\nprocessor.processAttachments()\n\nif SAVE_CONVERSATION:\n    processor.add_email_conversation(emailmessage.headers, \n        emailmessage.getBodyHtmlRaw() if emailmessage.getBodyHtmlRaw() else emailmessage.body.content, \n        [attachment.suggested_filename for attachment in emailmessage.attachments])",
      "tags": [],
      "uuid": "89d7ae06-382e-4222-be63-5292ec13445a"
    }
  ],
  "server_version": {
    "build_number": 7899,
    "major": 45,
    "minor": 0,
    "version": "45.0.7899"
  },
  "tags": [],
  "task_order": [],
  "timeframes": null,
  "types": [],
  "workflows": [],
  "workspaces": []
}
