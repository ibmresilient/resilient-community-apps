# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_res_to_icd"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_res_to_icd package"""
    reload_params = {"package": u"fn_res_to_icd",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"res_to_icd"], 
                    "functions": [u"fn_res_to_icd"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_res_to_icd_workflow"], 
                    "actions": [u"escalate_res_to_icd"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     incident_id
    #   Message Destinations:
    #     res_to_icd
    #   Functions:
    #     fn_res_to_icd
    #   Workflows:
    #     example_res_to_icd_workflow
    #   Rules:
    #     escalate_res_to_icd


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMSwgImJ1aWxkX251bWJl
ciI6IDc2LCAidmVyc2lvbiI6ICIzMS4xLjc2In0sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAy
LCAiaWQiOiA4LCAiZXhwb3J0X2RhdGUiOiAxNTU5MDMxMTIwMDM5LCAiZmllbGRzIjogW3siaWQi
OiAzNywgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJwcmVm
aXgiOiBudWxsLCAidHlwZV9pZCI6IDAsICJ0b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lkZW50
IGlzIGEgc2ltdWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuICBUaGlzIGZpZWxkIGlzIHJl
YWQtb25seS4iLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwgImhpZGVfbm90aWZpY2F0aW9uIjog
ZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNl
LCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICJjM2Yw
ZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAib3BlcmF0aW9ucyI6IFtdLCAib3Bl
cmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IHRydWUsICJjaGFu
Z2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVu
dC9pbmNfdHJhaW5pbmciLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFsc2V9LCB7
ImlkIjogMTUzLCAibmFtZSI6ICJpbmNpZGVudF9pZCIsICJ0ZXh0IjogImluY2lkZW50X2lkIiwg
InByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlwIjogIiIsICJwbGFjZWhvbGRl
ciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAicmVxdWlyZWQiOiAiYWx3YXlzIiwgImhp
ZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2Vu
X2J5X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJpbnRlcm5hbCI6IGZh
bHNlLCAidXVpZCI6ICIwZGQxYzJlMS05NWM5LTQ0NGMtODY4OC0yNjlkZWE2ZmI3ZjEiLCAib3Bl
cmF0aW9ucyI6IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ2YWx1ZXMiOiBbXSwgInJlYWRf
b25seSI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4
cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9pbmNpZGVudF9pZCIsICJ0ZW1wbGF0ZXMiOiBbXSwgImRl
cHJlY2F0ZWQiOiBmYWxzZX1dLCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1
NTkwMzIzNTExNjEsICJjcmVhdGVfZGF0ZSI6IDE1NTkwMzIzNTExNjEsICJ1dWlkIjogImJmZWVj
MmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21p
emF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9u
IFBhY2thZ2VzIChpbnRlcm5hbCkiLCAibmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChp
bnRlcm5hbCkiLCAiZW5hYmxlZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQi
OiBudWxsLCAiaGlkZGVuIjogZmFsc2UsICJpZCI6IDB9XSwgInBoYXNlcyI6IFtdLCAiYXV0b21h
dGljX3Rhc2tzIjogW10sICJvdmVycmlkZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjog
W3sibmFtZSI6ICJyZXNfdG9faWNkIiwgInByb2dyYW1tYXRpY19uYW1lIjogInJlc190b19pY2Qi
LCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJi
cmVkYS5tY2NvbGdhbkBpZS5pYm0uY29tIiwgInNlYW4ub2dvcm1hbkBpYm0uY29tIl0sICJ1dWlk
IjogIjlhYWY5YmIzLTk5ZGEtNGM0ZS1iYzlhLTgwMWY0MTczMTQxMiIsICJleHBvcnRfa2V5Ijog
InJlc190b19pY2QifV0sICJhY3Rpb25zIjogW3siaWQiOiA2MSwgIm5hbWUiOiAiZXNjYWxhdGVf
cmVzX3RvX2ljZCIsICJ0eXBlIjogMSwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImNvbmRp
dGlvbnMiOiBbXSwgImF1dG9tYXRpb25zIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFsi
cmVzX3RvX2ljZCJdLCAid29ya2Zsb3dzIjogWyJleGFtcGxlX3Jlc190b19pY2Rfd29ya2Zsb3ci
XSwgInZpZXdfaXRlbXMiOiBbXSwgInRpbWVvdXRfc2Vjb25kcyI6IDg2NDAwLCAidXVpZCI6ICI5
YThiNTVkZi1jMTA3LTRlMGYtYWY3NC00ZjI5ZTRmOWIzOWMiLCAiZXhwb3J0X2tleSI6ICJlc2Nh
bGF0ZV9yZXNfdG9faWNkIiwgImxvZ2ljX3R5cGUiOiAiYWxsIn1dLCAibGF5b3V0cyI6IFtdLCAi
bm90aWZpY2F0aW9ucyI6IG51bGwsICJ0aW1lZnJhbWVzIjogbnVsbCwgImxvY2FsZSI6IG51bGws
ICJpbmR1c3RyaWVzIjogbnVsbCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiZ2VvcyI6IG51bGwsICJ0
YXNrX29yZGVyIjogW10sICJhY3Rpb25fb3JkZXIiOiBbXSwgInR5cGVzIjogW10sICJzY3JpcHRz
IjogW10sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAid29ya2Zsb3dzIjogW3sid29y
a2Zsb3dfaWQiOiAzNywgIm5hbWUiOiAiRXhhbXBsZTogUmVzIHRvIGljZCB3b3JrZmxvdyIsICJw
cm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3Jlc190b19pY2Rfd29ya2Zsb3ciLCAib2JqZWN0
X3R5cGUiOiAiaW5jaWRlbnQiLCAiZGVzY3JpcHRpb24iOiAiVGhpcyB3b3JrZmxvdyBhaW0gdG8g
ZXNjYWxhdGUgYSByZXNpbGllbnQgaW5jaWRlbnQgdG8gYW4gaWNkIGRlc2sgdGlja2V0LCBpbmNs
dWRpbmcgdGhlIFFyYWRhciBzZXZlcml0eSB0cmFuc2xhdGVkIHRvIGFuIGljZCBkZXNrIHRpY2tl
dCBwcmlvcml0eSIsICJjcmVhdG9yX2lkIjogInNlYW4ub2dvcm1hbkBpYm0uY29tIiwgImxhc3Rf
bW9kaWZpZWRfYnkiOiAic2Vhbi5vZ29ybWFuQGlibS5jb20iLCAibGFzdF9tb2RpZmllZF90aW1l
IjogMTU1OTAzMTEwNzU4MywgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9yZXNfdG9faWNkX3dvcmtm
bG93IiwgInV1aWQiOiAiMWI0YWM3MjgtNjIxYy00Yjg4LWEyYWQtMWI4MjdhM2IwNmZmIiwgImNv
bnRlbnQiOiB7IndvcmtmbG93X2lkIjogImV4YW1wbGVfcmVzX3RvX2ljZF93b3JrZmxvdyIsICJ4
bWwiOiAiPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRlZmluaXRp
b25zIHhtbG5zPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTFwi
IHhtbG5zOmJwbW5kaT1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvRElc
IiB4bWxuczpvbWdkYz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RDXCIg
eG1sbnM6b21nZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9ESVwiIHht
bG5zOnJlc2lsaWVudD1cImh0dHA6Ly9yZXNpbGllbnQuaWJtLmNvbS9icG1uXCIgeG1sbnM6eHNk
PVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFcIiB4bWxuczp4c2k9XCJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiIHRhcmdldE5hbWVzcGFjZT1cImh0
dHA6Ly93d3cuY2FtdW5kYS5vcmcvdGVzdFwiPjxwcm9jZXNzIGlkPVwiZXhhbXBsZV9yZXNfdG9f
aWNkX3dvcmtmbG93XCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBSZXMg
dG8gaWNkIHdvcmtmbG93XCI+PGRvY3VtZW50YXRpb24+VGhpcyB3b3JrZmxvdyBhaW0gdG8gZXNj
YWxhdGUgYSByZXNpbGllbnQgaW5jaWRlbnQgdG8gYW4gaWNkIGRlc2sgdGlja2V0LCBpbmNsdWRp
bmcgdGhlIFFyYWRhciBzZXZlcml0eSB0cmFuc2xhdGVkIHRvIGFuIGljZCBkZXNrIHRpY2tldCBw
cmlvcml0eTwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4
bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMXB4dXlrZTwvb3V0Z29pbmc+PC9zdGFydEV2ZW50
PjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50XzB0cGdqcDVcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93
XzB1YmQzdG48L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNl
Rmxvd18xcHh1eWtlXCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVm
PVwiU2VydmljZVRhc2tfMWVjYzg2dlwiLz48c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18x
ZWNjODZ2XCIgbmFtZT1cImZuX3Jlc190b19pY2RcIiByZXNpbGllbnQ6dHlwZT1cImZ1bmN0aW9u
XCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVpZD1cIjQ3YTkzM2Zh
LTk0MjctNGNmNy1iNWJmLWZiMTQ5N2I2Mzg1Y1wiPntcImlucHV0c1wiOntcIjBkZDFjMmUxLTk1
YzktNDQ0Yy04Njg4LTI2OWRlYTZmYjdmMVwiOntcImlucHV0X3R5cGVcIjpcInN0YXRpY1wiLFwi
c3RhdGljX2lucHV0XCI6e1wibXVsdGlzZWxlY3RfdmFsdWVcIjpbXSxcIm51bWJlcl92YWx1ZVwi
OjIxMDF9fX0sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpZiByZXN1bHRzLnN1Y2Nlc3M6
XFxuICBub3RlX3RleHQgPVxcXCJ7fSBoYXMgYmVlbiBhZGRlZCB0byBpY2QgZGVzayBwcmlvcml0
eVxcXCIuZm9ybWF0KGluY2lkZW50LnZhbHVlKVxcbiAgaW5jaWRlbnQuYWRkTm90ZShoZWxwZXIu
Y3JlYXRlUGxhaW5UZXh0KG5vdGVfdGV4dCkpXFxuZWxzZTpcXG4gIG5vdGVfdGV4dCA9IFxcXCJF
cnJvciBhZGRpbmcgUXJhZGFyIHNldmVyaXR5IHt9XFxcIi5mb3JtYXQoaW5jaWRlbnQudmFsdWUp
XFxuICBpbmNpZGVudC5hZGROb3RlKGhlbHBlci5jcmVhdGVQbGFpblRleHQobm90ZV90ZXh0KSlc
IixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5wdXRzLi5pbmNpZGVudF9pZD1pbmNpZGVu
dC5pbmNpZGVudF9pZFwiLFwicmVzdWx0X25hbWVcIjpcIlwifTwvcmVzaWxpZW50OmZ1bmN0aW9u
PjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18xcHh1eWtlPC9pbmNv
bWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB1YmQzdG48L291dGdvaW5nPjwvc2VydmljZVRh
c2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18wdWJkM3RuXCIgc291cmNlUmVmPVwi
U2VydmljZVRhc2tfMWVjYzg2dlwiIHRhcmdldFJlZj1cIkVuZEV2ZW50XzB0cGdqcDVcIi8+PHRl
eHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlv
dXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1c
IkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0
YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQ
TU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVt
ZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJw
bW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1f
ZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5
PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdp
ZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1u
ZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRp
b25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1u
ZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8x
c2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9
XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9p
bnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRp
OkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMHRwZ2pw
NVwiIGlkPVwiRW5kRXZlbnRfMHRwZ2pwNV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZc
IiB3aWR0aD1cIjM2XCIgeD1cIjQ0MlwiIHk9XCIxOTdcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI0NjBcIiB5PVwiMjM2XCIv
PjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBi
cG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xcHh1eWtlXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMXB4
dXlrZV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyNzBcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjIzNFwiIHk9XCIxODQuNVwiLz48L2JwbW5kaTpCUE1O
TGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJT
ZXJ2aWNlVGFza18xZWNjODZ2XCIgaWQ9XCJTZXJ2aWNlVGFza18xZWNjODZ2X2RpXCI+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjI3MFwiIHk9XCIxNjZcIi8+
PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5j
ZUZsb3dfMHViZDN0blwiIGlkPVwiU2VxdWVuY2VGbG93XzB1YmQzdG5fZGlcIj48b21nZGk6d2F5
cG9pbnQgeD1cIjM3MFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjE1XCIvPjxvbWdk
aTp3YXlwb2ludCB4PVwiMzIwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMTVcIi8+
PG9tZ2RpOndheXBvaW50IHg9XCI0NDJcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIx
NVwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9
XCIwXCIgeD1cIjM0NVwiIHk9XCIxOTNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQ
TU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48L2RlZmluaXRp
b25zPiIsICJ2ZXJzaW9uIjogMTF9LCAiYWN0aW9ucyI6IFtdfV0sICJyb2xlcyI6IFtdLCAid29y
a3NwYWNlcyI6IFtdLCAiZnVuY3Rpb25zIjogW3siaWQiOiAzNiwgIm5hbWUiOiAiZm5fcmVzX3Rv
X2ljZCIsICJkaXNwbGF5X25hbWUiOiAiZm5fcmVzX3RvX2ljZCIsICJkZXNjcmlwdGlvbiI6IHsi
Zm9ybWF0IjogInRleHQiLCAiY29udGVudCI6ICJUaGlzIGZ1bmN0aW9uIHRyYW5zZmVycyBhbiBx
cmFkYXIgc2V2ZXJpdHkgdG8gYSBwcmlvcml0eSBvbiB0aGUgaWNkIHRpY2tldCJ9LCAiZGVzdGlu
YXRpb25faGFuZGxlIjogInJlc190b19pY2QiLCAiZXhwb3J0X2tleSI6ICJmbl9yZXNfdG9faWNk
IiwgInV1aWQiOiAiNDdhOTMzZmEtOTQyNy00Y2Y3LWI1YmYtZmIxNDk3YjYzODVjIiwgInZlcnNp
b24iOiA5LCAiY3JlYXRvciI6IHsiaWQiOiA0LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAic2Vh
bi5vZ29ybWFuQGlibS5jb20iLCAiZGlzcGxheV9uYW1lIjogIlNlYW4gTydHb3JtYW4ifSwgImxh
c3RfbW9kaWZpZWRfYnkiOiB7ImlkIjogNCwgInR5cGUiOiAidXNlciIsICJuYW1lIjogInNlYW4u
b2dvcm1hbkBpYm0uY29tIiwgImRpc3BsYXlfbmFtZSI6ICJTZWFuIE8nR29ybWFuIn0sICJsYXN0
X21vZGlmaWVkX3RpbWUiOiAxNTU5MDMxMDcwOTgyLCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFi
ZWwiOiBudWxsLCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmll
bGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgImNvbnRlbnQiOiAiMGRkMWMyZTEtOTVjOS00NDRjLTg2
ODgtMjY5ZGVhNmZiN2YxIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX1dLCAid29ya2Zsb3dz
IjogW3sid29ya2Zsb3dfaWQiOiAzNywgIm5hbWUiOiAiRXhhbXBsZTogUmVzIHRvIGljZCB3b3Jr
ZmxvdyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3Jlc190b19pY2Rfd29ya2Zsb3ci
LCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiZGVzY3JpcHRpb24iOiBudWxsLCAidXVpZCI6
IG51bGwsICJhY3Rpb25zIjogW119XX1dfQ==
"""
    )