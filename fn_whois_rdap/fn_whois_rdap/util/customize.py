# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_whois_rdap"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_whois_rdap package"""
    reload_params = {"package": u"fn_whois_rdap",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"rdap_depth", u"rdap_query"], 
                    "datatables": [], 
                    "message_destinations": [u"fn_whois_rdap"], 
                    "functions": [u"rdap_query"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_rdap_query"], 
                    "actions": [],
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     rdap_depth
    #     rdap_query
    #   Message Destinations:
    #     fn_whois_rdap
    #   Functions:
    #     rdap_query
    #   Workflows:
    #     example_rdap_query


    yield ImportDefinition(u"""
eyJsb2NhbGUiOiBudWxsLCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiAiVGhpcyB3b3Jr
ZmxvdyBnZW5lcmF0ZSBSREFQIGZvcm1hdHRlZCByZXN1bHRzIGZyb20gYW4gSVAgb3IgZG9tYWlu
IG5hbWUgYXJ0aWZhY3QiLCAid29ya2Zsb3dfaWQiOiA5NiwgIm9iamVjdF90eXBlIjogImFydGlm
YWN0IiwgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9yZGFwX3F1ZXJ5IiwgInV1aWQiOiAiY2MxOTkz
ZjYtMWNjNC00ODlhLWFhOWMtMzQyMWNlYTM0MmM2IiwgImxhc3RfbW9kaWZpZWRfYnkiOiAic2Vh
bi5vZ29ybWFuQGlibS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIx
LjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cu
b21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3
dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8v
cmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hl
bWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rl
c3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfcmRhcF9xdWVyeVwiIGlzRXhlY3V0YWJsZT1cInRy
dWVcIiBuYW1lPVwiRXhhbXBsZTogUkRBUCBxdWVyeVwiPjxkb2N1bWVudGF0aW9uPlRoaXMgd29y
a2Zsb3cgZ2VuZXJhdGUgUkRBUCBmb3JtYXR0ZWQgcmVzdWx0cyBmcm9tIGFuIElQIG9yIGRvbWFp
biBuYW1lIGFydGlmYWN0PC9kb2N1bWVudGF0aW9uPjxzdGFydEV2ZW50IGlkPVwiU3RhcnRFdmVu
dF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18xcHo3OWdzPC9vdXRnb2luZz48L3N0
YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwiU2VydmljZVRhc2tfMDZjZzRkdFwiIG5hbWU9XCJS
REFQOiBRdWVyeVwiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVu
dHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiMTliNWJiMzctOWE0ZS00OWVjLTgwMmEtZmJj
MzAwNmRlMTE3XCI+e1wiaW5wdXRzXCI6e30sXCJwb3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJ0
cnk6XFxuICAgIGRlcyA9IGFydGlmYWN0LmRlc2NyaXB0aW9uLmNvbnRlbnRcXG5leGNlcHQgRXhj
ZXB0aW9uOlxcbiAgZGVzID0gTm9uZVxcbmR1bW15ID17fVxcbmR1bW15ID0gcmVzdWx0c1tcXFwi
Y29udGVudFxcXCJdXFxuXFxuaWYgZGVzIGlzIE5vbmU6XFxuICBub3RlID11XFxcIlxcXCJcXFwi
Jmx0O2RpdiZndDsmbHQ7cCZndDtSREFQIHRocmVhdCBpbnRlbGxpZ2VuY2U6XFxcXG5cXFxcbiAm
bHQ7YnImZ3Q7IFBvc3NpYmxlIGRpY3RvbmFyeSBrZXlzOiAmbHQ7YnImZ3Q7IFxcXFxuIHswfSBc
XFxcblxcXFxuICZsdDticiZndDsgQXNzb2NpYXRlZCBvYmplY3RzICZsdDticiZndDsgXFxcXG4g
ezF9IFxcXFxuXFxcXG4gJmx0O2JyJmd0OyBETlMgem9uZTogJmx0O2JyJmd0OyBcXFxcbiB7Mn0m
bHQ7ZGl2Jmd0OyZsdDtwJmd0O1xcXCJcXFwiXFxcIi5mb3JtYXQoZHVtbXkua2V5cygpLCBkdW1t
eS5nZXQodSdvYmplY3RzJyksZHVtbXkuZ2V0KCdkbnNfem9uZScpKVxcbiAgYXJ0aWZhY3QuZGVz
Y3JpcHRpb24gPSBoZWxwZXIuY3JlYXRlUmljaFRleHQobm90ZSlcXG5lbHNlOlxcbiAgbm90ZSA9
IGRlcyArIHVcXFwiXFxcIlxcXCImbHQ7ZGl2Jmd0OyZsdDtwJmd0O1JEQVAgdGhyZWF0IGludGVs
bGlnZW5jZTpcXFxcblxcXFxuICZsdDticiZndDsgUG9zc2libGUgZGljdG9uYXJ5IGtleXM6ICZs
dDticiZndDsgXFxcXG4gezB9IFxcXFxuXFxcXG4gJmx0O2JyJmd0OyBBc3NvY2lhdGVkIG9iamVj
dHMgJmx0O2JyJmd0OyBcXFxcbiB7MX0gXFxcXG5cXFxcbiAmbHQ7YnImZ3Q7IEROUyB6b25lOiAm
bHQ7YnImZ3Q7IFxcXFxuIHsyfSZsdDtkaXYmZ3Q7Jmx0O3AmZ3Q7XFxcIlxcXCJcXFwiLmZvcm1h
dChkdW1teS5rZXlzKCksIGR1bW15LmdldCh1J29iamVjdHMnKSxkdW1teS5nZXQoJ2Ruc196b25l
JykpXFxuICBhcnRpZmFjdC5kZXNjcmlwdGlvbiA9IGhlbHBlci5jcmVhdGVSaWNoVGV4dChub3Rl
KVxcblxcbiNpbmNpZGVudC5hZGROb3RlKGhlbHBlci5jcmVhdGVSaWNoVGV4dChub3RlVGV4dCkp
XCIsXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImlucHV0cy5yZGFwX3F1ZXJ5ID0gYXJ0aWZh
Y3QudmFsdWVcXG5pbnB1dHMucmRhcF9kZXB0aCA9IDBcIixcInJlc3VsdF9uYW1lXCI6XCJcIn08
L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5j
ZUZsb3dfMXB6NzlnczwvaW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wcGtrOGpmPC9v
dXRnb2luZz48L3NlcnZpY2VUYXNrPjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50XzBrZTN1cWhcIj48
aW5jb21pbmc+U2VxdWVuY2VGbG93XzBwa2s4amY8L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVl
bmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xcHo3OWdzXCIgc291cmNlUmVmPVwiU3RhcnRFdmVu
dF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMDZjZzRkdFwiLz48c2VxdWVuY2VG
bG93IGlkPVwiU2VxdWVuY2VGbG93XzBwa2s4amZcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18w
NmNnNGR0XCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRfMGtlM3VxaFwiLz48dGV4dEFubm90YXRpb24g
aWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBo
ZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25f
MXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRl
eHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9
XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmlu
ZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJT
dGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpC
b3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJw
bW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9
XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIg
aWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIz
MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+
PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1c
IkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJw
bW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18wNmNnNGR0XCIgaWQ9XCJT
ZXJ2aWNlVGFza18wNmNnNGR0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRo
PVwiMTAwXCIgeD1cIjM0OFwiIHk9XCIxNzdcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6
QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMGtlM3VxaFwiIGlkPVwiRW5kRXZlbnRf
MGtlM3VxaF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1c
IjYxMlwiIHk9XCIxOTlcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI2MzBcIiB5PVwiMjM4XCIvPjwvYnBtbmRpOkJQTU5MYWJl
bD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVl
bmNlRmxvd18xcHo3OWdzXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMXB6Nzlnc19kaVwiPjxvbWdkaTp3
YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9t
Z2RpOndheXBvaW50IHg9XCIyNTJcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwi
Lz48b21nZGk6d2F5cG9pbnQgeD1cIjI1MlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MjE3XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMzQ4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIyMTdcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wi
IHdpZHRoPVwiMFwiIHg9XCIyNjdcIiB5PVwiMjA1XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2Jw
bW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93
XzBwa2s4amZcIiBpZD1cIlNlcXVlbmNlRmxvd18wcGtrOGpmX2RpXCI+PG9tZ2RpOndheXBvaW50
IHg9XCI0NDhcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIxN1wiLz48b21nZGk6d2F5
cG9pbnQgeD1cIjUwOVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjE3XCIvPjxvbWdk
aTp3YXlwb2ludCB4PVwiNTA5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMTdcIi8+
PG9tZ2RpOndheXBvaW50IHg9XCI2MTJcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIx
N1wiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9
XCIwXCIgeD1cIjUyNFwiIHk9XCIyMTAuNVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6
QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5p
dGlvbnM+IiwgIndvcmtmbG93X2lkIjogImV4YW1wbGVfcmRhcF9xdWVyeSIsICJ2ZXJzaW9uIjog
MjV9LCAiY3JlYXRvcl9pZCI6ICJzZWFuLm9nb3JtYW5AaWJtLmNvbSIsICJhY3Rpb25zIjogW10s
ICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTY3MTU2NDIyNDExLCAicHJvZ3JhbW1hdGljX25hbWUi
OiAiZXhhbXBsZV9yZGFwX3F1ZXJ5IiwgIm5hbWUiOiAiRXhhbXBsZTogUkRBUCBxdWVyeSJ9XSwg
ImFjdGlvbnMiOiBbXSwgImxheW91dHMiOiBbXSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIs
ICJpZCI6IDE4MSwgImluZHVzdHJpZXMiOiBudWxsLCAiZnVuY3Rpb25zIjogW3siZGlzcGxheV9u
YW1lIjogIlJEQVA6IFF1ZXJ5IiwgImRlc2NyaXB0aW9uIjogeyJjb250ZW50IjogIlVzaW5nIGlw
d2hvaXMgbGlicmFyeSB0byBtYWtlIGdlbmVyYWwgcXVlcmllcyBpcyBSREFQIGZvcm1hdCIsICJm
b3JtYXQiOiAidGV4dCJ9LCAiY3JlYXRvciI6IHsidHlwZSI6ICJ1c2VyIiwgImRpc3BsYXlfbmFt
ZSI6ICJTZWFuIE8gR29ybWFuIiwgImlkIjogNzcsICJuYW1lIjogInNlYW4ub2dvcm1hbkBpYm0u
Y29tIn0sICJ2aWV3X2l0ZW1zIjogW3sic2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9f
ZnVuY3Rpb24iLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91
dWlkIiwgImNvbnRlbnQiOiAiODViMmIyYjgtYTY4Yi00MzgzLWEwMDQtY2EwNjBmZDdjNmE2Iiwg
InN0ZXBfbGFiZWwiOiBudWxsfSwgeyJzaG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19m
dW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1
aWQiLCAiY29udGVudCI6ICIwNGVkZDE5ZC1kMDA4LTRhYmMtYTE5Yi03MzFhOTk5NzMyMGQiLCAi
c3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAicmRhcF9xdWVyeSIsICJ1dWlkIjog
IjE5YjViYjM3LTlhNGUtNDllYy04MDJhLWZiYzMwMDZkZTExNyIsICJsYXN0X21vZGlmaWVkX2J5
IjogeyJ0eXBlIjogInVzZXIiLCAiZGlzcGxheV9uYW1lIjogIlNlYW4gTyBHb3JtYW4iLCAiaWQi
OiA3NywgIm5hbWUiOiAic2Vhbi5vZ29ybWFuQGlibS5jb20ifSwgInZlcnNpb24iOiAyLCAid29y
a2Zsb3dzIjogW3sicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9yZGFwX3F1ZXJ5IiwgImRl
c2NyaXB0aW9uIjogbnVsbCwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImFjdGlvbnMiOiBb
XSwgIm5hbWUiOiAiRXhhbXBsZTogUkRBUCBxdWVyeSIsICJ3b3JrZmxvd19pZCI6IDk2LCAidXVp
ZCI6IG51bGx9XSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NjY4NDY4ODc3NjYsICJkZXN0aW5h
dGlvbl9oYW5kbGUiOiAiZm5fd2hvaXNfcmRhcCIsICJpZCI6IDEyMSwgIm5hbWUiOiAicmRhcF9x
dWVyeSJ9XSwgImFjdGlvbl9vcmRlciI6IFtdLCAiZ2VvcyI6IG51bGwsICJ0YXNrX29yZGVyIjog
W10sICJ0eXBlcyI6IFtdLCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3BhY2VzIjogW10sICJh
dXRvbWF0aWNfdGFza3MiOiBbXSwgInBoYXNlcyI6IFtdLCAibm90aWZpY2F0aW9ucyI6IG51bGws
ICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAx
NTY3MTU4MjE5ODgxLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50
ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwp
IiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwg
InVwZGF0ZV9kYXRlIjogMTU2NzE1ODIxOTg4MSwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4
LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAi
cGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10sICJzZXJ2
ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgInZlcnNpb24iOiAiMzEuMC40MjU0IiwgImJ1aWxk
X251bWJlciI6IDQyNTQsICJtaW5vciI6IDB9LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJw
cm9ncmFtbWF0aWNfbmFtZSI6ICJmbl93aG9pc19yZGFwIiwgIm5hbWUiOiAiZm5fd2hvaXNfcmRh
cCIsICJleHBvcnRfa2V5IjogImZuX3dob2lzX3JkYXAiLCAidXVpZCI6ICJhMTNmZjI4ZS01Y2Rl
LTRhNTItYTM3Mi04Zjk0ODQ4M2QzMmUiLCAiZXhwZWN0X2FjayI6IHRydWUsICJkZXN0aW5hdGlv
bl90eXBlIjogMCwgInVzZXJzIjogWyJzZWFuLm9nb3JtYW5AaWJtLmNvbSJdfV0sICJpbmNpZGVu
dF9hcnRpZmFjdF90eXBlcyI6IFtdLCAicm9sZXMiOiBbXSwgImZpZWxkcyI6IFt7Im9wZXJhdGlv
bnMiOiBbXSwgInR5cGVfaWQiOiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlNp
bXVsYXRpb24iLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdl
YWJsZSI6IHRydWUsICJpZCI6IDIyMywgInJlYWRfb25seSI6IHRydWUsICJ1dWlkIjogImMzZjBl
M2VkLTIxZTEtNGQ1My1hZmZiLWZlNWNhMzMwOGNjYSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0
X3R5cGUiOiAiYm9vbGVhbiIsICJ0b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lkZW50IGlzIGEg
c2ltdWxhdGlvbiBvciBhIHJlZ3VsYXIgaW5jaWRlbnQuICBUaGlzIGZpZWxkIGlzIHJlYWQtb25s
eS4iLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjog
W10sICJleHBvcnRfa2V5IjogImluY2lkZW50L2luY190cmFpbmluZyIsICJoaWRlX25vdGlmaWNh
dGlvbiI6IGZhbHNlLCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAiZGVwcmVjYXRlZCI6IGZhbHNl
LCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3Bl
cmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDExLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0
IjogInJkYXBfcXVlcnkiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAi
Y2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDc2MCwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6
ICIwNGVkZDE5ZC1kMDA4LTRhYmMtYTE5Yi03MzFhOTk5NzMyMGQiLCAiY2hvc2VuIjogZmFsc2Us
ICJpbnB1dF90eXBlIjogInRleHQiLCAidG9vbHRpcCI6ICJJUCBvciBkb21haW4gbmFtZSIsICJp
bnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4
cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9yZGFwX3F1ZXJ5IiwgImhpZGVfbm90aWZpY2F0aW9uIjog
ZmFsc2UsICJwbGFjZWhvbGRlciI6ICJpYm0uY29tIiwgIm5hbWUiOiAicmRhcF9xdWVyeSIsICJk
ZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInJl
cXVpcmVkIjogImFsd2F5cyIsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtdLCAidHlw
ZV9pZCI6IDExLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogInJkYXBfZGVwdGgiLCAi
Ymxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUs
ICJpZCI6IDc1OSwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICI4NWIyYjJiOC1hNjhiLTQz
ODMtYTAwNC1jYTA2MGZkN2M2YTYiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogIm51
bWJlciIsICJ0b29sdGlwIjogIjEiLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZh
bHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vcmRhcF9kZXB0
aCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiMSIsICJuYW1l
IjogInJkYXBfZGVwdGgiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlf
c2VydmVyIjogZmFsc2UsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAidmFsdWVzIjogW119XSwgIm92
ZXJyaWRlcyI6IFtdLCAiZXhwb3J0X2RhdGUiOiAxNTY3MTU4MDYyOTY2fQ==
"""
    )